#include <avr/io.h>
//definerad i MS


#define HighSpeed 255
#define MediumSpeed 128
#define LowSpeed 64


// Function headers
int Priority(int operation);
void SetPriority(int priority);
void ClearPriority();
void BlinkLEDs();
void WeAreHit();
void Shoot();
void StartLaserTimer();
void StopLaserTimer();
void StartIRTimer();
void StopIRTimer();
void Rotate(int degrees, bool leftTurn);
int Priority(int operation);
void Scan();
int Abs(int value);




//Variables for storing sensor values
volatile uint8_t tapeSensor1 = 0; //1 for tape, 0 for floor
volatile uint8_t tapeSensor2 = 0; //1 for tape, 0 for floor
volatile uint8_t ultraSonicSensor1 = 0; //distance in dm
volatile uint8_t ultraSonicSensor2 = 0; //distance in dm
volatile uint8_t activeIRsignature = 0; //1 if enemy in front
volatile uint8_t IRSignature = 0; //the active IR signature
volatile uint8_t laserSensor = 0; //1 if hit
volatile uint8_t gyro = 0; //Angular velocity

// Data
bool canShoot = true;
int health = 3;
bool dead = false;

bool scaning = false;
 
// Rotation stuff
bool rotating = false;
int currentRotationValue;
int targetRotation;
#define IDLE_ANGULAR_VELOCITY 128
#define ROTATION_PRIORITY 5

// Laser stuff
#define LASER_TIMER TCCR1B
#define LASER_TIMER_COUNTER TCNT1
// Use to count up to 3 (cool down time)
int CDCTR = 0;
bool laserActive = false;

#define IR_TIMER TCCR3B
#define IR_TIMER_COUNTER TCNT3

#define ONE_SECOND 18000

// Used to count up to 5 (invisibilty time)
int IRCTR = 0; 



int	currentPriority = -1;
bool foundSomethingToDo = false;


int [] orders = int[10];

int main(void){
		
	// If we arent dead (hit three times) we continue our search for enemies
	while(!dead){
		
		// If we are rotating
		if (rotating) {

			angularVelocity = gyro; - IDLE_ANGULAR_VELOCITY;
			
			currentRotationValue += gyro;
			if (currentRotationValue >= targetRotation) {
				nextORder = STOP_MOVING;
			}
		}
		
		// If we are scaning for opponents
		if (scaning) {
			if (ultraSonicSensor1 <= 15 || ultraSonicSensor2 <= 15) {
				nextOrder = STOP_MOVING;
			}
		}
		
		// If something is infront of the robot and the IR-signature is active
		if (ultraSonicSensor1 <= 15 && activeIRsignature) {
			if (canShoot) {
				foundSomethingToDo = true;
				Shoot();
			}
			
		}
		
		if (tapeSensor1 == 1 && tapeSensor2 == 1) {
			Rotate(180, true);
		}
		
		// If the Left line sensor detects tape, turn right
		if(tapeSensor1 == 1){ 
			Rotate(90, false);
		}
		
		// If the Right line sensor detects tape, turn left
		if(tapeSensor2 == 1){ 
			Rotate(90, true);
		}
		
	
		// If the IR-sensor sees an enemy signature ONLY
		if(activeIRsignature == 1 ){
			foundSomethingToDo = true;
			Scan();
		}
		
		// If we are hit
		if(laserSensor == 1){
			foundSomethingToDo = true;
			WeAreHit();
		}
		

		/*
		// If something is ifron of the robot, do something
		if(ultraSonicSensor1 == 10){}
	
		// If something is behind the robot, do something else
		if(ultraSonicSensor2 == 10){}		
		*/
		
		
		
		// If there is nothing else to do, move forward
		if (!foundSomethingToDo) {
			nextOrder = MOVE_FORWARD;
		}

			

		// IR timer stuff
		if (IR_TIMER_COUNTER >= ONE_SECOND) {
			IRCTR++;
			if (IRCTR >= 5) {
				StopIRTimer();
				nextORder = TURN_VISIBLE;
			}
		}
		
		// LASER timer stuff
		if (LASER_TIMER_COUNTER >= ONE_SECOND) {
			CDCTR++;
			if (laserActive) {
				canShoot = false;
				nextOrder = DEACTIVATE_LASER;
				LASER_TIMER_COUNTER = 0;
				laserActive = false;
				
			}
			else {
				if (CDCTR >= 3) {
					canShoot = true;
					StopLaserTimer();
				}
			}
			
		}
	
	}
	
	// Reset the laser timers count variable and start the laser timer (used to get a blinking lEDs)
	StartLaserTimer();
	// This loop blinks the LEDs to show that we are dead
	while (dead) {
		if (LASER_TIMER_COUNTER >= ONE_SECOND) {
			LASER_TIMER_COUNTER = 0;
			CDCTR++;
			nextOrder = DECREMENT_LED_LIVES;
			if (CDCTR == 3) {
				nextORder = RESET_SE;
				CDCTR = 0
			}
		}
		
	}
	
}

int Abs(int value) {
	if (value < 0) {
		value *= -1;
	}
	
	return value;
}

void SetPriority(int priority) {
	currentPriority = priority;
}

void ClearPriority() {
	currentPriority = -1;
}

void BlinkLEDs() {
	
}

void WeAreHit() {	
	health--;
	
	// We are dead
	if (health <= 0) {
		dead = true;
		return;
	}
	
	SetPriority()
	nextOrder = TURN_INVISIBLE_AND_DEC_LIFE_LED;
	StartIRTimer();
	
}

void Shoot() {
	laserActive = true;
	nextOrder = ACTIVATE_LASER;

}


void StartLaserTimer() {
	TCNT1 = 0;
	LASER_TIMER = (1<< CS12) | (1<< CS10);	
}

void StopLaserTimer() {
	LASER_TIMER &= ~(1 << CS12);
	LASER_TIMER &= ~(1 << CS10);
	TCNT1 = 0;
}

void StartIRTimer() {
	TCNT3 = 0;
	IR_TIMER = (1<< CS32) | (1<< CS30);	
}

void StopIRTimer() {
	IR_TIMER &= ~(1 << CS32);
	IR_TIMER &= ~(1 << CS30);
	TCNT3 = 0;
}

void Rotate(int degrees, bool leftTurn) {
	rotating = true;
	targetRotation = degrees;
	
	if (leftTurn) {
		nextOrder = TURN_LEFT;
	}
	else {
		nextOrder = TURN_RIGHT;
	}
	
}

int Priority(int operation) {
	switch(operation){
		case DO_NOTHING:
		return 0;
		case MOVE_FORWARD:
		return 1;
		case TURN_LEFT:
		return 1;
		case TURN_RIGHT:
		return 1;
		case ACTIVATE_LASER:
		return 2;
		case DEACTIVATE_LASER:
		return 2;
		case TURN_INVISIBLE:
		return 2;
		case TURN_VISIBLE:
		return 2;
		case STOP_MOVING:
		return 10;
		case DEC_LIFE_LED:
		return 20;
		case TURN_INVISIBLE_AND_DEC_LIFE_LED:
		return 21;
		case ACTIVATE_LASER_AND_TURN_RIGHT:
		return 21;
		default :
		return 0;
	}
}



void Scan() {
	scaning = true;
	Rotate(360, true);
	
}



//Orders
#define DO_NOTHING 					0
#define MOVE_FORWARD 				1
#define TURN_LEFT 					2
#define TURN_RIGHT 					3
#define ACTIVATE_LASER 				4
#define DEACTIVATE_LASER			5
#define TURN_INVISIBLE 				6
#define TURN_VISIBLE 				7
#define STOP_MOVING 				8
#define DEC_LIFE_LED 				9
#define TURN_INVISIBLE_AND_DEC_LIFE_LED 10
#define ACTIVATE_LASER_AND_TURN_RIGHT 	11



