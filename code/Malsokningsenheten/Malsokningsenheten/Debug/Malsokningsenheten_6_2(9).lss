
Malsokningsenheten_6_2(9).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000010b4  00001148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800114  00800114  0000115c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c02  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e1  00000000  00000000  00001eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a21  00000000  00000000  00002197  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00002bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000913  00000000  00000000  00002dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042d  00000000  00000000  000036ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	94 c0       	rjmp	.+296    	; 0x17a <__vector_20>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 eb       	ldi	r30, 0xB4	; 180
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 31       	cpi	r26, 0x14	; 20
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a4 e1       	ldi	r26, 0x14	; 20
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 33       	cpi	r26, 0x39	; 57
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	14 d4       	rcall	.+2088   	; 0x8ec <main>
      c4:	f5 c7       	rjmp	.+4074   	; 0x10b0 <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z17waitForActivationv>:
	return false;
}

void Scan() {
	scaning = true;
	Rotate(360, true);
      c8:	57 98       	cbi	0x0a, 7	; 10
      ca:	8f ef       	ldi	r24, 0xFF	; 255
      cc:	93 eb       	ldi	r25, 0xB3	; 179
      ce:	01 97       	sbiw	r24, 0x01	; 1
      d0:	f1 f7       	brne	.-4      	; 0xce <_Z17waitForActivationv+0x6>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <_Z17waitForActivationv+0xc>
      d4:	00 00       	nop
      d6:	89 b1       	in	r24, 0x09	; 9
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	88 0f       	add	r24, r24
      dc:	89 2f       	mov	r24, r25
      de:	88 1f       	adc	r24, r24
      e0:	99 0b       	sbc	r25, r25
      e2:	89 2b       	or	r24, r25
      e4:	c1 f3       	breq	.-16     	; 0xd6 <_Z17waitForActivationv+0xe>
      e6:	08 95       	ret

000000e8 <_Z8SendUARTv>:
      e8:	80 91 c8 00 	lds	r24, 0x00C8
      ec:	85 ff       	sbrs	r24, 5
      ee:	44 c0       	rjmp	.+136    	; 0x178 <_Z8SendUARTv+0x90>
      f0:	80 91 0e 01 	lds	r24, 0x010E
      f4:	83 30       	cpi	r24, 0x03	; 3
      f6:	b1 f0       	breq	.+44     	; 0x124 <_Z8SendUARTv+0x3c>
      f8:	28 f4       	brcc	.+10     	; 0x104 <_Z8SendUARTv+0x1c>
      fa:	81 30       	cpi	r24, 0x01	; 1
      fc:	49 f0       	breq	.+18     	; 0x110 <_Z8SendUARTv+0x28>
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	61 f0       	breq	.+24     	; 0x11a <_Z8SendUARTv+0x32>
     102:	30 c0       	rjmp	.+96     	; 0x164 <_Z8SendUARTv+0x7c>
     104:	85 30       	cpi	r24, 0x05	; 5
     106:	c1 f0       	breq	.+48     	; 0x138 <_Z8SendUARTv+0x50>
     108:	90 f0       	brcs	.+36     	; 0x12e <_Z8SendUARTv+0x46>
     10a:	86 30       	cpi	r24, 0x06	; 6
     10c:	d1 f0       	breq	.+52     	; 0x142 <_Z8SendUARTv+0x5a>
     10e:	2a c0       	rjmp	.+84     	; 0x164 <_Z8SendUARTv+0x7c>
     110:	80 91 38 01 	lds	r24, 0x0138
     114:	80 93 ce 00 	sts	0x00CE, r24
     118:	25 c0       	rjmp	.+74     	; 0x164 <_Z8SendUARTv+0x7c>
     11a:	80 91 13 01 	lds	r24, 0x0113
     11e:	80 93 ce 00 	sts	0x00CE, r24
     122:	20 c0       	rjmp	.+64     	; 0x164 <_Z8SendUARTv+0x7c>
     124:	80 91 12 01 	lds	r24, 0x0112
     128:	80 93 ce 00 	sts	0x00CE, r24
     12c:	1b c0       	rjmp	.+54     	; 0x164 <_Z8SendUARTv+0x7c>
     12e:	80 91 11 01 	lds	r24, 0x0111
     132:	80 93 ce 00 	sts	0x00CE, r24
     136:	16 c0       	rjmp	.+44     	; 0x164 <_Z8SendUARTv+0x7c>
     138:	80 91 10 01 	lds	r24, 0x0110
     13c:	80 93 ce 00 	sts	0x00CE, r24
     140:	11 c0       	rjmp	.+34     	; 0x164 <_Z8SendUARTv+0x7c>
     142:	80 91 2f 01 	lds	r24, 0x012F
     146:	88 23       	and	r24, r24
     148:	a1 f0       	breq	.+40     	; 0x172 <_Z8SendUARTv+0x8a>
     14a:	90 91 0f 01 	lds	r25, 0x010F
     14e:	97 70       	andi	r25, 0x07	; 7
     150:	90 93 0f 01 	sts	0x010F, r25
     154:	88 0f       	add	r24, r24
     156:	88 0f       	add	r24, r24
     158:	88 0f       	add	r24, r24
     15a:	89 2b       	or	r24, r25
     15c:	80 93 ce 00 	sts	0x00CE, r24
     160:	10 92 2f 01 	sts	0x012F, r1
     164:	80 91 0e 01 	lds	r24, 0x010E
     168:	8f 5f       	subi	r24, 0xFF	; 255
     16a:	80 93 0e 01 	sts	0x010E, r24
     16e:	87 30       	cpi	r24, 0x07	; 7
     170:	18 f0       	brcs	.+6      	; 0x178 <_Z8SendUARTv+0x90>
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	80 93 0e 01 	sts	0x010E, r24
     178:	08 95       	ret

0000017a <__vector_20>:
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	8f 93       	push	r24
     186:	9f 93       	push	r25
     188:	90 91 c6 00 	lds	r25, 0x00C6
     18c:	89 2f       	mov	r24, r25
     18e:	87 70       	andi	r24, 0x07	; 7
     190:	82 30       	cpi	r24, 0x02	; 2
     192:	89 f0       	breq	.+34     	; 0x1b6 <__vector_20+0x3c>
     194:	28 f4       	brcc	.+10     	; 0x1a0 <__vector_20+0x26>
     196:	88 23       	and	r24, r24
     198:	41 f0       	breq	.+16     	; 0x1aa <__vector_20+0x30>
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	49 f0       	breq	.+18     	; 0x1b0 <__vector_20+0x36>
     19e:	13 c0       	rjmp	.+38     	; 0x1c6 <__vector_20+0x4c>
     1a0:	83 30       	cpi	r24, 0x03	; 3
     1a2:	61 f0       	breq	.+24     	; 0x1bc <__vector_20+0x42>
     1a4:	84 30       	cpi	r24, 0x04	; 4
     1a6:	69 f0       	breq	.+26     	; 0x1c2 <__vector_20+0x48>
     1a8:	0e c0       	rjmp	.+28     	; 0x1c6 <__vector_20+0x4c>
     1aa:	90 93 38 01 	sts	0x0138, r25
     1ae:	0b c0       	rjmp	.+22     	; 0x1c6 <__vector_20+0x4c>
     1b0:	90 93 13 01 	sts	0x0113, r25
     1b4:	08 c0       	rjmp	.+16     	; 0x1c6 <__vector_20+0x4c>
     1b6:	90 93 12 01 	sts	0x0112, r25
     1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <__vector_20+0x4c>
     1bc:	90 93 11 01 	sts	0x0111, r25
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__vector_20+0x4c>
     1c2:	90 93 10 01 	sts	0x0110, r25
     1c6:	9f 91       	pop	r25
     1c8:	8f 91       	pop	r24
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <_Z10StopRotatei>:
     1d4:	10 92 2c 01 	sts	0x012C, r1
     1d8:	10 92 15 01 	sts	0x0115, r1
     1dc:	10 92 16 01 	sts	0x0116, r1
     1e0:	10 92 17 01 	sts	0x0117, r1
     1e4:	10 92 18 01 	sts	0x0118, r1
     1e8:	10 92 28 01 	sts	0x0128, r1
     1ec:	10 92 29 01 	sts	0x0129, r1
     1f0:	10 92 2a 01 	sts	0x012A, r1
     1f4:	10 92 2b 01 	sts	0x012B, r1
     1f8:	10 92 b2 00 	sts	0x00B2, r1
     1fc:	e1 eb       	ldi	r30, 0xB1	; 177
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	90 81       	ld	r25, Z
     202:	98 7f       	andi	r25, 0xF8	; 248
     204:	90 83       	st	Z, r25
     206:	80 93 2f 01 	sts	0x012F, r24
     20a:	08 95       	ret

0000020c <_Z19calculateGyroOffsetl>:
     20c:	60 39       	cpi	r22, 0x90	; 144
     20e:	2f e5       	ldi	r18, 0x5F	; 95
     210:	72 07       	cpc	r23, r18
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	82 07       	cpc	r24, r18
     216:	91 05       	cpc	r25, r1
     218:	51 f1       	breq	.+84     	; 0x26e <_Z19calculateGyroOffsetl+0x62>
     21a:	74 f4       	brge	.+28     	; 0x238 <_Z19calculateGyroOffsetl+0x2c>
     21c:	64 3e       	cpi	r22, 0xE4	; 228
     21e:	27 e5       	ldi	r18, 0x57	; 87
     220:	72 07       	cpc	r23, r18
     222:	81 05       	cpc	r24, r1
     224:	91 05       	cpc	r25, r1
     226:	09 f4       	brne	.+2      	; 0x22a <_Z19calculateGyroOffsetl+0x1e>
     228:	48 c0       	rjmp	.+144    	; 0x2ba <_Z19calculateGyroOffsetl+0xae>
     22a:	68 3c       	cpi	r22, 0xC8	; 200
     22c:	2f ea       	ldi	r18, 0xAF	; 175
     22e:	72 07       	cpc	r23, r18
     230:	81 05       	cpc	r24, r1
     232:	91 05       	cpc	r25, r1
     234:	b9 f0       	breq	.+46     	; 0x264 <_Z19calculateGyroOffsetl+0x58>
     236:	2f c0       	rjmp	.+94     	; 0x296 <_Z19calculateGyroOffsetl+0x8a>
     238:	60 32       	cpi	r22, 0x20	; 32
     23a:	2f eb       	ldi	r18, 0xBF	; 191
     23c:	72 07       	cpc	r23, r18
     23e:	22 e0       	ldi	r18, 0x02	; 2
     240:	82 07       	cpc	r24, r18
     242:	91 05       	cpc	r25, r1
     244:	f1 f0       	breq	.+60     	; 0x282 <_Z19calculateGyroOffsetl+0x76>
     246:	60 34       	cpi	r22, 0x40	; 64
     248:	2e e7       	ldi	r18, 0x7E	; 126
     24a:	72 07       	cpc	r23, r18
     24c:	25 e0       	ldi	r18, 0x05	; 5
     24e:	82 07       	cpc	r24, r18
     250:	91 05       	cpc	r25, r1
     252:	e1 f0       	breq	.+56     	; 0x28c <_Z19calculateGyroOffsetl+0x80>
     254:	68 35       	cpi	r22, 0x58	; 88
     256:	2f e0       	ldi	r18, 0x0F	; 15
     258:	72 07       	cpc	r23, r18
     25a:	22 e0       	ldi	r18, 0x02	; 2
     25c:	82 07       	cpc	r24, r18
     25e:	91 05       	cpc	r25, r1
     260:	d1 f4       	brne	.+52     	; 0x296 <_Z19calculateGyroOffsetl+0x8a>
     262:	0a c0       	rjmp	.+20     	; 0x278 <_Z19calculateGyroOffsetl+0x6c>
     264:	68 e6       	ldi	r22, 0x68	; 104
     266:	72 e4       	ldi	r23, 0x42	; 66
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	08 95       	ret
     26e:	68 ee       	ldi	r22, 0xE8	; 232
     270:	70 e8       	ldi	r23, 0x80	; 128
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	08 95       	ret
     278:	60 e8       	ldi	r22, 0x80	; 128
     27a:	7b eb       	ldi	r23, 0xBB	; 187
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	08 95       	ret
     282:	60 e3       	ldi	r22, 0x30	; 48
     284:	72 ef       	ldi	r23, 0xF2	; 242
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	08 95       	ret
     28c:	60 ec       	ldi	r22, 0xC0	; 192
     28e:	74 ed       	ldi	r23, 0xD4	; 212
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	08 95       	ret
     296:	1c d5       	rcall	.+2616   	; 0xcd0 <__floatsisf>
     298:	20 ea       	ldi	r18, 0xA0	; 160
     29a:	3a ea       	ldi	r19, 0xAA	; 170
     29c:	46 ea       	ldi	r20, 0xA6	; 166
     29e:	53 e4       	ldi	r21, 0x43	; 67
     2a0:	a7 d5       	rcall	.+2894   	; 0xdf0 <__mulsf3>
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	4a e7       	ldi	r20, 0x7A	; 122
     2a8:	54 e4       	ldi	r21, 0x44	; 68
     2aa:	77 d4       	rcall	.+2286   	; 0xb9a <__divsf3>
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e4       	ldi	r19, 0x40	; 64
     2b0:	4c e1       	ldi	r20, 0x1C	; 28
     2b2:	55 e4       	ldi	r21, 0x45	; 69
     2b4:	0e d4       	rcall	.+2076   	; 0xad2 <__addsf3>
     2b6:	d9 c4       	rjmp	.+2482   	; 0xc6a <__fixsfsi>
     2b8:	08 95       	ret
     2ba:	60 e1       	ldi	r22, 0x10	; 16
     2bc:	77 e2       	ldi	r23, 0x27	; 39
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	08 95       	ret

000002c4 <_Z6Rotatelb>:
     2c4:	cf 92       	push	r12
     2c6:	df 92       	push	r13
     2c8:	ef 92       	push	r14
     2ca:	ff 92       	push	r15
     2cc:	cf 93       	push	r28
     2ce:	6b 01       	movw	r12, r22
     2d0:	7c 01       	movw	r14, r24
     2d2:	c4 2f       	mov	r28, r20
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	80 93 2c 01 	sts	0x012C, r24
     2da:	10 92 2d 01 	sts	0x012D, r1
     2de:	10 92 15 01 	sts	0x0115, r1
     2e2:	10 92 16 01 	sts	0x0116, r1
     2e6:	10 92 17 01 	sts	0x0117, r1
     2ea:	10 92 18 01 	sts	0x0118, r1
     2ee:	c7 01       	movw	r24, r14
     2f0:	b6 01       	movw	r22, r12
     2f2:	8c df       	rcall	.-232    	; 0x20c <_Z19calculateGyroOffsetl>
     2f4:	c6 1a       	sub	r12, r22
     2f6:	d7 0a       	sbc	r13, r23
     2f8:	e8 0a       	sbc	r14, r24
     2fa:	f9 0a       	sbc	r15, r25
     2fc:	c0 92 28 01 	sts	0x0128, r12
     300:	d0 92 29 01 	sts	0x0129, r13
     304:	e0 92 2a 01 	sts	0x012A, r14
     308:	f0 92 2b 01 	sts	0x012B, r15
     30c:	cc 23       	and	r28, r28
     30e:	21 f0       	breq	.+8      	; 0x318 <_Z6Rotatelb+0x54>
     310:	82 e0       	ldi	r24, 0x02	; 2
     312:	80 93 2f 01 	sts	0x012F, r24
     316:	03 c0       	rjmp	.+6      	; 0x31e <_Z6Rotatelb+0x5a>
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	80 93 2f 01 	sts	0x012F, r24
     31e:	10 92 b2 00 	sts	0x00B2, r1
     322:	e1 eb       	ldi	r30, 0xB1	; 177
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	87 60       	ori	r24, 0x07	; 7
     32a:	80 83       	st	Z, r24
     32c:	cf 91       	pop	r28
     32e:	ff 90       	pop	r15
     330:	ef 90       	pop	r14
     332:	df 90       	pop	r13
     334:	cf 90       	pop	r12
     336:	08 95       	ret

00000338 <_Z14UpdateRotationv>:
     338:	cf 92       	push	r12
     33a:	df 92       	push	r13
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	80 91 b2 00 	lds	r24, 0x00B2
     344:	8a 35       	cpi	r24, 0x5A	; 90
     346:	08 f4       	brcc	.+2      	; 0x34a <_Z14UpdateRotationv+0x12>
     348:	5c c0       	rjmp	.+184    	; 0x402 <_Z14UpdateRotationv+0xca>
     34a:	10 92 b2 00 	sts	0x00B2, r1
     34e:	80 91 30 01 	lds	r24, 0x0130
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	80 58       	subi	r24, 0x80	; 128
     356:	91 09       	sbc	r25, r1
     358:	bc 01       	movw	r22, r24
     35a:	22 f4       	brpl	.+8      	; 0x364 <_Z14UpdateRotationv+0x2c>
     35c:	66 27       	eor	r22, r22
     35e:	77 27       	eor	r23, r23
     360:	68 1b       	sub	r22, r24
     362:	79 0b       	sbc	r23, r25
     364:	07 2e       	mov	r0, r23
     366:	00 0c       	add	r0, r0
     368:	88 0b       	sbc	r24, r24
     36a:	99 0b       	sbc	r25, r25
     36c:	b1 d4       	rcall	.+2402   	; 0xcd0 <__floatsisf>
     36e:	9b 01       	movw	r18, r22
     370:	ac 01       	movw	r20, r24
     372:	af d3       	rcall	.+1886   	; 0xad2 <__addsf3>
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 ea       	ldi	r20, 0xA0	; 160
     37a:	50 e4       	ldi	r21, 0x40	; 64
     37c:	39 d5       	rcall	.+2674   	; 0xdf0 <__mulsf3>
     37e:	20 91 15 01 	lds	r18, 0x0115
     382:	30 91 16 01 	lds	r19, 0x0116
     386:	40 91 17 01 	lds	r20, 0x0117
     38a:	50 91 18 01 	lds	r21, 0x0118
     38e:	a1 d3       	rcall	.+1858   	; 0xad2 <__addsf3>
     390:	6b 01       	movw	r12, r22
     392:	7c 01       	movw	r14, r24
     394:	60 93 15 01 	sts	0x0115, r22
     398:	70 93 16 01 	sts	0x0116, r23
     39c:	80 93 17 01 	sts	0x0117, r24
     3a0:	90 93 18 01 	sts	0x0118, r25
     3a4:	60 91 28 01 	lds	r22, 0x0128
     3a8:	70 91 29 01 	lds	r23, 0x0129
     3ac:	80 91 2a 01 	lds	r24, 0x012A
     3b0:	90 91 2b 01 	lds	r25, 0x012B
     3b4:	8d d4       	rcall	.+2330   	; 0xcd0 <__floatsisf>
     3b6:	9b 01       	movw	r18, r22
     3b8:	ac 01       	movw	r20, r24
     3ba:	c7 01       	movw	r24, r14
     3bc:	b6 01       	movw	r22, r12
     3be:	14 d5       	rcall	.+2600   	; 0xde8 <__gesf2>
     3c0:	88 23       	and	r24, r24
     3c2:	0c f1       	brlt	.+66     	; 0x406 <_Z14UpdateRotationv+0xce>
     3c4:	80 91 20 01 	lds	r24, 0x0120
     3c8:	88 23       	and	r24, r24
     3ca:	49 f0       	breq	.+18     	; 0x3de <_Z14UpdateRotationv+0xa6>
     3cc:	41 e0       	ldi	r20, 0x01	; 1
     3ce:	60 e5       	ldi	r22, 0x50	; 80
     3d0:	73 ec       	ldi	r23, 0xC3	; 195
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	76 df       	rcall	.-276    	; 0x2c4 <_Z6Rotatelb>
     3d8:	10 92 20 01 	sts	0x0120, r1
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <_Z14UpdateRotationv+0xb2>
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	f8 de       	rcall	.-528    	; 0x1d4 <_Z10StopRotatei>
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	80 93 04 01 	sts	0x0104, r24
     3ea:	10 92 14 01 	sts	0x0114, r1
     3ee:	10 92 1b 01 	sts	0x011B, r1
     3f2:	10 92 1c 01 	sts	0x011C, r1
     3f6:	10 92 1d 01 	sts	0x011D, r1
     3fa:	10 92 1e 01 	sts	0x011E, r1
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	03 c0       	rjmp	.+6      	; 0x408 <_Z14UpdateRotationv+0xd0>
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	01 c0       	rjmp	.+2      	; 0x408 <_Z14UpdateRotationv+0xd0>
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	08 95       	ret

00000412 <_Z19StartBackwardsTimerv>:
	}
	return degreeOffset;
}

void StartBackwardsTimer() {
	backing = true;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 27 01 	sts	0x0127, r24
	BACKWARDS_TIMER_CTR = 0;
     418:	16 bc       	out	0x26, r1	; 38
	BACKWARDS_TIMER = (1<< CS02) | (1<< CS00);
     41a:	85 e0       	ldi	r24, 0x05	; 5
     41c:	85 bd       	out	0x25, r24	; 37
	backing_ctr = 0;
     41e:	10 92 24 01 	sts	0x0124, r1
     422:	10 92 23 01 	sts	0x0123, r1
     426:	08 95       	ret

00000428 <_Z18StopBackwardsTimerv>:
}

void StopBackwardsTimer() {
	
	BACKWARDS_TIMER &= ~(1 << CS12);
     428:	85 b5       	in	r24, 0x25	; 37
     42a:	8b 7f       	andi	r24, 0xFB	; 251
     42c:	85 bd       	out	0x25, r24	; 37
	BACKWARDS_TIMER &= ~(1 << CS10);
     42e:	85 b5       	in	r24, 0x25	; 37
     430:	8e 7f       	andi	r24, 0xFE	; 254
     432:	85 bd       	out	0x25, r24	; 37
	BACKWARDS_TIMER_CTR = 0;
     434:	16 bc       	out	0x26, r1	; 38
	backing_ctr = 0;
     436:	10 92 24 01 	sts	0x0124, r1
     43a:	10 92 23 01 	sts	0x0123, r1
     43e:	08 95       	ret

00000440 <_Z15StartLaserTimerv>:
}

void StartLaserTimer() {
	LASER_TIMER_COUNTER = 0;
     440:	10 92 85 00 	sts	0x0085, r1
     444:	10 92 84 00 	sts	0x0084, r1
	LASER_TIMER = (1<< CS12) | (1<< CS10);
     448:	85 e0       	ldi	r24, 0x05	; 5
     44a:	80 93 81 00 	sts	0x0081, r24
     44e:	08 95       	ret

00000450 <_Z5Shootv>:
	//SetPriority() // Måste skicka argument!
	nextOrder = TURN_INVISIBLE_AND_DEC_LIFE_LED;
	StartIRTimer();
}

void Shoot() {
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
	laserActive = true;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 20 01 	sts	0x0120, r24
	canShoot = false;
     462:	10 92 0d 01 	sts	0x010D, r1
 	rotating = true;
     466:	80 93 2c 01 	sts	0x012C, r24
	millidegreesTurned = 0;
     46a:	10 92 15 01 	sts	0x0115, r1
     46e:	10 92 16 01 	sts	0x0116, r1
     472:	10 92 17 01 	sts	0x0117, r1
     476:	10 92 18 01 	sts	0x0118, r1
 	targetRotation = (SHOOT_SWEEP_DEGREES / 2) - calculateGyroOffset(SHOOT_SWEEP_DEGREES / 2);
     47a:	68 ea       	ldi	r22, 0xA8	; 168
     47c:	71 e6       	ldi	r23, 0x61	; 97
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	c4 de       	rcall	.-632    	; 0x20c <_Z19calculateGyroOffsetl>
     484:	08 ea       	ldi	r16, 0xA8	; 168
     486:	11 e6       	ldi	r17, 0x61	; 97
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	68 01       	movw	r12, r16
     48e:	79 01       	movw	r14, r18
     490:	c6 1a       	sub	r12, r22
     492:	d7 0a       	sbc	r13, r23
     494:	e8 0a       	sbc	r14, r24
     496:	f9 0a       	sbc	r15, r25
     498:	c0 92 28 01 	sts	0x0128, r12
     49c:	d0 92 29 01 	sts	0x0129, r13
     4a0:	e0 92 2a 01 	sts	0x012A, r14
     4a4:	f0 92 2b 01 	sts	0x012B, r15
	
	//start timer
	TCCR2B |= (1 << CS20) | (1 << CS21) | (1 << CS22);
     4a8:	e1 eb       	ldi	r30, 0xB1	; 177
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	87 60       	ori	r24, 0x07	; 7
     4b0:	80 83       	st	Z, r24
	
	nextOrder = ACTIVATE_LASER_AND_TURN_RIGHT;
     4b2:	8b e0       	ldi	r24, 0x0B	; 11
     4b4:	80 93 2f 01 	sts	0x012F, r24
	StartLaserTimer();
     4b8:	c3 df       	rcall	.-122    	; 0x440 <_Z15StartLaserTimerv>
	
}
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	08 95       	ret

000004c8 <_Z14StopLaserTimerv>:
	LASER_TIMER_COUNTER = 0;
	LASER_TIMER = (1<< CS12) | (1<< CS10);
}

void StopLaserTimer() {
	LASER_TIMER &= ~(1 << CS12);
     4c8:	e1 e8       	ldi	r30, 0x81	; 129
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8b 7f       	andi	r24, 0xFB	; 251
     4d0:	80 83       	st	Z, r24
	LASER_TIMER &= ~(1 << CS10);
     4d2:	80 81       	ld	r24, Z
     4d4:	8e 7f       	andi	r24, 0xFE	; 254
     4d6:	80 83       	st	Z, r24
	LASER_TIMER_COUNTER = 0;
     4d8:	10 92 85 00 	sts	0x0085, r1
     4dc:	10 92 84 00 	sts	0x0084, r1
     4e0:	08 95       	ret

000004e2 <_Z12StartIRTimerv>:
}

void StartIRTimer() {
	IR_TIMER_COUNTER = 0;
     4e2:	10 92 95 00 	sts	0x0095, r1
     4e6:	10 92 94 00 	sts	0x0094, r1
	IRCTR = 0;
     4ea:	10 92 1a 01 	sts	0x011A, r1
     4ee:	10 92 19 01 	sts	0x0119, r1
	IR_TIMER = (1<< CS32) | (1<< CS30);
     4f2:	85 e0       	ldi	r24, 0x05	; 5
     4f4:	80 93 91 00 	sts	0x0091, r24
     4f8:	08 95       	ret

000004fa <_Z8WeAreHitv>:
	return value;
}
	

void WeAreHit() {
	health--;
     4fa:	80 91 0b 01 	lds	r24, 0x010B
     4fe:	90 91 0c 01 	lds	r25, 0x010C
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	90 93 0c 01 	sts	0x010C, r25
     508:	80 93 0b 01 	sts	0x010B, r24
	
	// We are dead
	if (health <= 0) {
     50c:	18 16       	cp	r1, r24
     50e:	19 06       	cpc	r1, r25
     510:	24 f0       	brlt	.+8      	; 0x51a <_Z8WeAreHitv+0x20>
		dead = true;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 2e 01 	sts	0x012E, r24
		return;
     518:	08 95       	ret
	}
	
	//SetPriority() // Måste skicka argument!
	nextOrder = TURN_INVISIBLE_AND_DEC_LIFE_LED;
     51a:	8a e0       	ldi	r24, 0x0A	; 10
     51c:	80 93 2f 01 	sts	0x012F, r24
	StartIRTimer();
     520:	e0 cf       	rjmp	.-64     	; 0x4e2 <_Z12StartIRTimerv>
     522:	08 95       	ret

00000524 <_Z11StopIRTimerv>:
	IRCTR = 0;
	IR_TIMER = (1<< CS32) | (1<< CS30);
}

void StopIRTimer() {
	IR_TIMER &= ~(1 << CS32);
     524:	e1 e9       	ldi	r30, 0x91	; 145
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 81       	ld	r24, Z
     52a:	8b 7f       	andi	r24, 0xFB	; 251
     52c:	80 83       	st	Z, r24
	IR_TIMER &= ~(1 << CS30);
     52e:	80 81       	ld	r24, Z
     530:	8e 7f       	andi	r24, 0xFE	; 254
     532:	80 83       	st	Z, r24
	IR_TIMER_COUNTER = 0;
     534:	10 92 95 00 	sts	0x0095, r1
     538:	10 92 94 00 	sts	0x0094, r1
	IRCTR = 0;
     53c:	10 92 1a 01 	sts	0x011A, r1
     540:	10 92 19 01 	sts	0x0119, r1
     544:	08 95       	ret

00000546 <_Z11positioningv>:
}


void positioning() {
	if (ultraSonicSensor1 <= maxDistance && enemySignatureCTR >= enemySignatureLimit) {
     546:	80 91 35 01 	lds	r24, 0x0135
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	20 91 05 01 	lds	r18, 0x0105
     550:	30 91 06 01 	lds	r19, 0x0106
     554:	28 17       	cp	r18, r24
     556:	39 07       	cpc	r19, r25
     558:	ec f0       	brlt	.+58     	; 0x594 <_Z11positioningv+0x4e>
     55a:	40 91 1b 01 	lds	r20, 0x011B
     55e:	50 91 1c 01 	lds	r21, 0x011C
     562:	60 91 1d 01 	lds	r22, 0x011D
     566:	70 91 1e 01 	lds	r23, 0x011E
     56a:	80 91 07 01 	lds	r24, 0x0107
     56e:	90 91 08 01 	lds	r25, 0x0108
     572:	a0 91 09 01 	lds	r26, 0x0109
     576:	b0 91 0a 01 	lds	r27, 0x010A
     57a:	48 17       	cp	r20, r24
     57c:	59 07       	cpc	r21, r25
     57e:	6a 07       	cpc	r22, r26
     580:	7b 07       	cpc	r23, r27
     582:	6c f4       	brge	.+26     	; 0x59e <_Z11positioningv+0x58>
     584:	07 c0       	rjmp	.+14     	; 0x594 <_Z11positioningv+0x4e>
		isPositioning = false;
		enemySignatureCTR = 0;
	}
	else {
		if (!rotating) {
			Rotate(360000, true);
     586:	41 e0       	ldi	r20, 0x01	; 1
     588:	60 e4       	ldi	r22, 0x40	; 64
     58a:	7e e7       	ldi	r23, 0x7E	; 126
     58c:	85 e0       	ldi	r24, 0x05	; 5
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	99 ce       	rjmp	.-718    	; 0x2c4 <_Z6Rotatelb>
     592:	08 95       	ret
		Shoot();
		isPositioning = false;
		enemySignatureCTR = 0;
	}
	else {
		if (!rotating) {
     594:	80 91 2c 01 	lds	r24, 0x012C
     598:	81 11       	cpse	r24, r1
     59a:	0c c0       	rjmp	.+24     	; 0x5b4 <_Z11positioningv+0x6e>
     59c:	f4 cf       	rjmp	.-24     	; 0x586 <_Z11positioningv+0x40>
}


void positioning() {
	if (ultraSonicSensor1 <= maxDistance && enemySignatureCTR >= enemySignatureLimit) {
		Shoot();
     59e:	58 df       	rcall	.-336    	; 0x450 <_Z5Shootv>
		isPositioning = false;
     5a0:	10 92 14 01 	sts	0x0114, r1
		enemySignatureCTR = 0;
     5a4:	10 92 1b 01 	sts	0x011B, r1
     5a8:	10 92 1c 01 	sts	0x011C, r1
     5ac:	10 92 1d 01 	sts	0x011D, r1
     5b0:	10 92 1e 01 	sts	0x011E, r1
     5b4:	08 95       	ret

000005b6 <_Z12checkForTapev>:
	}
}

bool checkForTape(){
	// If the Left line sensor detects tape and we haven't started rotating, turn right
	if((tapeSensor1 == 1) && !backing){
     5b6:	80 91 37 01 	lds	r24, 0x0137
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	59 f4       	brne	.+22     	; 0x5d4 <_Z12checkForTapev+0x1e>
     5be:	80 91 27 01 	lds	r24, 0x0127
     5c2:	81 11       	cpse	r24, r1
     5c4:	1f c0       	rjmp	.+62     	; 0x604 <_Z12checkForTapev+0x4e>
     5c6:	0c c0       	rjmp	.+24     	; 0x5e0 <_Z12checkForTapev+0x2a>
		return true;

	}
	
	// If the Right line sensor detects tape and we haven't started rotating, turn left
	if((tapeSensor2 == 1) && !backing){
     5c8:	80 91 27 01 	lds	r24, 0x0127
     5cc:	88 23       	and	r24, r24
     5ce:	89 f0       	breq	.+34     	; 0x5f2 <_Z12checkForTapev+0x3c>
		rightTapeHit = true;
		StartBackwardsTimer();
		nextOrder = MOVE_BACKWARDS;
		return true;
	}
	return false;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	08 95       	ret
		return true;

	}
	
	// If the Right line sensor detects tape and we haven't started rotating, turn left
	if((tapeSensor2 == 1) && !backing){
     5d4:	80 91 36 01 	lds	r24, 0x0136
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	b1 f3       	breq	.-20     	; 0x5c8 <_Z12checkForTapev+0x12>
		rightTapeHit = true;
		StartBackwardsTimer();
		nextOrder = MOVE_BACKWARDS;
		return true;
	}
	return false;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	08 95       	ret
}

bool checkForTape(){
	// If the Left line sensor detects tape and we haven't started rotating, turn right
	if((tapeSensor1 == 1) && !backing){
		leftTapeHit = true;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	80 93 26 01 	sts	0x0126, r24
		StartBackwardsTimer();
     5e6:	15 df       	rcall	.-470    	; 0x412 <_Z19StartBackwardsTimerv>
		nextOrder = MOVE_BACKWARDS;
     5e8:	8c e0       	ldi	r24, 0x0C	; 12
     5ea:	80 93 2f 01 	sts	0x012F, r24
		return true;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	08 95       	ret

	}
	
	// If the Right line sensor detects tape and we haven't started rotating, turn left
	if((tapeSensor2 == 1) && !backing){
		rightTapeHit = true;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	80 93 25 01 	sts	0x0125, r24
		StartBackwardsTimer();
     5f8:	0c df       	rcall	.-488    	; 0x412 <_Z19StartBackwardsTimerv>
		nextOrder = MOVE_BACKWARDS;
     5fa:	8c e0       	ldi	r24, 0x0C	; 12
     5fc:	80 93 2f 01 	sts	0x012F, r24
		return true;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	08 95       	ret
		return true;

	}
	
	// If the Right line sensor detects tape and we haven't started rotating, turn left
	if((tapeSensor2 == 1) && !backing){
     604:	80 91 36 01 	lds	r24, 0x0136
		rightTapeHit = true;
		StartBackwardsTimer();
		nextOrder = MOVE_BACKWARDS;
		return true;
	}
	return false;
     608:	80 e0       	ldi	r24, 0x00	; 0
}
     60a:	08 95       	ret

0000060c <_Z12checkBackingv>:

bool checkBacking(){
     60c:	cf 93       	push	r28
	if (backing) {
     60e:	c0 91 27 01 	lds	r28, 0x0127
     612:	cc 23       	and	r28, r28
     614:	09 f4       	brne	.+2      	; 0x618 <_Z12checkBackingv+0xc>
     616:	57 c0       	rjmp	.+174    	; 0x6c6 <_Z12checkBackingv+0xba>
		if(BACKWARDS_TIMER_CTR >= timeToReachOneHundredth){
     618:	86 b5       	in	r24, 0x26	; 38
     61a:	84 3b       	cpi	r24, 0xB4	; 180
     61c:	08 f4       	brcc	.+2      	; 0x620 <_Z12checkBackingv+0x14>
     61e:	50 c0       	rjmp	.+160    	; 0x6c0 <_Z12checkBackingv+0xb4>
			BACKWARDS_TIMER_CTR = 0;
     620:	16 bc       	out	0x26, r1	; 38
			backing_ctr++;
     622:	80 91 23 01 	lds	r24, 0x0123
     626:	90 91 24 01 	lds	r25, 0x0124
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	90 93 24 01 	sts	0x0124, r25
     630:	80 93 23 01 	sts	0x0123, r24
			
			if (backing_ctr >= 50) {
     634:	c2 97       	sbiw	r24, 0x32	; 50
     636:	0c f4       	brge	.+2      	; 0x63a <_Z12checkBackingv+0x2e>
     638:	45 c0       	rjmp	.+138    	; 0x6c4 <_Z12checkBackingv+0xb8>
				backing = false;
     63a:	10 92 27 01 	sts	0x0127, r1
				StopBackwardsTimer();
     63e:	f4 de       	rcall	.-536    	; 0x428 <_Z18StopBackwardsTimerv>
				
				if (leftTapeHit) {
     640:	c0 91 26 01 	lds	r28, 0x0126
     644:	cc 23       	and	r28, r28
     646:	e1 f0       	breq	.+56     	; 0x680 <_Z12checkBackingv+0x74>
					leftTapeHit = false;
     648:	10 92 26 01 	sts	0x0126, r1
					//Rotate(45000 + (-30000 + (rand()%60)*1000), false);
					Rotate(40000 + (rand()%100)*1000, false);
     64c:	c6 d4       	rcall	.+2444   	; 0xfda <rand>
     64e:	64 e6       	ldi	r22, 0x64	; 100
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	55 d4       	rcall	.+2218   	; 0xefe <__divmodhi4>
     654:	28 ee       	ldi	r18, 0xE8	; 232
     656:	33 e0       	ldi	r19, 0x03	; 3
     658:	82 9f       	mul	r24, r18
     65a:	b0 01       	movw	r22, r0
     65c:	83 9f       	mul	r24, r19
     65e:	70 0d       	add	r23, r0
     660:	92 9f       	mul	r25, r18
     662:	70 0d       	add	r23, r0
     664:	11 24       	eor	r1, r1
     666:	cb 01       	movw	r24, r22
     668:	77 0f       	add	r23, r23
     66a:	aa 0b       	sbc	r26, r26
     66c:	bb 0b       	sbc	r27, r27
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	60 5c       	subi	r22, 0xC0	; 192
     674:	73 46       	sbci	r23, 0x63	; 99
     676:	8f 4f       	sbci	r24, 0xFF	; 255
     678:	9f 4f       	sbci	r25, 0xFF	; 255
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	23 de       	rcall	.-954    	; 0x2c4 <_Z6Rotatelb>
					return true;
     67e:	23 c0       	rjmp	.+70     	; 0x6c6 <_Z12checkBackingv+0xba>
				}
				else if (rightTapeHit) {
     680:	c0 91 25 01 	lds	r28, 0x0125
     684:	cc 23       	and	r28, r28
     686:	f9 f0       	breq	.+62     	; 0x6c6 <_Z12checkBackingv+0xba>
					rightTapeHit = false;
     688:	10 92 25 01 	sts	0x0125, r1
					//Rotate(60000 + (-30000 + (rand()%60)*1000), true);
					Rotate(40000 + (rand()%100)*1000, true);
     68c:	a6 d4       	rcall	.+2380   	; 0xfda <rand>
     68e:	64 e6       	ldi	r22, 0x64	; 100
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	35 d4       	rcall	.+2154   	; 0xefe <__divmodhi4>
     694:	28 ee       	ldi	r18, 0xE8	; 232
     696:	33 e0       	ldi	r19, 0x03	; 3
     698:	82 9f       	mul	r24, r18
     69a:	b0 01       	movw	r22, r0
     69c:	83 9f       	mul	r24, r19
     69e:	70 0d       	add	r23, r0
     6a0:	92 9f       	mul	r25, r18
     6a2:	70 0d       	add	r23, r0
     6a4:	11 24       	eor	r1, r1
     6a6:	cb 01       	movw	r24, r22
     6a8:	77 0f       	add	r23, r23
     6aa:	aa 0b       	sbc	r26, r26
     6ac:	bb 0b       	sbc	r27, r27
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	60 5c       	subi	r22, 0xC0	; 192
     6b4:	73 46       	sbci	r23, 0x63	; 99
     6b6:	8f 4f       	sbci	r24, 0xFF	; 255
     6b8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	03 de       	rcall	.-1018   	; 0x2c4 <_Z6Rotatelb>
					return true;
     6be:	03 c0       	rjmp	.+6      	; 0x6c6 <_Z12checkBackingv+0xba>
				}
			}
		}
	}
	return false;
     6c0:	c0 e0       	ldi	r28, 0x00	; 0
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <_Z12checkBackingv+0xba>
     6c4:	c0 e0       	ldi	r28, 0x00	; 0
}
     6c6:	8c 2f       	mov	r24, r28
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <_Z11IRDebouncerv>:

void IRDebouncer(){
	// IR Signature debouncing
	if (activeIRsignature) {
     6cc:	80 91 33 01 	lds	r24, 0x0133
     6d0:	88 23       	and	r24, r24
     6d2:	a1 f1       	breq	.+104    	; 0x73c <_Z11IRDebouncerv+0x70>
		
		if (!(enemySignatureCTR >= enemySignatureLimit * 2)) {
     6d4:	40 91 1b 01 	lds	r20, 0x011B
     6d8:	50 91 1c 01 	lds	r21, 0x011C
     6dc:	60 91 1d 01 	lds	r22, 0x011D
     6e0:	70 91 1e 01 	lds	r23, 0x011E
     6e4:	80 91 07 01 	lds	r24, 0x0107
     6e8:	90 91 08 01 	lds	r25, 0x0108
     6ec:	a0 91 09 01 	lds	r26, 0x0109
     6f0:	b0 91 0a 01 	lds	r27, 0x010A
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	aa 1f       	adc	r26, r26
     6fa:	bb 1f       	adc	r27, r27
     6fc:	48 17       	cp	r20, r24
     6fe:	59 07       	cpc	r21, r25
     700:	6a 07       	cpc	r22, r26
     702:	7b 07       	cpc	r23, r27
     704:	0c f0       	brlt	.+2      	; 0x708 <_Z11IRDebouncerv+0x3c>
     706:	45 c0       	rjmp	.+138    	; 0x792 <_Z11IRDebouncerv+0xc6>
			//enemySignatureCTR++;
			enemySignatureCTR += (rotating ? 3 : 1);
     708:	80 91 2c 01 	lds	r24, 0x012C
     70c:	81 11       	cpse	r24, r1
     70e:	05 c0       	rjmp	.+10     	; 0x71a <_Z11IRDebouncerv+0x4e>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	a0 e0       	ldi	r26, 0x00	; 0
     716:	b0 e0       	ldi	r27, 0x00	; 0
     718:	04 c0       	rjmp	.+8      	; 0x722 <_Z11IRDebouncerv+0x56>
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	48 0f       	add	r20, r24
     724:	59 1f       	adc	r21, r25
     726:	6a 1f       	adc	r22, r26
     728:	7b 1f       	adc	r23, r27
     72a:	40 93 1b 01 	sts	0x011B, r20
     72e:	50 93 1c 01 	sts	0x011C, r21
     732:	60 93 1d 01 	sts	0x011D, r22
     736:	70 93 1e 01 	sts	0x011E, r23
     73a:	2b c0       	rjmp	.+86     	; 0x792 <_Z11IRDebouncerv+0xc6>
		}
	}
	
	else{
		//enemySignatureCTR -= 5;
		enemySignatureCTR -= (rotating ? 15 : 5);
     73c:	80 91 1b 01 	lds	r24, 0x011B
     740:	90 91 1c 01 	lds	r25, 0x011C
     744:	a0 91 1d 01 	lds	r26, 0x011D
     748:	b0 91 1e 01 	lds	r27, 0x011E
     74c:	20 91 2c 01 	lds	r18, 0x012C
     750:	21 11       	cpse	r18, r1
     752:	05 c0       	rjmp	.+10     	; 0x75e <_Z11IRDebouncerv+0x92>
     754:	45 e0       	ldi	r20, 0x05	; 5
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	04 c0       	rjmp	.+8      	; 0x766 <_Z11IRDebouncerv+0x9a>
     75e:	4f e0       	ldi	r20, 0x0F	; 15
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	84 1b       	sub	r24, r20
     768:	95 0b       	sbc	r25, r21
     76a:	a6 0b       	sbc	r26, r22
     76c:	b7 0b       	sbc	r27, r23
		
		if (enemySignatureCTR < 0){
     76e:	4a f0       	brmi	.+18     	; 0x782 <_Z11IRDebouncerv+0xb6>
		}
	}
	
	else{
		//enemySignatureCTR -= 5;
		enemySignatureCTR -= (rotating ? 15 : 5);
     770:	80 93 1b 01 	sts	0x011B, r24
     774:	90 93 1c 01 	sts	0x011C, r25
     778:	a0 93 1d 01 	sts	0x011D, r26
     77c:	b0 93 1e 01 	sts	0x011E, r27
     780:	08 c0       	rjmp	.+16     	; 0x792 <_Z11IRDebouncerv+0xc6>
		
		if (enemySignatureCTR < 0){
			enemySignatureCTR = 0;
     782:	10 92 1b 01 	sts	0x011B, r1
     786:	10 92 1c 01 	sts	0x011C, r1
     78a:	10 92 1d 01 	sts	0x011D, r1
     78e:	10 92 1e 01 	sts	0x011E, r1
		}
	}
	
	
	//test för att centrera framför fyr.
	if (enemySignatureCTR >= enemySignatureLimit && !isPositioning  && canShoot) {
     792:	40 91 1b 01 	lds	r20, 0x011B
     796:	50 91 1c 01 	lds	r21, 0x011C
     79a:	60 91 1d 01 	lds	r22, 0x011D
     79e:	70 91 1e 01 	lds	r23, 0x011E
     7a2:	80 91 07 01 	lds	r24, 0x0107
     7a6:	90 91 08 01 	lds	r25, 0x0108
     7aa:	a0 91 09 01 	lds	r26, 0x0109
     7ae:	b0 91 0a 01 	lds	r27, 0x010A
     7b2:	48 17       	cp	r20, r24
     7b4:	59 07       	cpc	r21, r25
     7b6:	6a 07       	cpc	r22, r26
     7b8:	7b 07       	cpc	r23, r27
     7ba:	5c f0       	brlt	.+22     	; 0x7d2 <_Z11IRDebouncerv+0x106>
     7bc:	80 91 14 01 	lds	r24, 0x0114
     7c0:	81 11       	cpse	r24, r1
     7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <_Z11IRDebouncerv+0x106>
     7c4:	80 91 0d 01 	lds	r24, 0x010D
     7c8:	88 23       	and	r24, r24
     7ca:	19 f0       	breq	.+6      	; 0x7d2 <_Z11IRDebouncerv+0x106>
		isPositioning = true;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	80 93 14 01 	sts	0x0114, r24
     7d2:	08 95       	ret

000007d4 <_Z16checkLaserSensorv>:
	}
}

bool checkLaserSensor(){
	if(laserSensor == 1 && !laserSensorHit){
     7d4:	80 91 31 01 	lds	r24, 0x0131
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	51 f4       	brne	.+20     	; 0x7f0 <_Z16checkLaserSensorv+0x1c>
     7dc:	80 91 1f 01 	lds	r24, 0x011F
     7e0:	81 11       	cpse	r24, r1
     7e2:	16 c0       	rjmp	.+44     	; 0x810 <_Z16checkLaserSensorv+0x3c>
     7e4:	0b c0       	rjmp	.+22     	; 0x7fc <_Z16checkLaserSensorv+0x28>
		laserSensorHit = true;
		WeAreHit();
		return true;
		
	}
	else if (laserSensor == 0 && laserSensorHit) {
     7e6:	80 91 1f 01 	lds	r24, 0x011F
     7ea:	81 11       	cpse	r24, r1
     7ec:	0d c0       	rjmp	.+26     	; 0x808 <_Z16checkLaserSensorv+0x34>
     7ee:	08 95       	ret
     7f0:	80 91 31 01 	lds	r24, 0x0131
     7f4:	88 23       	and	r24, r24
     7f6:	b9 f3       	breq	.-18     	; 0x7e6 <_Z16checkLaserSensorv+0x12>
		laserSensorHit = false;
	}
	return false;
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	08 95       	ret
	}
}

bool checkLaserSensor(){
	if(laserSensor == 1 && !laserSensorHit){
		laserSensorHit = true;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	80 93 1f 01 	sts	0x011F, r24
		WeAreHit();
     802:	7b de       	rcall	.-778    	; 0x4fa <_Z8WeAreHitv>
		return true;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	08 95       	ret
		
	}
	else if (laserSensor == 0 && laserSensorHit) {
		laserSensorHit = false;
     808:	10 92 1f 01 	sts	0x011F, r1
	}
	return false;
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	08 95       	ret
		laserSensorHit = true;
		WeAreHit();
		return true;
		
	}
	else if (laserSensor == 0 && laserSensorHit) {
     810:	80 91 31 01 	lds	r24, 0x0131
     814:	88 23       	and	r24, r24
     816:	c1 f3       	breq	.-16     	; 0x808 <_Z16checkLaserSensorv+0x34>
		laserSensorHit = false;
	}
	return false;
     818:	80 e0       	ldi	r24, 0x00	; 0
}
     81a:	08 95       	ret

0000081c <_Z18checkLaserCooldownv>:

bool checkLaserCooldown(){
	// LASER timer stuff
	if (LASER_TIMER_COUNTER >= ONE_SECOND) {
     81c:	80 91 84 00 	lds	r24, 0x0084
     820:	90 91 85 00 	lds	r25, 0x0085
     824:	80 35       	cpi	r24, 0x50	; 80
     826:	96 44       	sbci	r25, 0x46	; 70
     828:	38 f1       	brcs	.+78     	; 0x878 <_Z18checkLaserCooldownv+0x5c>
		coolDownCTR++;
     82a:	80 91 21 01 	lds	r24, 0x0121
     82e:	90 91 22 01 	lds	r25, 0x0122
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	90 93 22 01 	sts	0x0122, r25
     838:	80 93 21 01 	sts	0x0121, r24
		LASER_TIMER_COUNTER = 0;
     83c:	10 92 85 00 	sts	0x0085, r1
     840:	10 92 84 00 	sts	0x0084, r1
		
		// Lasers been active for 1 sec, turn it off
		if (coolDownCTR == 1) {
     844:	80 91 21 01 	lds	r24, 0x0121
     848:	90 91 22 01 	lds	r25, 0x0122
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	91 05       	cpc	r25, r1
     850:	39 f4       	brne	.+14     	; 0x860 <_Z18checkLaserCooldownv+0x44>
			nextOrder = DEACTIVATE_LASER;
     852:	85 e0       	ldi	r24, 0x05	; 5
     854:	80 93 2f 01 	sts	0x012F, r24
			laserActive = false;
     858:	10 92 20 01 	sts	0x0120, r1
			return true;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	08 95       	ret
		}
		// cooldown is over
		else if (coolDownCTR == 4) {
     860:	04 97       	sbiw	r24, 0x04	; 4
     862:	61 f4       	brne	.+24     	; 0x87c <_Z18checkLaserCooldownv+0x60>
			canShoot = true;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 0d 01 	sts	0x010D, r24
			StopLaserTimer();
     86a:	2e de       	rcall	.-932    	; 0x4c8 <_Z14StopLaserTimerv>
			coolDownCTR = 0;
     86c:	10 92 22 01 	sts	0x0122, r1
     870:	10 92 21 01 	sts	0x0121, r1
		}
	}
	return false;
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	08 95       	ret
     87c:	80 e0       	ldi	r24, 0x00	; 0
}
     87e:	08 95       	ret

00000880 <_Z19invisibilityHandlerv>:

bool invisibilityHandler(){
	//IR timer stuff
	if (IR_TIMER_COUNTER >= ONE_SECOND) {
     880:	80 91 94 00 	lds	r24, 0x0094
     884:	90 91 95 00 	lds	r25, 0x0095
     888:	80 35       	cpi	r24, 0x50	; 80
     88a:	96 44       	sbci	r25, 0x46	; 70
     88c:	a8 f0       	brcs	.+42     	; 0x8b8 <_Z19invisibilityHandlerv+0x38>
		IR_TIMER_COUNTER = 0;
     88e:	10 92 95 00 	sts	0x0095, r1
     892:	10 92 94 00 	sts	0x0094, r1
		IRCTR++;
     896:	80 91 19 01 	lds	r24, 0x0119
     89a:	90 91 1a 01 	lds	r25, 0x011A
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	90 93 1a 01 	sts	0x011A, r25
     8a4:	80 93 19 01 	sts	0x0119, r24
		if (IRCTR >= 5) {
     8a8:	05 97       	sbiw	r24, 0x05	; 5
     8aa:	44 f0       	brlt	.+16     	; 0x8bc <_Z19invisibilityHandlerv+0x3c>
			StopIRTimer();
     8ac:	3b de       	rcall	.-906    	; 0x524 <_Z11StopIRTimerv>
			nextOrder = TURN_ON_IR_SIG;
     8ae:	87 e0       	ldi	r24, 0x07	; 7
     8b0:	80 93 2f 01 	sts	0x012F, r24
			return true;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	08 95       	ret
		}
	}
	return false;
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	08 95       	ret
     8bc:	80 e0       	ldi	r24, 0x00	; 0
}
     8be:	08 95       	ret

000008c0 <_Z14collisionCheckv>:

bool collisionCheck(){
	if(ultraSonicSensor1 <= COLLISION_DISTANCE && !rotating){
     8c0:	80 91 35 01 	lds	r24, 0x0135
     8c4:	83 30       	cpi	r24, 0x03	; 3
     8c6:	30 f4       	brcc	.+12     	; 0x8d4 <_Z14collisionCheckv+0x14>
     8c8:	80 91 2c 01 	lds	r24, 0x012C
     8cc:	88 23       	and	r24, r24
     8ce:	21 f0       	breq	.+8      	; 0x8d8 <_Z14collisionCheckv+0x18>
		
		Rotate(80000, (rand()%2 ? true : false)); //Random direction later?
		return true;
	}
	return false;
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	08 95       	ret
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	08 95       	ret
}

bool collisionCheck(){
	if(ultraSonicSensor1 <= COLLISION_DISTANCE && !rotating){
		
		Rotate(80000, (rand()%2 ? true : false)); //Random direction later?
     8d8:	80 d3       	rcall	.+1792   	; 0xfda <rand>
     8da:	48 2f       	mov	r20, r24
     8dc:	41 70       	andi	r20, 0x01	; 1
     8de:	60 e8       	ldi	r22, 0x80	; 128
     8e0:	78 e3       	ldi	r23, 0x38	; 56
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	ee dc       	rcall	.-1572   	; 0x2c4 <_Z6Rotatelb>
		return true;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
     8ea:	08 95       	ret

000008ec <main>:
bool signatureConfirmed = false;



int main(void)
{
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
	DDRB = 0b11111011;
     8f4:	8b ef       	ldi	r24, 0xFB	; 251
     8f6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	87 b9       	out	0x07, r24	; 7
	
	//enable global interrupts
	sei();
     8fc:	78 94       	sei
	//################
	
	//initiate UART målsökning from sensor
	//set baud rate
	uint16_t UBRR_val = UBRR_SENSOR_MALSOKNING;
	UBRR0H = (unsigned char) (UBRR_val >> 8);
     8fe:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) UBRR_val;
     902:	87 e7       	ldi	r24, 0x77	; 119
     904:	80 93 c4 00 	sts	0x00C4, r24
	//enable receive + set frame 8 bits
	UCSR0B = (1<<RXEN0);
     908:	e1 ec       	ldi	r30, 0xC1	; 193
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 e1       	ldi	r24, 0x10	; 16
     90e:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
     910:	96 e0       	ldi	r25, 0x06	; 6
     912:	90 93 c2 00 	sts	0x00C2, r25

	//enable receive interrupt
	UCSR0B |= (1<<RXCIE0);
     916:	80 81       	ld	r24, Z
     918:	80 68       	ori	r24, 0x80	; 128
     91a:	80 83       	st	Z, r24
	
	//initiate UART målsökning to styr
	//set baud rate
	//115200
	uint16_t UBRR_val1 = UBRR_STYR_MALSOKNING;
	UBRR1H = (unsigned char) (UBRR_val1 >> 8);
     91c:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char) UBRR_val1;
     920:	89 e0       	ldi	r24, 0x09	; 9
     922:	80 93 cc 00 	sts	0x00CC, r24
	
	//enable transmit + set frame 8 bits
	UCSR1B = (1<<TXEN1);
     926:	88 e0       	ldi	r24, 0x08	; 8
     928:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ10) | (1<<UCSZ11);
     92c:	90 93 ca 00 	sts	0x00CA, r25
	
	//enable transmit interrupt was for testing blueetooth
	//UCSR1B |= (1<<TXCIE0);
	//#UART INITS END#//
	
	waitForActivation();
     930:	cb db       	rcall	.-2154   	; 0xc8 <_Z17waitForActivationv>
	
	//start first UART transmission just for testing bluetooth
	//UDR1 = 0x00;
	
	//###first order!###
	nextOrder = MOVE_FORWARD;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 2f 01 	sts	0x012F, r24
	//health = 1;
	//WeAreHit();
	
	
	
    while(!dead)
     938:	9a c0       	rjmp	.+308    	; 0xa6e <main+0x182>
    {
		//disable interrupts
		cli();
     93a:	f8 94       	cli
		
		//############################
		//## Snapshot sensor values ##
		//############################
		//Message 1
		IRSignature = (message1>>IRSIGNATURE_INDEX) & 0b00000111;
     93c:	20 91 38 01 	lds	r18, 0x0138
     940:	82 2f       	mov	r24, r18
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	ac 01       	movw	r20, r24
     946:	55 95       	asr	r21
     948:	47 95       	ror	r20
     94a:	55 95       	asr	r21
     94c:	47 95       	ror	r20
     94e:	55 95       	asr	r21
     950:	47 95       	ror	r20
     952:	47 70       	andi	r20, 0x07	; 7
     954:	40 93 32 01 	sts	0x0132, r20
		laserSensor = (message1>>LASER_INDEX) & 0b00000001;
     958:	08 2e       	mov	r0, r24
     95a:	89 2f       	mov	r24, r25
     95c:	00 0c       	add	r0, r0
     95e:	88 1f       	adc	r24, r24
     960:	99 0b       	sbc	r25, r25
     962:	00 0c       	add	r0, r0
     964:	88 1f       	adc	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	81 70       	andi	r24, 0x01	; 1
     96a:	80 93 31 01 	sts	0x0131, r24
		activeIRsignature = (message1>>IRSENSOR_INDEX) & 0b00000001;
     96e:	22 1f       	adc	r18, r18
     970:	22 27       	eor	r18, r18
     972:	22 1f       	adc	r18, r18
     974:	20 93 33 01 	sts	0x0133, r18
		
		//Message 2
		ultraSonicSensor1 = (message2>>ULTRASONICSENSOR1_INDEX) & 0b00011111;
     978:	80 91 13 01 	lds	r24, 0x0113
     97c:	86 95       	lsr	r24
     97e:	86 95       	lsr	r24
     980:	86 95       	lsr	r24
     982:	80 93 35 01 	sts	0x0135, r24
		
		//debugging
		if(ultraSonicSensor1 < 1){
     986:	80 91 35 01 	lds	r24, 0x0135
     98a:	81 11       	cpse	r24, r1
     98c:	02 c0       	rjmp	.+4      	; 0x992 <main+0xa6>
			PORTC |= (1 << PINC0);
     98e:	40 9a       	sbi	0x08, 0	; 8
     990:	01 c0       	rjmp	.+2      	; 0x994 <main+0xa8>
		}
		else{
			PORTC &= ~(1 << PINC0);
     992:	40 98       	cbi	0x08, 0	; 8
		}
		//Message 3
		ultraSonicSensor2 = (message3>>ULTRASONICSENSOR2_INDEX) & 0b00011111;
     994:	80 91 12 01 	lds	r24, 0x0112
     998:	86 95       	lsr	r24
     99a:	86 95       	lsr	r24
     99c:	86 95       	lsr	r24
     99e:	80 93 34 01 	sts	0x0134, r24
		
		//Message 4
		gyro = (message4>>LOWERBITSGYRO_INDEX) & 0b00011111; //Low 5 bits
     9a2:	80 91 11 01 	lds	r24, 0x0111
     9a6:	86 95       	lsr	r24
     9a8:	86 95       	lsr	r24
     9aa:	86 95       	lsr	r24
     9ac:	80 93 30 01 	sts	0x0130, r24
		
		//Message 5
		gyro |= (message5<<2) & 0b11100000; //High 3 bits
     9b0:	20 91 10 01 	lds	r18, 0x0110
     9b4:	82 2f       	mov	r24, r18
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	40 91 30 01 	lds	r20, 0x0130
     9bc:	bc 01       	movw	r22, r24
     9be:	66 0f       	add	r22, r22
     9c0:	77 1f       	adc	r23, r23
     9c2:	66 0f       	add	r22, r22
     9c4:	77 1f       	adc	r23, r23
     9c6:	36 2f       	mov	r19, r22
     9c8:	30 7e       	andi	r19, 0xE0	; 224
     9ca:	34 2b       	or	r19, r20
     9cc:	30 93 30 01 	sts	0x0130, r19
		tapeSensor1 = (message5>>TAPESENSOR1_INDEX) & 0b00000001;
     9d0:	08 2e       	mov	r0, r24
     9d2:	89 2f       	mov	r24, r25
     9d4:	00 0c       	add	r0, r0
     9d6:	88 1f       	adc	r24, r24
     9d8:	99 0b       	sbc	r25, r25
     9da:	00 0c       	add	r0, r0
     9dc:	88 1f       	adc	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	81 70       	andi	r24, 0x01	; 1
     9e2:	80 93 37 01 	sts	0x0137, r24
		tapeSensor2 = (message5>>TAPESENSOR2_INDEX) & 0b00000001;
     9e6:	22 1f       	adc	r18, r18
     9e8:	22 27       	eor	r18, r18
     9ea:	22 1f       	adc	r18, r18
     9ec:	20 93 36 01 	sts	0x0136, r18
		
		//enable interrupts
		sei();
     9f0:	78 94       	sei
		
		//#######################
		//## UART Transmission ##
		//#######################
		SendUART();
     9f2:	7a db       	rcall	.-2316   	; 0xe8 <_Z8SendUARTv>
		
		if((PINB>>PINB2) == 0){
     9f4:	83 b1       	in	r24, 0x03	; 3
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	95 95       	asr	r25
     9fa:	87 95       	ror	r24
     9fc:	95 95       	asr	r25
     9fe:	87 95       	ror	r24
     a00:	89 2b       	or	r24, r25
     a02:	01 f5       	brne	.+64     	; 0xa44 <main+0x158>
			// #############
			// ## Tävling ##
			// #############

			IRDebouncer();			
     a04:	63 de       	rcall	.-826    	; 0x6cc <_Z11IRDebouncerv>

			if(checkForTape() || checkBacking() || checkLaserSensor() || checkLaserCooldown() || invisibilityHandler() || collisionCheck()) continue;
     a06:	d7 dd       	rcall	.-1106   	; 0x5b6 <_Z12checkForTapev>
     a08:	81 11       	cpse	r24, r1
     a0a:	31 c0       	rjmp	.+98     	; 0xa6e <main+0x182>
     a0c:	ff dd       	rcall	.-1026   	; 0x60c <_Z12checkBackingv>
     a0e:	81 11       	cpse	r24, r1
     a10:	2e c0       	rjmp	.+92     	; 0xa6e <main+0x182>
     a12:	e0 de       	rcall	.-576    	; 0x7d4 <_Z16checkLaserSensorv>
     a14:	81 11       	cpse	r24, r1
     a16:	2b c0       	rjmp	.+86     	; 0xa6e <main+0x182>
     a18:	01 df       	rcall	.-510    	; 0x81c <_Z18checkLaserCooldownv>
     a1a:	81 11       	cpse	r24, r1
     a1c:	28 c0       	rjmp	.+80     	; 0xa6e <main+0x182>
     a1e:	30 df       	rcall	.-416    	; 0x880 <_Z19invisibilityHandlerv>
     a20:	81 11       	cpse	r24, r1
     a22:	25 c0       	rjmp	.+74     	; 0xa6e <main+0x182>
     a24:	4d df       	rcall	.-358    	; 0x8c0 <_Z14collisionCheckv>
     a26:	81 11       	cpse	r24, r1
     a28:	22 c0       	rjmp	.+68     	; 0xa6e <main+0x182>
			
			
			// If we are rotating
			if (rotating) {
     a2a:	80 91 2c 01 	lds	r24, 0x012C
     a2e:	88 23       	and	r24, r24
     a30:	19 f0       	breq	.+6      	; 0xa38 <main+0x14c>
				if (UpdateRotation()){
     a32:	82 dc       	rcall	.-1788   	; 0x338 <_Z14UpdateRotationv>
     a34:	81 11       	cpse	r24, r1
     a36:	1b c0       	rjmp	.+54     	; 0xa6e <main+0x182>
					continue;
				}
			}
			
			if (isPositioning) {
     a38:	80 91 14 01 	lds	r24, 0x0114
     a3c:	88 23       	and	r24, r24
     a3e:	b9 f0       	breq	.+46     	; 0xa6e <main+0x182>
				positioning();
     a40:	82 dd       	rcall	.-1276   	; 0x546 <_Z11positioningv>
				continue;
     a42:	15 c0       	rjmp	.+42     	; 0xa6e <main+0x182>
			//##############
			//## Testläge ##
			//##############
			

			IRDebouncer();
     a44:	43 de       	rcall	.-890    	; 0x6cc <_Z11IRDebouncerv>

			if(checkForTape() || checkBacking() || checkLaserCooldown()) continue;
     a46:	b7 dd       	rcall	.-1170   	; 0x5b6 <_Z12checkForTapev>
     a48:	81 11       	cpse	r24, r1
     a4a:	11 c0       	rjmp	.+34     	; 0xa6e <main+0x182>
     a4c:	df dd       	rcall	.-1090   	; 0x60c <_Z12checkBackingv>
     a4e:	81 11       	cpse	r24, r1
     a50:	0e c0       	rjmp	.+28     	; 0xa6e <main+0x182>
     a52:	e4 de       	rcall	.-568    	; 0x81c <_Z18checkLaserCooldownv>
     a54:	81 11       	cpse	r24, r1
     a56:	0b c0       	rjmp	.+22     	; 0xa6e <main+0x182>
			
			// If we are rotating
			if (rotating) {
     a58:	80 91 2c 01 	lds	r24, 0x012C
     a5c:	88 23       	and	r24, r24
     a5e:	19 f0       	breq	.+6      	; 0xa66 <main+0x17a>
				if (UpdateRotation()){
     a60:	6b dc       	rcall	.-1834   	; 0x338 <_Z14UpdateRotationv>
     a62:	81 11       	cpse	r24, r1
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <main+0x182>
					continue;
				}
			}
			
			if (isPositioning) {
     a66:	80 91 14 01 	lds	r24, 0x0114
     a6a:	81 11       	cpse	r24, r1
				positioning();
     a6c:	6c dd       	rcall	.-1320   	; 0x546 <_Z11positioningv>
	//health = 1;
	//WeAreHit();
	
	
	
    while(!dead)
     a6e:	80 91 2e 01 	lds	r24, 0x012E
     a72:	88 23       	and	r24, r24
     a74:	09 f4       	brne	.+2      	; 0xa78 <main+0x18c>
     a76:	61 cf       	rjmp	.-318    	; 0x93a <main+0x4e>
	//#############################
	//#### DEATH CODE #############
	//#############################
	
	// Reset the laser timers count variable and start the laser timer (used to get a blinking LEDs)
	StartLaserTimer();
     a78:	e3 dc       	rcall	.-1594   	; 0x440 <_Z15StartLaserTimerv>
	// This loop blinks the LEDs to show that we are dead
	while (dead) {
		SendUART();
		if (LASER_TIMER_COUNTER >= 2250) {
     a7a:	c4 e8       	ldi	r28, 0x84	; 132
     a7c:	d0 e0       	ldi	r29, 0x00	; 0
			LASER_TIMER_COUNTER = 0;
			coolDownCTR++;
			nextOrder = DECREMENT_LED_LIVES;
     a7e:	19 e0       	ldi	r17, 0x09	; 9
			if (coolDownCTR == 4) {
				nextOrder = RESET_SE;
     a80:	04 e1       	ldi	r16, 0x14	; 20
	//#############################
	
	// Reset the laser timers count variable and start the laser timer (used to get a blinking LEDs)
	StartLaserTimer();
	// This loop blinks the LEDs to show that we are dead
	while (dead) {
     a82:	1b c0       	rjmp	.+54     	; 0xaba <main+0x1ce>
		SendUART();
     a84:	31 db       	rcall	.-2462   	; 0xe8 <_Z8SendUARTv>
		if (LASER_TIMER_COUNTER >= 2250) {
     a86:	88 81       	ld	r24, Y
     a88:	99 81       	ldd	r25, Y+1	; 0x01
     a8a:	8a 3c       	cpi	r24, 0xCA	; 202
     a8c:	98 40       	sbci	r25, 0x08	; 8
     a8e:	a8 f0       	brcs	.+42     	; 0xaba <main+0x1ce>
			LASER_TIMER_COUNTER = 0;
     a90:	19 82       	std	Y+1, r1	; 0x01
     a92:	18 82       	st	Y, r1
			coolDownCTR++;
     a94:	80 91 21 01 	lds	r24, 0x0121
     a98:	90 91 22 01 	lds	r25, 0x0122
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	90 93 22 01 	sts	0x0122, r25
     aa2:	80 93 21 01 	sts	0x0121, r24
			nextOrder = DECREMENT_LED_LIVES;
     aa6:	10 93 2f 01 	sts	0x012F, r17
			if (coolDownCTR == 4) {
     aaa:	04 97       	sbiw	r24, 0x04	; 4
     aac:	31 f4       	brne	.+12     	; 0xaba <main+0x1ce>
				nextOrder = RESET_SE;
     aae:	00 93 2f 01 	sts	0x012F, r16
				coolDownCTR = 0;
     ab2:	10 92 22 01 	sts	0x0122, r1
     ab6:	10 92 21 01 	sts	0x0121, r1
	//#############################
	
	// Reset the laser timers count variable and start the laser timer (used to get a blinking LEDs)
	StartLaserTimer();
	// This loop blinks the LEDs to show that we are dead
	while (dead) {
     aba:	80 91 2e 01 	lds	r24, 0x012E
     abe:	81 11       	cpse	r24, r1
     ac0:	e1 cf       	rjmp	.-62     	; 0xa84 <main+0x198>
				coolDownCTR = 0;
			}
		}
	}
	
}
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	08 95       	ret

00000ad0 <__subsf3>:
     ad0:	50 58       	subi	r21, 0x80	; 128

00000ad2 <__addsf3>:
     ad2:	bb 27       	eor	r27, r27
     ad4:	aa 27       	eor	r26, r26
     ad6:	0e d0       	rcall	.+28     	; 0xaf4 <__addsf3x>
     ad8:	4d c1       	rjmp	.+666    	; 0xd74 <__fp_round>
     ada:	3e d1       	rcall	.+636    	; 0xd58 <__fp_pscA>
     adc:	30 f0       	brcs	.+12     	; 0xaea <__addsf3+0x18>
     ade:	43 d1       	rcall	.+646    	; 0xd66 <__fp_pscB>
     ae0:	20 f0       	brcs	.+8      	; 0xaea <__addsf3+0x18>
     ae2:	31 f4       	brne	.+12     	; 0xaf0 <__addsf3+0x1e>
     ae4:	9f 3f       	cpi	r25, 0xFF	; 255
     ae6:	11 f4       	brne	.+4      	; 0xaec <__addsf3+0x1a>
     ae8:	1e f4       	brtc	.+6      	; 0xaf0 <__addsf3+0x1e>
     aea:	33 c1       	rjmp	.+614    	; 0xd52 <__fp_nan>
     aec:	0e f4       	brtc	.+2      	; 0xaf0 <__addsf3+0x1e>
     aee:	e0 95       	com	r30
     af0:	e7 fb       	bst	r30, 7
     af2:	29 c1       	rjmp	.+594    	; 0xd46 <__fp_inf>

00000af4 <__addsf3x>:
     af4:	e9 2f       	mov	r30, r25
     af6:	4f d1       	rcall	.+670    	; 0xd96 <__fp_split3>
     af8:	80 f3       	brcs	.-32     	; 0xada <__addsf3+0x8>
     afa:	ba 17       	cp	r27, r26
     afc:	62 07       	cpc	r22, r18
     afe:	73 07       	cpc	r23, r19
     b00:	84 07       	cpc	r24, r20
     b02:	95 07       	cpc	r25, r21
     b04:	18 f0       	brcs	.+6      	; 0xb0c <__addsf3x+0x18>
     b06:	71 f4       	brne	.+28     	; 0xb24 <__addsf3x+0x30>
     b08:	9e f5       	brtc	.+102    	; 0xb70 <__addsf3x+0x7c>
     b0a:	67 c1       	rjmp	.+718    	; 0xdda <__fp_zero>
     b0c:	0e f4       	brtc	.+2      	; 0xb10 <__addsf3x+0x1c>
     b0e:	e0 95       	com	r30
     b10:	0b 2e       	mov	r0, r27
     b12:	ba 2f       	mov	r27, r26
     b14:	a0 2d       	mov	r26, r0
     b16:	0b 01       	movw	r0, r22
     b18:	b9 01       	movw	r22, r18
     b1a:	90 01       	movw	r18, r0
     b1c:	0c 01       	movw	r0, r24
     b1e:	ca 01       	movw	r24, r20
     b20:	a0 01       	movw	r20, r0
     b22:	11 24       	eor	r1, r1
     b24:	ff 27       	eor	r31, r31
     b26:	59 1b       	sub	r21, r25
     b28:	99 f0       	breq	.+38     	; 0xb50 <__addsf3x+0x5c>
     b2a:	59 3f       	cpi	r21, 0xF9	; 249
     b2c:	50 f4       	brcc	.+20     	; 0xb42 <__addsf3x+0x4e>
     b2e:	50 3e       	cpi	r21, 0xE0	; 224
     b30:	68 f1       	brcs	.+90     	; 0xb8c <__addsf3x+0x98>
     b32:	1a 16       	cp	r1, r26
     b34:	f0 40       	sbci	r31, 0x00	; 0
     b36:	a2 2f       	mov	r26, r18
     b38:	23 2f       	mov	r18, r19
     b3a:	34 2f       	mov	r19, r20
     b3c:	44 27       	eor	r20, r20
     b3e:	58 5f       	subi	r21, 0xF8	; 248
     b40:	f3 cf       	rjmp	.-26     	; 0xb28 <__addsf3x+0x34>
     b42:	46 95       	lsr	r20
     b44:	37 95       	ror	r19
     b46:	27 95       	ror	r18
     b48:	a7 95       	ror	r26
     b4a:	f0 40       	sbci	r31, 0x00	; 0
     b4c:	53 95       	inc	r21
     b4e:	c9 f7       	brne	.-14     	; 0xb42 <__addsf3x+0x4e>
     b50:	7e f4       	brtc	.+30     	; 0xb70 <__addsf3x+0x7c>
     b52:	1f 16       	cp	r1, r31
     b54:	ba 0b       	sbc	r27, r26
     b56:	62 0b       	sbc	r22, r18
     b58:	73 0b       	sbc	r23, r19
     b5a:	84 0b       	sbc	r24, r20
     b5c:	ba f0       	brmi	.+46     	; 0xb8c <__addsf3x+0x98>
     b5e:	91 50       	subi	r25, 0x01	; 1
     b60:	a1 f0       	breq	.+40     	; 0xb8a <__addsf3x+0x96>
     b62:	ff 0f       	add	r31, r31
     b64:	bb 1f       	adc	r27, r27
     b66:	66 1f       	adc	r22, r22
     b68:	77 1f       	adc	r23, r23
     b6a:	88 1f       	adc	r24, r24
     b6c:	c2 f7       	brpl	.-16     	; 0xb5e <__addsf3x+0x6a>
     b6e:	0e c0       	rjmp	.+28     	; 0xb8c <__addsf3x+0x98>
     b70:	ba 0f       	add	r27, r26
     b72:	62 1f       	adc	r22, r18
     b74:	73 1f       	adc	r23, r19
     b76:	84 1f       	adc	r24, r20
     b78:	48 f4       	brcc	.+18     	; 0xb8c <__addsf3x+0x98>
     b7a:	87 95       	ror	r24
     b7c:	77 95       	ror	r23
     b7e:	67 95       	ror	r22
     b80:	b7 95       	ror	r27
     b82:	f7 95       	ror	r31
     b84:	9e 3f       	cpi	r25, 0xFE	; 254
     b86:	08 f0       	brcs	.+2      	; 0xb8a <__addsf3x+0x96>
     b88:	b3 cf       	rjmp	.-154    	; 0xaf0 <__addsf3+0x1e>
     b8a:	93 95       	inc	r25
     b8c:	88 0f       	add	r24, r24
     b8e:	08 f0       	brcs	.+2      	; 0xb92 <__addsf3x+0x9e>
     b90:	99 27       	eor	r25, r25
     b92:	ee 0f       	add	r30, r30
     b94:	97 95       	ror	r25
     b96:	87 95       	ror	r24
     b98:	08 95       	ret

00000b9a <__divsf3>:
     b9a:	0c d0       	rcall	.+24     	; 0xbb4 <__divsf3x>
     b9c:	eb c0       	rjmp	.+470    	; 0xd74 <__fp_round>
     b9e:	e3 d0       	rcall	.+454    	; 0xd66 <__fp_pscB>
     ba0:	40 f0       	brcs	.+16     	; 0xbb2 <__divsf3+0x18>
     ba2:	da d0       	rcall	.+436    	; 0xd58 <__fp_pscA>
     ba4:	30 f0       	brcs	.+12     	; 0xbb2 <__divsf3+0x18>
     ba6:	21 f4       	brne	.+8      	; 0xbb0 <__divsf3+0x16>
     ba8:	5f 3f       	cpi	r21, 0xFF	; 255
     baa:	19 f0       	breq	.+6      	; 0xbb2 <__divsf3+0x18>
     bac:	cc c0       	rjmp	.+408    	; 0xd46 <__fp_inf>
     bae:	51 11       	cpse	r21, r1
     bb0:	15 c1       	rjmp	.+554    	; 0xddc <__fp_szero>
     bb2:	cf c0       	rjmp	.+414    	; 0xd52 <__fp_nan>

00000bb4 <__divsf3x>:
     bb4:	f0 d0       	rcall	.+480    	; 0xd96 <__fp_split3>
     bb6:	98 f3       	brcs	.-26     	; 0xb9e <__divsf3+0x4>

00000bb8 <__divsf3_pse>:
     bb8:	99 23       	and	r25, r25
     bba:	c9 f3       	breq	.-14     	; 0xbae <__divsf3+0x14>
     bbc:	55 23       	and	r21, r21
     bbe:	b1 f3       	breq	.-20     	; 0xbac <__divsf3+0x12>
     bc0:	95 1b       	sub	r25, r21
     bc2:	55 0b       	sbc	r21, r21
     bc4:	bb 27       	eor	r27, r27
     bc6:	aa 27       	eor	r26, r26
     bc8:	62 17       	cp	r22, r18
     bca:	73 07       	cpc	r23, r19
     bcc:	84 07       	cpc	r24, r20
     bce:	38 f0       	brcs	.+14     	; 0xbde <__divsf3_pse+0x26>
     bd0:	9f 5f       	subi	r25, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	22 0f       	add	r18, r18
     bd6:	33 1f       	adc	r19, r19
     bd8:	44 1f       	adc	r20, r20
     bda:	aa 1f       	adc	r26, r26
     bdc:	a9 f3       	breq	.-22     	; 0xbc8 <__divsf3_pse+0x10>
     bde:	33 d0       	rcall	.+102    	; 0xc46 <__divsf3_pse+0x8e>
     be0:	0e 2e       	mov	r0, r30
     be2:	3a f0       	brmi	.+14     	; 0xbf2 <__divsf3_pse+0x3a>
     be4:	e0 e8       	ldi	r30, 0x80	; 128
     be6:	30 d0       	rcall	.+96     	; 0xc48 <__divsf3_pse+0x90>
     be8:	91 50       	subi	r25, 0x01	; 1
     bea:	50 40       	sbci	r21, 0x00	; 0
     bec:	e6 95       	lsr	r30
     bee:	00 1c       	adc	r0, r0
     bf0:	ca f7       	brpl	.-14     	; 0xbe4 <__divsf3_pse+0x2c>
     bf2:	29 d0       	rcall	.+82     	; 0xc46 <__divsf3_pse+0x8e>
     bf4:	fe 2f       	mov	r31, r30
     bf6:	27 d0       	rcall	.+78     	; 0xc46 <__divsf3_pse+0x8e>
     bf8:	66 0f       	add	r22, r22
     bfa:	77 1f       	adc	r23, r23
     bfc:	88 1f       	adc	r24, r24
     bfe:	bb 1f       	adc	r27, r27
     c00:	26 17       	cp	r18, r22
     c02:	37 07       	cpc	r19, r23
     c04:	48 07       	cpc	r20, r24
     c06:	ab 07       	cpc	r26, r27
     c08:	b0 e8       	ldi	r27, 0x80	; 128
     c0a:	09 f0       	breq	.+2      	; 0xc0e <__divsf3_pse+0x56>
     c0c:	bb 0b       	sbc	r27, r27
     c0e:	80 2d       	mov	r24, r0
     c10:	bf 01       	movw	r22, r30
     c12:	ff 27       	eor	r31, r31
     c14:	93 58       	subi	r25, 0x83	; 131
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	2a f0       	brmi	.+10     	; 0xc24 <__divsf3_pse+0x6c>
     c1a:	9e 3f       	cpi	r25, 0xFE	; 254
     c1c:	51 05       	cpc	r21, r1
     c1e:	68 f0       	brcs	.+26     	; 0xc3a <__divsf3_pse+0x82>
     c20:	92 c0       	rjmp	.+292    	; 0xd46 <__fp_inf>
     c22:	dc c0       	rjmp	.+440    	; 0xddc <__fp_szero>
     c24:	5f 3f       	cpi	r21, 0xFF	; 255
     c26:	ec f3       	brlt	.-6      	; 0xc22 <__divsf3_pse+0x6a>
     c28:	98 3e       	cpi	r25, 0xE8	; 232
     c2a:	dc f3       	brlt	.-10     	; 0xc22 <__divsf3_pse+0x6a>
     c2c:	86 95       	lsr	r24
     c2e:	77 95       	ror	r23
     c30:	67 95       	ror	r22
     c32:	b7 95       	ror	r27
     c34:	f7 95       	ror	r31
     c36:	9f 5f       	subi	r25, 0xFF	; 255
     c38:	c9 f7       	brne	.-14     	; 0xc2c <__divsf3_pse+0x74>
     c3a:	88 0f       	add	r24, r24
     c3c:	91 1d       	adc	r25, r1
     c3e:	96 95       	lsr	r25
     c40:	87 95       	ror	r24
     c42:	97 f9       	bld	r25, 7
     c44:	08 95       	ret
     c46:	e1 e0       	ldi	r30, 0x01	; 1
     c48:	66 0f       	add	r22, r22
     c4a:	77 1f       	adc	r23, r23
     c4c:	88 1f       	adc	r24, r24
     c4e:	bb 1f       	adc	r27, r27
     c50:	62 17       	cp	r22, r18
     c52:	73 07       	cpc	r23, r19
     c54:	84 07       	cpc	r24, r20
     c56:	ba 07       	cpc	r27, r26
     c58:	20 f0       	brcs	.+8      	; 0xc62 <__divsf3_pse+0xaa>
     c5a:	62 1b       	sub	r22, r18
     c5c:	73 0b       	sbc	r23, r19
     c5e:	84 0b       	sbc	r24, r20
     c60:	ba 0b       	sbc	r27, r26
     c62:	ee 1f       	adc	r30, r30
     c64:	88 f7       	brcc	.-30     	; 0xc48 <__divsf3_pse+0x90>
     c66:	e0 95       	com	r30
     c68:	08 95       	ret

00000c6a <__fixsfsi>:
     c6a:	04 d0       	rcall	.+8      	; 0xc74 <__fixunssfsi>
     c6c:	68 94       	set
     c6e:	b1 11       	cpse	r27, r1
     c70:	b5 c0       	rjmp	.+362    	; 0xddc <__fp_szero>
     c72:	08 95       	ret

00000c74 <__fixunssfsi>:
     c74:	98 d0       	rcall	.+304    	; 0xda6 <__fp_splitA>
     c76:	88 f0       	brcs	.+34     	; 0xc9a <__fixunssfsi+0x26>
     c78:	9f 57       	subi	r25, 0x7F	; 127
     c7a:	90 f0       	brcs	.+36     	; 0xca0 <__fixunssfsi+0x2c>
     c7c:	b9 2f       	mov	r27, r25
     c7e:	99 27       	eor	r25, r25
     c80:	b7 51       	subi	r27, 0x17	; 23
     c82:	a0 f0       	brcs	.+40     	; 0xcac <__fixunssfsi+0x38>
     c84:	d1 f0       	breq	.+52     	; 0xcba <__fixunssfsi+0x46>
     c86:	66 0f       	add	r22, r22
     c88:	77 1f       	adc	r23, r23
     c8a:	88 1f       	adc	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	1a f0       	brmi	.+6      	; 0xc96 <__fixunssfsi+0x22>
     c90:	ba 95       	dec	r27
     c92:	c9 f7       	brne	.-14     	; 0xc86 <__fixunssfsi+0x12>
     c94:	12 c0       	rjmp	.+36     	; 0xcba <__fixunssfsi+0x46>
     c96:	b1 30       	cpi	r27, 0x01	; 1
     c98:	81 f0       	breq	.+32     	; 0xcba <__fixunssfsi+0x46>
     c9a:	9f d0       	rcall	.+318    	; 0xdda <__fp_zero>
     c9c:	b1 e0       	ldi	r27, 0x01	; 1
     c9e:	08 95       	ret
     ca0:	9c c0       	rjmp	.+312    	; 0xdda <__fp_zero>
     ca2:	67 2f       	mov	r22, r23
     ca4:	78 2f       	mov	r23, r24
     ca6:	88 27       	eor	r24, r24
     ca8:	b8 5f       	subi	r27, 0xF8	; 248
     caa:	39 f0       	breq	.+14     	; 0xcba <__fixunssfsi+0x46>
     cac:	b9 3f       	cpi	r27, 0xF9	; 249
     cae:	cc f3       	brlt	.-14     	; 0xca2 <__fixunssfsi+0x2e>
     cb0:	86 95       	lsr	r24
     cb2:	77 95       	ror	r23
     cb4:	67 95       	ror	r22
     cb6:	b3 95       	inc	r27
     cb8:	d9 f7       	brne	.-10     	; 0xcb0 <__fixunssfsi+0x3c>
     cba:	3e f4       	brtc	.+14     	; 0xcca <__fixunssfsi+0x56>
     cbc:	90 95       	com	r25
     cbe:	80 95       	com	r24
     cc0:	70 95       	com	r23
     cc2:	61 95       	neg	r22
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	08 95       	ret

00000ccc <__floatunsisf>:
     ccc:	e8 94       	clt
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <__floatsisf+0x12>

00000cd0 <__floatsisf>:
     cd0:	97 fb       	bst	r25, 7
     cd2:	3e f4       	brtc	.+14     	; 0xce2 <__floatsisf+0x12>
     cd4:	90 95       	com	r25
     cd6:	80 95       	com	r24
     cd8:	70 95       	com	r23
     cda:	61 95       	neg	r22
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	8f 4f       	sbci	r24, 0xFF	; 255
     ce0:	9f 4f       	sbci	r25, 0xFF	; 255
     ce2:	99 23       	and	r25, r25
     ce4:	a9 f0       	breq	.+42     	; 0xd10 <__floatsisf+0x40>
     ce6:	f9 2f       	mov	r31, r25
     ce8:	96 e9       	ldi	r25, 0x96	; 150
     cea:	bb 27       	eor	r27, r27
     cec:	93 95       	inc	r25
     cee:	f6 95       	lsr	r31
     cf0:	87 95       	ror	r24
     cf2:	77 95       	ror	r23
     cf4:	67 95       	ror	r22
     cf6:	b7 95       	ror	r27
     cf8:	f1 11       	cpse	r31, r1
     cfa:	f8 cf       	rjmp	.-16     	; 0xcec <__floatsisf+0x1c>
     cfc:	fa f4       	brpl	.+62     	; 0xd3c <__floatsisf+0x6c>
     cfe:	bb 0f       	add	r27, r27
     d00:	11 f4       	brne	.+4      	; 0xd06 <__floatsisf+0x36>
     d02:	60 ff       	sbrs	r22, 0
     d04:	1b c0       	rjmp	.+54     	; 0xd3c <__floatsisf+0x6c>
     d06:	6f 5f       	subi	r22, 0xFF	; 255
     d08:	7f 4f       	sbci	r23, 0xFF	; 255
     d0a:	8f 4f       	sbci	r24, 0xFF	; 255
     d0c:	9f 4f       	sbci	r25, 0xFF	; 255
     d0e:	16 c0       	rjmp	.+44     	; 0xd3c <__floatsisf+0x6c>
     d10:	88 23       	and	r24, r24
     d12:	11 f0       	breq	.+4      	; 0xd18 <__floatsisf+0x48>
     d14:	96 e9       	ldi	r25, 0x96	; 150
     d16:	11 c0       	rjmp	.+34     	; 0xd3a <__floatsisf+0x6a>
     d18:	77 23       	and	r23, r23
     d1a:	21 f0       	breq	.+8      	; 0xd24 <__floatsisf+0x54>
     d1c:	9e e8       	ldi	r25, 0x8E	; 142
     d1e:	87 2f       	mov	r24, r23
     d20:	76 2f       	mov	r23, r22
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <__floatsisf+0x5e>
     d24:	66 23       	and	r22, r22
     d26:	71 f0       	breq	.+28     	; 0xd44 <__floatsisf+0x74>
     d28:	96 e8       	ldi	r25, 0x86	; 134
     d2a:	86 2f       	mov	r24, r22
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	2a f0       	brmi	.+10     	; 0xd3c <__floatsisf+0x6c>
     d32:	9a 95       	dec	r25
     d34:	66 0f       	add	r22, r22
     d36:	77 1f       	adc	r23, r23
     d38:	88 1f       	adc	r24, r24
     d3a:	da f7       	brpl	.-10     	; 0xd32 <__floatsisf+0x62>
     d3c:	88 0f       	add	r24, r24
     d3e:	96 95       	lsr	r25
     d40:	87 95       	ror	r24
     d42:	97 f9       	bld	r25, 7
     d44:	08 95       	ret

00000d46 <__fp_inf>:
     d46:	97 f9       	bld	r25, 7
     d48:	9f 67       	ori	r25, 0x7F	; 127
     d4a:	80 e8       	ldi	r24, 0x80	; 128
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	08 95       	ret

00000d52 <__fp_nan>:
     d52:	9f ef       	ldi	r25, 0xFF	; 255
     d54:	80 ec       	ldi	r24, 0xC0	; 192
     d56:	08 95       	ret

00000d58 <__fp_pscA>:
     d58:	00 24       	eor	r0, r0
     d5a:	0a 94       	dec	r0
     d5c:	16 16       	cp	r1, r22
     d5e:	17 06       	cpc	r1, r23
     d60:	18 06       	cpc	r1, r24
     d62:	09 06       	cpc	r0, r25
     d64:	08 95       	ret

00000d66 <__fp_pscB>:
     d66:	00 24       	eor	r0, r0
     d68:	0a 94       	dec	r0
     d6a:	12 16       	cp	r1, r18
     d6c:	13 06       	cpc	r1, r19
     d6e:	14 06       	cpc	r1, r20
     d70:	05 06       	cpc	r0, r21
     d72:	08 95       	ret

00000d74 <__fp_round>:
     d74:	09 2e       	mov	r0, r25
     d76:	03 94       	inc	r0
     d78:	00 0c       	add	r0, r0
     d7a:	11 f4       	brne	.+4      	; 0xd80 <__fp_round+0xc>
     d7c:	88 23       	and	r24, r24
     d7e:	52 f0       	brmi	.+20     	; 0xd94 <__fp_round+0x20>
     d80:	bb 0f       	add	r27, r27
     d82:	40 f4       	brcc	.+16     	; 0xd94 <__fp_round+0x20>
     d84:	bf 2b       	or	r27, r31
     d86:	11 f4       	brne	.+4      	; 0xd8c <__fp_round+0x18>
     d88:	60 ff       	sbrs	r22, 0
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <__fp_round+0x20>
     d8c:	6f 5f       	subi	r22, 0xFF	; 255
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	8f 4f       	sbci	r24, 0xFF	; 255
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	08 95       	ret

00000d96 <__fp_split3>:
     d96:	57 fd       	sbrc	r21, 7
     d98:	90 58       	subi	r25, 0x80	; 128
     d9a:	44 0f       	add	r20, r20
     d9c:	55 1f       	adc	r21, r21
     d9e:	59 f0       	breq	.+22     	; 0xdb6 <__fp_splitA+0x10>
     da0:	5f 3f       	cpi	r21, 0xFF	; 255
     da2:	71 f0       	breq	.+28     	; 0xdc0 <__fp_splitA+0x1a>
     da4:	47 95       	ror	r20

00000da6 <__fp_splitA>:
     da6:	88 0f       	add	r24, r24
     da8:	97 fb       	bst	r25, 7
     daa:	99 1f       	adc	r25, r25
     dac:	61 f0       	breq	.+24     	; 0xdc6 <__fp_splitA+0x20>
     dae:	9f 3f       	cpi	r25, 0xFF	; 255
     db0:	79 f0       	breq	.+30     	; 0xdd0 <__fp_splitA+0x2a>
     db2:	87 95       	ror	r24
     db4:	08 95       	ret
     db6:	12 16       	cp	r1, r18
     db8:	13 06       	cpc	r1, r19
     dba:	14 06       	cpc	r1, r20
     dbc:	55 1f       	adc	r21, r21
     dbe:	f2 cf       	rjmp	.-28     	; 0xda4 <__fp_split3+0xe>
     dc0:	46 95       	lsr	r20
     dc2:	f1 df       	rcall	.-30     	; 0xda6 <__fp_splitA>
     dc4:	08 c0       	rjmp	.+16     	; 0xdd6 <__fp_splitA+0x30>
     dc6:	16 16       	cp	r1, r22
     dc8:	17 06       	cpc	r1, r23
     dca:	18 06       	cpc	r1, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	f1 cf       	rjmp	.-30     	; 0xdb2 <__fp_splitA+0xc>
     dd0:	86 95       	lsr	r24
     dd2:	71 05       	cpc	r23, r1
     dd4:	61 05       	cpc	r22, r1
     dd6:	08 94       	sec
     dd8:	08 95       	ret

00000dda <__fp_zero>:
     dda:	e8 94       	clt

00000ddc <__fp_szero>:
     ddc:	bb 27       	eor	r27, r27
     dde:	66 27       	eor	r22, r22
     de0:	77 27       	eor	r23, r23
     de2:	cb 01       	movw	r24, r22
     de4:	97 f9       	bld	r25, 7
     de6:	08 95       	ret

00000de8 <__gesf2>:
     de8:	66 d0       	rcall	.+204    	; 0xeb6 <__fp_cmp>
     dea:	08 f4       	brcc	.+2      	; 0xdee <__gesf2+0x6>
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	08 95       	ret

00000df0 <__mulsf3>:
     df0:	0b d0       	rcall	.+22     	; 0xe08 <__mulsf3x>
     df2:	c0 cf       	rjmp	.-128    	; 0xd74 <__fp_round>
     df4:	b1 df       	rcall	.-158    	; 0xd58 <__fp_pscA>
     df6:	28 f0       	brcs	.+10     	; 0xe02 <__mulsf3+0x12>
     df8:	b6 df       	rcall	.-148    	; 0xd66 <__fp_pscB>
     dfa:	18 f0       	brcs	.+6      	; 0xe02 <__mulsf3+0x12>
     dfc:	95 23       	and	r25, r21
     dfe:	09 f0       	breq	.+2      	; 0xe02 <__mulsf3+0x12>
     e00:	a2 cf       	rjmp	.-188    	; 0xd46 <__fp_inf>
     e02:	a7 cf       	rjmp	.-178    	; 0xd52 <__fp_nan>
     e04:	11 24       	eor	r1, r1
     e06:	ea cf       	rjmp	.-44     	; 0xddc <__fp_szero>

00000e08 <__mulsf3x>:
     e08:	c6 df       	rcall	.-116    	; 0xd96 <__fp_split3>
     e0a:	a0 f3       	brcs	.-24     	; 0xdf4 <__mulsf3+0x4>

00000e0c <__mulsf3_pse>:
     e0c:	95 9f       	mul	r25, r21
     e0e:	d1 f3       	breq	.-12     	; 0xe04 <__mulsf3+0x14>
     e10:	95 0f       	add	r25, r21
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	55 1f       	adc	r21, r21
     e16:	62 9f       	mul	r22, r18
     e18:	f0 01       	movw	r30, r0
     e1a:	72 9f       	mul	r23, r18
     e1c:	bb 27       	eor	r27, r27
     e1e:	f0 0d       	add	r31, r0
     e20:	b1 1d       	adc	r27, r1
     e22:	63 9f       	mul	r22, r19
     e24:	aa 27       	eor	r26, r26
     e26:	f0 0d       	add	r31, r0
     e28:	b1 1d       	adc	r27, r1
     e2a:	aa 1f       	adc	r26, r26
     e2c:	64 9f       	mul	r22, r20
     e2e:	66 27       	eor	r22, r22
     e30:	b0 0d       	add	r27, r0
     e32:	a1 1d       	adc	r26, r1
     e34:	66 1f       	adc	r22, r22
     e36:	82 9f       	mul	r24, r18
     e38:	22 27       	eor	r18, r18
     e3a:	b0 0d       	add	r27, r0
     e3c:	a1 1d       	adc	r26, r1
     e3e:	62 1f       	adc	r22, r18
     e40:	73 9f       	mul	r23, r19
     e42:	b0 0d       	add	r27, r0
     e44:	a1 1d       	adc	r26, r1
     e46:	62 1f       	adc	r22, r18
     e48:	83 9f       	mul	r24, r19
     e4a:	a0 0d       	add	r26, r0
     e4c:	61 1d       	adc	r22, r1
     e4e:	22 1f       	adc	r18, r18
     e50:	74 9f       	mul	r23, r20
     e52:	33 27       	eor	r19, r19
     e54:	a0 0d       	add	r26, r0
     e56:	61 1d       	adc	r22, r1
     e58:	23 1f       	adc	r18, r19
     e5a:	84 9f       	mul	r24, r20
     e5c:	60 0d       	add	r22, r0
     e5e:	21 1d       	adc	r18, r1
     e60:	82 2f       	mov	r24, r18
     e62:	76 2f       	mov	r23, r22
     e64:	6a 2f       	mov	r22, r26
     e66:	11 24       	eor	r1, r1
     e68:	9f 57       	subi	r25, 0x7F	; 127
     e6a:	50 40       	sbci	r21, 0x00	; 0
     e6c:	8a f0       	brmi	.+34     	; 0xe90 <__mulsf3_pse+0x84>
     e6e:	e1 f0       	breq	.+56     	; 0xea8 <__mulsf3_pse+0x9c>
     e70:	88 23       	and	r24, r24
     e72:	4a f0       	brmi	.+18     	; 0xe86 <__mulsf3_pse+0x7a>
     e74:	ee 0f       	add	r30, r30
     e76:	ff 1f       	adc	r31, r31
     e78:	bb 1f       	adc	r27, r27
     e7a:	66 1f       	adc	r22, r22
     e7c:	77 1f       	adc	r23, r23
     e7e:	88 1f       	adc	r24, r24
     e80:	91 50       	subi	r25, 0x01	; 1
     e82:	50 40       	sbci	r21, 0x00	; 0
     e84:	a9 f7       	brne	.-22     	; 0xe70 <__mulsf3_pse+0x64>
     e86:	9e 3f       	cpi	r25, 0xFE	; 254
     e88:	51 05       	cpc	r21, r1
     e8a:	70 f0       	brcs	.+28     	; 0xea8 <__mulsf3_pse+0x9c>
     e8c:	5c cf       	rjmp	.-328    	; 0xd46 <__fp_inf>
     e8e:	a6 cf       	rjmp	.-180    	; 0xddc <__fp_szero>
     e90:	5f 3f       	cpi	r21, 0xFF	; 255
     e92:	ec f3       	brlt	.-6      	; 0xe8e <__mulsf3_pse+0x82>
     e94:	98 3e       	cpi	r25, 0xE8	; 232
     e96:	dc f3       	brlt	.-10     	; 0xe8e <__mulsf3_pse+0x82>
     e98:	86 95       	lsr	r24
     e9a:	77 95       	ror	r23
     e9c:	67 95       	ror	r22
     e9e:	b7 95       	ror	r27
     ea0:	f7 95       	ror	r31
     ea2:	e7 95       	ror	r30
     ea4:	9f 5f       	subi	r25, 0xFF	; 255
     ea6:	c1 f7       	brne	.-16     	; 0xe98 <__mulsf3_pse+0x8c>
     ea8:	fe 2b       	or	r31, r30
     eaa:	88 0f       	add	r24, r24
     eac:	91 1d       	adc	r25, r1
     eae:	96 95       	lsr	r25
     eb0:	87 95       	ror	r24
     eb2:	97 f9       	bld	r25, 7
     eb4:	08 95       	ret

00000eb6 <__fp_cmp>:
     eb6:	99 0f       	add	r25, r25
     eb8:	00 08       	sbc	r0, r0
     eba:	55 0f       	add	r21, r21
     ebc:	aa 0b       	sbc	r26, r26
     ebe:	e0 e8       	ldi	r30, 0x80	; 128
     ec0:	fe ef       	ldi	r31, 0xFE	; 254
     ec2:	16 16       	cp	r1, r22
     ec4:	17 06       	cpc	r1, r23
     ec6:	e8 07       	cpc	r30, r24
     ec8:	f9 07       	cpc	r31, r25
     eca:	c0 f0       	brcs	.+48     	; 0xefc <__fp_cmp+0x46>
     ecc:	12 16       	cp	r1, r18
     ece:	13 06       	cpc	r1, r19
     ed0:	e4 07       	cpc	r30, r20
     ed2:	f5 07       	cpc	r31, r21
     ed4:	98 f0       	brcs	.+38     	; 0xefc <__fp_cmp+0x46>
     ed6:	62 1b       	sub	r22, r18
     ed8:	73 0b       	sbc	r23, r19
     eda:	84 0b       	sbc	r24, r20
     edc:	95 0b       	sbc	r25, r21
     ede:	39 f4       	brne	.+14     	; 0xeee <__fp_cmp+0x38>
     ee0:	0a 26       	eor	r0, r26
     ee2:	61 f0       	breq	.+24     	; 0xefc <__fp_cmp+0x46>
     ee4:	23 2b       	or	r18, r19
     ee6:	24 2b       	or	r18, r20
     ee8:	25 2b       	or	r18, r21
     eea:	21 f4       	brne	.+8      	; 0xef4 <__fp_cmp+0x3e>
     eec:	08 95       	ret
     eee:	0a 26       	eor	r0, r26
     ef0:	09 f4       	brne	.+2      	; 0xef4 <__fp_cmp+0x3e>
     ef2:	a1 40       	sbci	r26, 0x01	; 1
     ef4:	a6 95       	lsr	r26
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	81 1d       	adc	r24, r1
     efa:	81 1d       	adc	r24, r1
     efc:	08 95       	ret

00000efe <__divmodhi4>:
     efe:	97 fb       	bst	r25, 7
     f00:	07 2e       	mov	r0, r23
     f02:	16 f4       	brtc	.+4      	; 0xf08 <__divmodhi4+0xa>
     f04:	00 94       	com	r0
     f06:	06 d0       	rcall	.+12     	; 0xf14 <__divmodhi4_neg1>
     f08:	77 fd       	sbrc	r23, 7
     f0a:	08 d0       	rcall	.+16     	; 0xf1c <__divmodhi4_neg2>
     f0c:	0b d0       	rcall	.+22     	; 0xf24 <__udivmodhi4>
     f0e:	07 fc       	sbrc	r0, 7
     f10:	05 d0       	rcall	.+10     	; 0xf1c <__divmodhi4_neg2>
     f12:	3e f4       	brtc	.+14     	; 0xf22 <__divmodhi4_exit>

00000f14 <__divmodhi4_neg1>:
     f14:	90 95       	com	r25
     f16:	81 95       	neg	r24
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	08 95       	ret

00000f1c <__divmodhi4_neg2>:
     f1c:	70 95       	com	r23
     f1e:	61 95       	neg	r22
     f20:	7f 4f       	sbci	r23, 0xFF	; 255

00000f22 <__divmodhi4_exit>:
     f22:	08 95       	ret

00000f24 <__udivmodhi4>:
     f24:	aa 1b       	sub	r26, r26
     f26:	bb 1b       	sub	r27, r27
     f28:	51 e1       	ldi	r21, 0x11	; 17
     f2a:	07 c0       	rjmp	.+14     	; 0xf3a <__udivmodhi4_ep>

00000f2c <__udivmodhi4_loop>:
     f2c:	aa 1f       	adc	r26, r26
     f2e:	bb 1f       	adc	r27, r27
     f30:	a6 17       	cp	r26, r22
     f32:	b7 07       	cpc	r27, r23
     f34:	10 f0       	brcs	.+4      	; 0xf3a <__udivmodhi4_ep>
     f36:	a6 1b       	sub	r26, r22
     f38:	b7 0b       	sbc	r27, r23

00000f3a <__udivmodhi4_ep>:
     f3a:	88 1f       	adc	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	5a 95       	dec	r21
     f40:	a9 f7       	brne	.-22     	; 0xf2c <__udivmodhi4_loop>
     f42:	80 95       	com	r24
     f44:	90 95       	com	r25
     f46:	bc 01       	movw	r22, r24
     f48:	cd 01       	movw	r24, r26
     f4a:	08 95       	ret

00000f4c <do_rand>:
     f4c:	8f 92       	push	r8
     f4e:	9f 92       	push	r9
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	ec 01       	movw	r28, r24
     f62:	68 81       	ld	r22, Y
     f64:	79 81       	ldd	r23, Y+1	; 0x01
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	9b 81       	ldd	r25, Y+3	; 0x03
     f6a:	61 15       	cp	r22, r1
     f6c:	71 05       	cpc	r23, r1
     f6e:	81 05       	cpc	r24, r1
     f70:	91 05       	cpc	r25, r1
     f72:	21 f4       	brne	.+8      	; 0xf7c <do_rand+0x30>
     f74:	64 e2       	ldi	r22, 0x24	; 36
     f76:	79 ed       	ldi	r23, 0xD9	; 217
     f78:	8b e5       	ldi	r24, 0x5B	; 91
     f7a:	97 e0       	ldi	r25, 0x07	; 7
     f7c:	2d e1       	ldi	r18, 0x1D	; 29
     f7e:	33 ef       	ldi	r19, 0xF3	; 243
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	38 d0       	rcall	.+112    	; 0xff6 <__divmodsi4>
     f86:	49 01       	movw	r8, r18
     f88:	5a 01       	movw	r10, r20
     f8a:	9b 01       	movw	r18, r22
     f8c:	ac 01       	movw	r20, r24
     f8e:	a7 ea       	ldi	r26, 0xA7	; 167
     f90:	b1 e4       	ldi	r27, 0x41	; 65
     f92:	4d d0       	rcall	.+154    	; 0x102e <__muluhisi3>
     f94:	6b 01       	movw	r12, r22
     f96:	7c 01       	movw	r14, r24
     f98:	ac ee       	ldi	r26, 0xEC	; 236
     f9a:	b4 ef       	ldi	r27, 0xF4	; 244
     f9c:	a5 01       	movw	r20, r10
     f9e:	94 01       	movw	r18, r8
     fa0:	52 d0       	rcall	.+164    	; 0x1046 <__mulohisi3>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	8c 0d       	add	r24, r12
     fa8:	9d 1d       	adc	r25, r13
     faa:	ae 1d       	adc	r26, r14
     fac:	bf 1d       	adc	r27, r15
     fae:	b7 ff       	sbrs	r27, 7
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <do_rand+0x6c>
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	a1 09       	sbc	r26, r1
     fb6:	b0 48       	sbci	r27, 0x80	; 128
     fb8:	88 83       	st	Y, r24
     fba:	99 83       	std	Y+1, r25	; 0x01
     fbc:	aa 83       	std	Y+2, r26	; 0x02
     fbe:	bb 83       	std	Y+3, r27	; 0x03
     fc0:	9f 77       	andi	r25, 0x7F	; 127
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	08 95       	ret

00000fd8 <rand_r>:
     fd8:	b9 cf       	rjmp	.-142    	; 0xf4c <do_rand>

00000fda <rand>:
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	b6 cf       	rjmp	.-148    	; 0xf4c <do_rand>

00000fe0 <srand>:
     fe0:	a0 e0       	ldi	r26, 0x00	; 0
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	80 93 00 01 	sts	0x0100, r24
     fe8:	90 93 01 01 	sts	0x0101, r25
     fec:	a0 93 02 01 	sts	0x0102, r26
     ff0:	b0 93 03 01 	sts	0x0103, r27
     ff4:	08 95       	ret

00000ff6 <__divmodsi4>:
     ff6:	05 2e       	mov	r0, r21
     ff8:	97 fb       	bst	r25, 7
     ffa:	16 f4       	brtc	.+4      	; 0x1000 <__divmodsi4+0xa>
     ffc:	00 94       	com	r0
     ffe:	0f d0       	rcall	.+30     	; 0x101e <__negsi2>
    1000:	57 fd       	sbrc	r21, 7
    1002:	05 d0       	rcall	.+10     	; 0x100e <__divmodsi4_neg2>
    1004:	24 d0       	rcall	.+72     	; 0x104e <__udivmodsi4>
    1006:	07 fc       	sbrc	r0, 7
    1008:	02 d0       	rcall	.+4      	; 0x100e <__divmodsi4_neg2>
    100a:	46 f4       	brtc	.+16     	; 0x101c <__divmodsi4_exit>
    100c:	08 c0       	rjmp	.+16     	; 0x101e <__negsi2>

0000100e <__divmodsi4_neg2>:
    100e:	50 95       	com	r21
    1010:	40 95       	com	r20
    1012:	30 95       	com	r19
    1014:	21 95       	neg	r18
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	4f 4f       	sbci	r20, 0xFF	; 255
    101a:	5f 4f       	sbci	r21, 0xFF	; 255

0000101c <__divmodsi4_exit>:
    101c:	08 95       	ret

0000101e <__negsi2>:
    101e:	90 95       	com	r25
    1020:	80 95       	com	r24
    1022:	70 95       	com	r23
    1024:	61 95       	neg	r22
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	08 95       	ret

0000102e <__muluhisi3>:
    102e:	31 d0       	rcall	.+98     	; 0x1092 <__umulhisi3>
    1030:	a5 9f       	mul	r26, r21
    1032:	90 0d       	add	r25, r0
    1034:	b4 9f       	mul	r27, r20
    1036:	90 0d       	add	r25, r0
    1038:	a4 9f       	mul	r26, r20
    103a:	80 0d       	add	r24, r0
    103c:	91 1d       	adc	r25, r1
    103e:	11 24       	eor	r1, r1
    1040:	08 95       	ret

00001042 <__mulshisi3>:
    1042:	b7 ff       	sbrs	r27, 7
    1044:	f4 cf       	rjmp	.-24     	; 0x102e <__muluhisi3>

00001046 <__mulohisi3>:
    1046:	f3 df       	rcall	.-26     	; 0x102e <__muluhisi3>
    1048:	82 1b       	sub	r24, r18
    104a:	93 0b       	sbc	r25, r19
    104c:	08 95       	ret

0000104e <__udivmodsi4>:
    104e:	a1 e2       	ldi	r26, 0x21	; 33
    1050:	1a 2e       	mov	r1, r26
    1052:	aa 1b       	sub	r26, r26
    1054:	bb 1b       	sub	r27, r27
    1056:	fd 01       	movw	r30, r26
    1058:	0d c0       	rjmp	.+26     	; 0x1074 <__udivmodsi4_ep>

0000105a <__udivmodsi4_loop>:
    105a:	aa 1f       	adc	r26, r26
    105c:	bb 1f       	adc	r27, r27
    105e:	ee 1f       	adc	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	a2 17       	cp	r26, r18
    1064:	b3 07       	cpc	r27, r19
    1066:	e4 07       	cpc	r30, r20
    1068:	f5 07       	cpc	r31, r21
    106a:	20 f0       	brcs	.+8      	; 0x1074 <__udivmodsi4_ep>
    106c:	a2 1b       	sub	r26, r18
    106e:	b3 0b       	sbc	r27, r19
    1070:	e4 0b       	sbc	r30, r20
    1072:	f5 0b       	sbc	r31, r21

00001074 <__udivmodsi4_ep>:
    1074:	66 1f       	adc	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	1a 94       	dec	r1
    107e:	69 f7       	brne	.-38     	; 0x105a <__udivmodsi4_loop>
    1080:	60 95       	com	r22
    1082:	70 95       	com	r23
    1084:	80 95       	com	r24
    1086:	90 95       	com	r25
    1088:	9b 01       	movw	r18, r22
    108a:	ac 01       	movw	r20, r24
    108c:	bd 01       	movw	r22, r26
    108e:	cf 01       	movw	r24, r30
    1090:	08 95       	ret

00001092 <__umulhisi3>:
    1092:	a2 9f       	mul	r26, r18
    1094:	b0 01       	movw	r22, r0
    1096:	b3 9f       	mul	r27, r19
    1098:	c0 01       	movw	r24, r0
    109a:	a3 9f       	mul	r26, r19
    109c:	70 0d       	add	r23, r0
    109e:	81 1d       	adc	r24, r1
    10a0:	11 24       	eor	r1, r1
    10a2:	91 1d       	adc	r25, r1
    10a4:	b2 9f       	mul	r27, r18
    10a6:	70 0d       	add	r23, r0
    10a8:	81 1d       	adc	r24, r1
    10aa:	11 24       	eor	r1, r1
    10ac:	91 1d       	adc	r25, r1
    10ae:	08 95       	ret

000010b0 <_exit>:
    10b0:	f8 94       	cli

000010b2 <__stop_program>:
    10b2:	ff cf       	rjmp	.-2      	; 0x10b2 <__stop_program>
