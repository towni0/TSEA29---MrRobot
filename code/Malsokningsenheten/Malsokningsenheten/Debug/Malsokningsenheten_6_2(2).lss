
Malsokningsenheten_6_2(2).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00001204  00001298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800116  00800116  000012ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3c  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000298  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ff  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083d  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c1  00000000  00000000  000035e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003aa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	95 c0       	rjmp	.+298    	; 0x17c <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e0       	ldi	r30, 0x04	; 4
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 31       	cpi	r26, 0x16	; 22
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a6 e1       	ldi	r26, 0x16	; 22
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 34       	cpi	r26, 0x40	; 64
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	59 d2       	rcall	.+1202   	; 0x576 <main>
      c4:	0c 94 00 09 	jmp	0x1200	; 0x1200 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <_Z17waitForActivationv>:
		return;
	}
	
	//SetPriority() // MÃ¥ste skicka argument!
	nextOrder = TURN_INVISIBLE_AND_DEC_LIFE_LED;
	StartIRTimer();
      ca:	57 98       	cbi	0x0a, 7	; 10
      cc:	8f ef       	ldi	r24, 0xFF	; 255
      ce:	93 eb       	ldi	r25, 0xB3	; 179
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <_Z17waitForActivationv+0x6>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <_Z17waitForActivationv+0xc>
      d6:	00 00       	nop
      d8:	89 b1       	in	r24, 0x09	; 9
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	88 0f       	add	r24, r24
      de:	89 2f       	mov	r24, r25
      e0:	88 1f       	adc	r24, r24
      e2:	99 0b       	sbc	r25, r25
      e4:	89 2b       	or	r24, r25
      e6:	c1 f3       	breq	.-16     	; 0xd8 <_Z17waitForActivationv+0xe>
      e8:	08 95       	ret

000000ea <_Z8SendUARTv>:
      ea:	80 91 c8 00 	lds	r24, 0x00C8
      ee:	85 ff       	sbrs	r24, 5
      f0:	44 c0       	rjmp	.+136    	; 0x17a <_Z8SendUARTv+0x90>
      f2:	80 91 10 01 	lds	r24, 0x0110
      f6:	83 30       	cpi	r24, 0x03	; 3
      f8:	b1 f0       	breq	.+44     	; 0x126 <_Z8SendUARTv+0x3c>
      fa:	28 f4       	brcc	.+10     	; 0x106 <_Z8SendUARTv+0x1c>
      fc:	81 30       	cpi	r24, 0x01	; 1
      fe:	49 f0       	breq	.+18     	; 0x112 <_Z8SendUARTv+0x28>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	61 f0       	breq	.+24     	; 0x11c <_Z8SendUARTv+0x32>
     104:	30 c0       	rjmp	.+96     	; 0x166 <_Z8SendUARTv+0x7c>
     106:	85 30       	cpi	r24, 0x05	; 5
     108:	c1 f0       	breq	.+48     	; 0x13a <_Z8SendUARTv+0x50>
     10a:	90 f0       	brcs	.+36     	; 0x130 <_Z8SendUARTv+0x46>
     10c:	86 30       	cpi	r24, 0x06	; 6
     10e:	d1 f0       	breq	.+52     	; 0x144 <_Z8SendUARTv+0x5a>
     110:	2a c0       	rjmp	.+84     	; 0x166 <_Z8SendUARTv+0x7c>
     112:	80 91 3f 01 	lds	r24, 0x013F
     116:	80 93 ce 00 	sts	0x00CE, r24
     11a:	25 c0       	rjmp	.+74     	; 0x166 <_Z8SendUARTv+0x7c>
     11c:	80 91 15 01 	lds	r24, 0x0115
     120:	80 93 ce 00 	sts	0x00CE, r24
     124:	20 c0       	rjmp	.+64     	; 0x166 <_Z8SendUARTv+0x7c>
     126:	80 91 14 01 	lds	r24, 0x0114
     12a:	80 93 ce 00 	sts	0x00CE, r24
     12e:	1b c0       	rjmp	.+54     	; 0x166 <_Z8SendUARTv+0x7c>
     130:	80 91 13 01 	lds	r24, 0x0113
     134:	80 93 ce 00 	sts	0x00CE, r24
     138:	16 c0       	rjmp	.+44     	; 0x166 <_Z8SendUARTv+0x7c>
     13a:	80 91 12 01 	lds	r24, 0x0112
     13e:	80 93 ce 00 	sts	0x00CE, r24
     142:	11 c0       	rjmp	.+34     	; 0x166 <_Z8SendUARTv+0x7c>
     144:	80 91 36 01 	lds	r24, 0x0136
     148:	88 23       	and	r24, r24
     14a:	a1 f0       	breq	.+40     	; 0x174 <_Z8SendUARTv+0x8a>
     14c:	90 91 11 01 	lds	r25, 0x0111
     150:	97 70       	andi	r25, 0x07	; 7
     152:	90 93 11 01 	sts	0x0111, r25
     156:	88 0f       	add	r24, r24
     158:	88 0f       	add	r24, r24
     15a:	88 0f       	add	r24, r24
     15c:	89 2b       	or	r24, r25
     15e:	80 93 ce 00 	sts	0x00CE, r24
     162:	10 92 36 01 	sts	0x0136, r1
     166:	80 91 10 01 	lds	r24, 0x0110
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 10 01 	sts	0x0110, r24
     170:	87 30       	cpi	r24, 0x07	; 7
     172:	18 f0       	brcs	.+6      	; 0x17a <_Z8SendUARTv+0x90>
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	80 93 10 01 	sts	0x0110, r24
     17a:	08 95       	ret

0000017c <__vector_20>:
     17c:	1f 92       	push	r1
     17e:	0f 92       	push	r0
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	0f 92       	push	r0
     184:	11 24       	eor	r1, r1
     186:	8f 93       	push	r24
     188:	9f 93       	push	r25
     18a:	90 91 c6 00 	lds	r25, 0x00C6
     18e:	89 2f       	mov	r24, r25
     190:	87 70       	andi	r24, 0x07	; 7
     192:	82 30       	cpi	r24, 0x02	; 2
     194:	89 f0       	breq	.+34     	; 0x1b8 <__vector_20+0x3c>
     196:	28 f4       	brcc	.+10     	; 0x1a2 <__vector_20+0x26>
     198:	88 23       	and	r24, r24
     19a:	41 f0       	breq	.+16     	; 0x1ac <__vector_20+0x30>
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	49 f0       	breq	.+18     	; 0x1b2 <__vector_20+0x36>
     1a0:	13 c0       	rjmp	.+38     	; 0x1c8 <__vector_20+0x4c>
     1a2:	83 30       	cpi	r24, 0x03	; 3
     1a4:	61 f0       	breq	.+24     	; 0x1be <__vector_20+0x42>
     1a6:	84 30       	cpi	r24, 0x04	; 4
     1a8:	69 f0       	breq	.+26     	; 0x1c4 <__vector_20+0x48>
     1aa:	0e c0       	rjmp	.+28     	; 0x1c8 <__vector_20+0x4c>
     1ac:	90 93 3f 01 	sts	0x013F, r25
     1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <__vector_20+0x4c>
     1b2:	90 93 15 01 	sts	0x0115, r25
     1b6:	08 c0       	rjmp	.+16     	; 0x1c8 <__vector_20+0x4c>
     1b8:	90 93 14 01 	sts	0x0114, r25
     1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <__vector_20+0x4c>
     1be:	90 93 13 01 	sts	0x0113, r25
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__vector_20+0x4c>
     1c4:	90 93 12 01 	sts	0x0112, r25
     1c8:	9f 91       	pop	r25
     1ca:	8f 91       	pop	r24
     1cc:	0f 90       	pop	r0
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	0f 90       	pop	r0
     1d2:	1f 90       	pop	r1
     1d4:	18 95       	reti

000001d6 <_Z10StopRotatei>:
     1d6:	10 92 33 01 	sts	0x0133, r1
     1da:	10 92 1c 01 	sts	0x011C, r1
     1de:	10 92 1d 01 	sts	0x011D, r1
     1e2:	10 92 1e 01 	sts	0x011E, r1
     1e6:	10 92 1f 01 	sts	0x011F, r1
     1ea:	10 92 2f 01 	sts	0x012F, r1
     1ee:	10 92 30 01 	sts	0x0130, r1
     1f2:	10 92 31 01 	sts	0x0131, r1
     1f6:	10 92 32 01 	sts	0x0132, r1
     1fa:	10 92 b2 00 	sts	0x00B2, r1
     1fe:	e1 eb       	ldi	r30, 0xB1	; 177
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	90 81       	ld	r25, Z
     204:	98 7f       	andi	r25, 0xF8	; 248
     206:	90 83       	st	Z, r25
     208:	80 93 36 01 	sts	0x0136, r24
     20c:	08 95       	ret

0000020e <_Z19calculateGyroOffsetl>:
     20e:	60 39       	cpi	r22, 0x90	; 144
     210:	2f e5       	ldi	r18, 0x5F	; 95
     212:	72 07       	cpc	r23, r18
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	82 07       	cpc	r24, r18
     218:	91 05       	cpc	r25, r1
     21a:	51 f1       	breq	.+84     	; 0x270 <_Z19calculateGyroOffsetl+0x62>
     21c:	74 f4       	brge	.+28     	; 0x23a <_Z19calculateGyroOffsetl+0x2c>
     21e:	64 3e       	cpi	r22, 0xE4	; 228
     220:	27 e5       	ldi	r18, 0x57	; 87
     222:	72 07       	cpc	r23, r18
     224:	81 05       	cpc	r24, r1
     226:	91 05       	cpc	r25, r1
     228:	09 f4       	brne	.+2      	; 0x22c <_Z19calculateGyroOffsetl+0x1e>
     22a:	48 c0       	rjmp	.+144    	; 0x2bc <_Z19calculateGyroOffsetl+0xae>
     22c:	68 3c       	cpi	r22, 0xC8	; 200
     22e:	2f ea       	ldi	r18, 0xAF	; 175
     230:	72 07       	cpc	r23, r18
     232:	81 05       	cpc	r24, r1
     234:	91 05       	cpc	r25, r1
     236:	b9 f0       	breq	.+46     	; 0x266 <_Z19calculateGyroOffsetl+0x58>
     238:	2f c0       	rjmp	.+94     	; 0x298 <_Z19calculateGyroOffsetl+0x8a>
     23a:	60 32       	cpi	r22, 0x20	; 32
     23c:	2f eb       	ldi	r18, 0xBF	; 191
     23e:	72 07       	cpc	r23, r18
     240:	22 e0       	ldi	r18, 0x02	; 2
     242:	82 07       	cpc	r24, r18
     244:	91 05       	cpc	r25, r1
     246:	f1 f0       	breq	.+60     	; 0x284 <_Z19calculateGyroOffsetl+0x76>
     248:	60 34       	cpi	r22, 0x40	; 64
     24a:	2e e7       	ldi	r18, 0x7E	; 126
     24c:	72 07       	cpc	r23, r18
     24e:	25 e0       	ldi	r18, 0x05	; 5
     250:	82 07       	cpc	r24, r18
     252:	91 05       	cpc	r25, r1
     254:	e1 f0       	breq	.+56     	; 0x28e <_Z19calculateGyroOffsetl+0x80>
     256:	68 35       	cpi	r22, 0x58	; 88
     258:	2f e0       	ldi	r18, 0x0F	; 15
     25a:	72 07       	cpc	r23, r18
     25c:	22 e0       	ldi	r18, 0x02	; 2
     25e:	82 07       	cpc	r24, r18
     260:	91 05       	cpc	r25, r1
     262:	d1 f4       	brne	.+52     	; 0x298 <_Z19calculateGyroOffsetl+0x8a>
     264:	0a c0       	rjmp	.+20     	; 0x27a <_Z19calculateGyroOffsetl+0x6c>
     266:	68 e6       	ldi	r22, 0x68	; 104
     268:	72 e4       	ldi	r23, 0x42	; 66
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	08 95       	ret
     270:	68 ee       	ldi	r22, 0xE8	; 232
     272:	70 e8       	ldi	r23, 0x80	; 128
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	08 95       	ret
     27a:	60 e8       	ldi	r22, 0x80	; 128
     27c:	7b eb       	ldi	r23, 0xBB	; 187
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	08 95       	ret
     284:	60 e3       	ldi	r22, 0x30	; 48
     286:	72 ef       	ldi	r23, 0xF2	; 242
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	08 95       	ret
     28e:	60 ef       	ldi	r22, 0xF0	; 240
     290:	7c ec       	ldi	r23, 0xCC	; 204
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	08 95       	ret
     298:	c3 d5       	rcall	.+2950   	; 0xe20 <__floatsisf>
     29a:	20 ea       	ldi	r18, 0xA0	; 160
     29c:	3a ea       	ldi	r19, 0xAA	; 170
     29e:	46 ea       	ldi	r20, 0xA6	; 166
     2a0:	53 e4       	ldi	r21, 0x43	; 67
     2a2:	4e d6       	rcall	.+3228   	; 0xf40 <__mulsf3>
     2a4:	20 e0       	ldi	r18, 0x00	; 0
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	4a e7       	ldi	r20, 0x7A	; 122
     2aa:	54 e4       	ldi	r21, 0x44	; 68
     2ac:	1e d5       	rcall	.+2620   	; 0xcea <__divsf3>
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e4       	ldi	r19, 0x40	; 64
     2b2:	4c e1       	ldi	r20, 0x1C	; 28
     2b4:	55 e4       	ldi	r21, 0x45	; 69
     2b6:	b5 d4       	rcall	.+2410   	; 0xc22 <__addsf3>
     2b8:	80 c5       	rjmp	.+2816   	; 0xdba <__fixsfsi>
     2ba:	08 95       	ret
     2bc:	60 e1       	ldi	r22, 0x10	; 16
     2be:	77 e2       	ldi	r23, 0x27	; 39
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	08 95       	ret

000002c6 <_Z6Rotatelb>:
     2c6:	cf 92       	push	r12
     2c8:	df 92       	push	r13
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	cf 93       	push	r28
     2d0:	6b 01       	movw	r12, r22
     2d2:	7c 01       	movw	r14, r24
     2d4:	c4 2f       	mov	r28, r20
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	80 93 33 01 	sts	0x0133, r24
     2dc:	10 92 34 01 	sts	0x0134, r1
     2e0:	c7 01       	movw	r24, r14
     2e2:	b6 01       	movw	r22, r12
     2e4:	94 df       	rcall	.-216    	; 0x20e <_Z19calculateGyroOffsetl>
     2e6:	c6 1a       	sub	r12, r22
     2e8:	d7 0a       	sbc	r13, r23
     2ea:	e8 0a       	sbc	r14, r24
     2ec:	f9 0a       	sbc	r15, r25
     2ee:	c0 92 2f 01 	sts	0x012F, r12
     2f2:	d0 92 30 01 	sts	0x0130, r13
     2f6:	e0 92 31 01 	sts	0x0131, r14
     2fa:	f0 92 32 01 	sts	0x0132, r15
     2fe:	cc 23       	and	r28, r28
     300:	21 f0       	breq	.+8      	; 0x30a <_Z6Rotatelb+0x44>
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	80 93 36 01 	sts	0x0136, r24
     308:	03 c0       	rjmp	.+6      	; 0x310 <_Z6Rotatelb+0x4a>
     30a:	83 e0       	ldi	r24, 0x03	; 3
     30c:	80 93 36 01 	sts	0x0136, r24
     310:	10 92 b2 00 	sts	0x00B2, r1
     314:	e1 eb       	ldi	r30, 0xB1	; 177
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	87 60       	ori	r24, 0x07	; 7
     31c:	80 83       	st	Z, r24
     31e:	cf 91       	pop	r28
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	08 95       	ret

0000032a <_Z14UpdateRotationv>:
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	80 91 b2 00 	lds	r24, 0x00B2
     336:	8a 35       	cpi	r24, 0x5A	; 90
     338:	08 f4       	brcc	.+2      	; 0x33c <_Z14UpdateRotationv+0x12>
     33a:	64 c0       	rjmp	.+200    	; 0x404 <_Z14UpdateRotationv+0xda>
     33c:	10 92 b2 00 	sts	0x00B2, r1
     340:	80 91 37 01 	lds	r24, 0x0137
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	80 58       	subi	r24, 0x80	; 128
     348:	91 09       	sbc	r25, r1
     34a:	bc 01       	movw	r22, r24
     34c:	22 f4       	brpl	.+8      	; 0x356 <_Z14UpdateRotationv+0x2c>
     34e:	66 27       	eor	r22, r22
     350:	77 27       	eor	r23, r23
     352:	68 1b       	sub	r22, r24
     354:	79 0b       	sbc	r23, r25
     356:	07 2e       	mov	r0, r23
     358:	00 0c       	add	r0, r0
     35a:	88 0b       	sbc	r24, r24
     35c:	99 0b       	sbc	r25, r25
     35e:	60 d5       	rcall	.+2752   	; 0xe20 <__floatsisf>
     360:	9b 01       	movw	r18, r22
     362:	ac 01       	movw	r20, r24
     364:	5e d4       	rcall	.+2236   	; 0xc22 <__addsf3>
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	40 ea       	ldi	r20, 0xA0	; 160
     36c:	50 e4       	ldi	r21, 0x40	; 64
     36e:	e8 d5       	rcall	.+3024   	; 0xf40 <__mulsf3>
     370:	20 91 1c 01 	lds	r18, 0x011C
     374:	30 91 1d 01 	lds	r19, 0x011D
     378:	40 91 1e 01 	lds	r20, 0x011E
     37c:	50 91 1f 01 	lds	r21, 0x011F
     380:	50 d4       	rcall	.+2208   	; 0xc22 <__addsf3>
     382:	6b 01       	movw	r12, r22
     384:	7c 01       	movw	r14, r24
     386:	60 93 1c 01 	sts	0x011C, r22
     38a:	70 93 1d 01 	sts	0x011D, r23
     38e:	80 93 1e 01 	sts	0x011E, r24
     392:	90 93 1f 01 	sts	0x011F, r25
     396:	60 91 2f 01 	lds	r22, 0x012F
     39a:	70 91 30 01 	lds	r23, 0x0130
     39e:	80 91 31 01 	lds	r24, 0x0131
     3a2:	90 91 32 01 	lds	r25, 0x0132
     3a6:	3c d5       	rcall	.+2680   	; 0xe20 <__floatsisf>
     3a8:	9b 01       	movw	r18, r22
     3aa:	ac 01       	movw	r20, r24
     3ac:	c7 01       	movw	r24, r14
     3ae:	b6 01       	movw	r22, r12
     3b0:	c3 d5       	rcall	.+2950   	; 0xf38 <__gesf2>
     3b2:	88 23       	and	r24, r24
     3b4:	4c f1       	brlt	.+82     	; 0x408 <_Z14UpdateRotationv+0xde>
     3b6:	80 91 27 01 	lds	r24, 0x0127
     3ba:	88 23       	and	r24, r24
     3bc:	89 f0       	breq	.+34     	; 0x3e0 <_Z14UpdateRotationv+0xb6>
     3be:	10 92 1c 01 	sts	0x011C, r1
     3c2:	10 92 1d 01 	sts	0x011D, r1
     3c6:	10 92 1e 01 	sts	0x011E, r1
     3ca:	10 92 1f 01 	sts	0x011F, r1
     3ce:	41 e0       	ldi	r20, 0x01	; 1
     3d0:	68 ec       	ldi	r22, 0xC8	; 200
     3d2:	7f ea       	ldi	r23, 0xAF	; 175
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	76 df       	rcall	.-276    	; 0x2c6 <_Z6Rotatelb>
     3da:	10 92 27 01 	sts	0x0127, r1
     3de:	06 c0       	rjmp	.+12     	; 0x3ec <_Z14UpdateRotationv+0xc2>
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	f8 de       	rcall	.-528    	; 0x1d6 <_Z10StopRotatei>
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 04 01 	sts	0x0104, r24
     3ec:	10 92 1b 01 	sts	0x011B, r1
     3f0:	10 92 23 01 	sts	0x0123, r1
     3f4:	10 92 24 01 	sts	0x0124, r1
     3f8:	10 92 25 01 	sts	0x0125, r1
     3fc:	10 92 26 01 	sts	0x0126, r1
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	03 c0       	rjmp	.+6      	; 0x40a <_Z14UpdateRotationv+0xe0>
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	01 c0       	rjmp	.+2      	; 0x40a <_Z14UpdateRotationv+0xe0>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	cf 90       	pop	r12
     412:	08 95       	ret

00000414 <_Z19StartBackwardsTimerv>:
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 2e 01 	sts	0x012E, r24
     41a:	16 bc       	out	0x26, r1	; 38
     41c:	85 e0       	ldi	r24, 0x05	; 5
     41e:	85 bd       	out	0x25, r24	; 37
     420:	10 92 2b 01 	sts	0x012B, r1
     424:	10 92 2a 01 	sts	0x012A, r1
     428:	08 95       	ret

0000042a <_Z18StopBackwardsTimerv>:
     42a:	85 b5       	in	r24, 0x25	; 37
     42c:	8b 7f       	andi	r24, 0xFB	; 251
     42e:	85 bd       	out	0x25, r24	; 37
     430:	85 b5       	in	r24, 0x25	; 37
     432:	8e 7f       	andi	r24, 0xFE	; 254
     434:	85 bd       	out	0x25, r24	; 37
     436:	16 bc       	out	0x26, r1	; 38
     438:	10 92 2b 01 	sts	0x012B, r1
     43c:	10 92 2a 01 	sts	0x012A, r1
     440:	08 95       	ret

00000442 <_Z15StartLaserTimerv>:
     442:	10 92 85 00 	sts	0x0085, r1
     446:	10 92 84 00 	sts	0x0084, r1
     44a:	85 e0       	ldi	r24, 0x05	; 5
     44c:	80 93 81 00 	sts	0x0081, r24
     450:	08 95       	ret

00000452 <_Z5Shootv>:
     452:	cf 92       	push	r12
     454:	df 92       	push	r13
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	80 93 27 01 	sts	0x0127, r24
     464:	10 92 0f 01 	sts	0x010F, r1
     468:	80 93 33 01 	sts	0x0133, r24
     46c:	10 92 1c 01 	sts	0x011C, r1
     470:	10 92 1d 01 	sts	0x011D, r1
     474:	10 92 1e 01 	sts	0x011E, r1
     478:	10 92 1f 01 	sts	0x011F, r1
     47c:	64 ee       	ldi	r22, 0xE4	; 228
     47e:	77 e5       	ldi	r23, 0x57	; 87
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	c4 de       	rcall	.-632    	; 0x20e <_Z19calculateGyroOffsetl>
     486:	04 ee       	ldi	r16, 0xE4	; 228
     488:	17 e5       	ldi	r17, 0x57	; 87
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	68 01       	movw	r12, r16
     490:	79 01       	movw	r14, r18
     492:	c6 1a       	sub	r12, r22
     494:	d7 0a       	sbc	r13, r23
     496:	e8 0a       	sbc	r14, r24
     498:	f9 0a       	sbc	r15, r25
     49a:	c0 92 2f 01 	sts	0x012F, r12
     49e:	d0 92 30 01 	sts	0x0130, r13
     4a2:	e0 92 31 01 	sts	0x0131, r14
     4a6:	f0 92 32 01 	sts	0x0132, r15
     4aa:	e1 eb       	ldi	r30, 0xB1	; 177
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	87 60       	ori	r24, 0x07	; 7
     4b2:	80 83       	st	Z, r24
     4b4:	8b e0       	ldi	r24, 0x0B	; 11
     4b6:	80 93 36 01 	sts	0x0136, r24
     4ba:	c3 df       	rcall	.-122    	; 0x442 <_Z15StartLaserTimerv>
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	08 95       	ret

000004ca <_Z14StopLaserTimerv>:
     4ca:	e1 e8       	ldi	r30, 0x81	; 129
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	8b 7f       	andi	r24, 0xFB	; 251
     4d2:	80 83       	st	Z, r24
     4d4:	80 81       	ld	r24, Z
     4d6:	8e 7f       	andi	r24, 0xFE	; 254
     4d8:	80 83       	st	Z, r24
     4da:	10 92 85 00 	sts	0x0085, r1
     4de:	10 92 84 00 	sts	0x0084, r1
     4e2:	08 95       	ret

000004e4 <_Z11StopIRTimerv>:
	IRCTR = 0;
	IR_TIMER = (1<< CS32) | (1<< CS30);
}

void StopIRTimer() {
	IR_TIMER &= ~(1 << CS32);
     4e4:	e1 e9       	ldi	r30, 0x91	; 145
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	8b 7f       	andi	r24, 0xFB	; 251
     4ec:	80 83       	st	Z, r24
	IR_TIMER &= ~(1 << CS30);
     4ee:	80 81       	ld	r24, Z
     4f0:	8e 7f       	andi	r24, 0xFE	; 254
     4f2:	80 83       	st	Z, r24
	IR_TIMER_COUNTER = 0;
     4f4:	10 92 95 00 	sts	0x0095, r1
     4f8:	10 92 94 00 	sts	0x0094, r1
	IRCTR = 0;
     4fc:	10 92 22 01 	sts	0x0122, r1
     500:	10 92 21 01 	sts	0x0121, r1
     504:	08 95       	ret

00000506 <_Z11positioningv>:
}


void positioning() {
	if (ultraSonicSensor1 <= maxDistance && enemySignatureCTR >= enemySignatureLimit) {
     506:	80 91 3c 01 	lds	r24, 0x013C
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	20 91 09 01 	lds	r18, 0x0109
     510:	30 91 0a 01 	lds	r19, 0x010A
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	ec f0       	brlt	.+58     	; 0x554 <_Z11positioningv+0x4e>
     51a:	40 91 23 01 	lds	r20, 0x0123
     51e:	50 91 24 01 	lds	r21, 0x0124
     522:	60 91 25 01 	lds	r22, 0x0125
     526:	70 91 26 01 	lds	r23, 0x0126
     52a:	80 91 0b 01 	lds	r24, 0x010B
     52e:	90 91 0c 01 	lds	r25, 0x010C
     532:	a0 91 0d 01 	lds	r26, 0x010D
     536:	b0 91 0e 01 	lds	r27, 0x010E
     53a:	48 17       	cp	r20, r24
     53c:	59 07       	cpc	r21, r25
     53e:	6a 07       	cpc	r22, r26
     540:	7b 07       	cpc	r23, r27
     542:	6c f4       	brge	.+26     	; 0x55e <_Z11positioningv+0x58>
     544:	07 c0       	rjmp	.+14     	; 0x554 <_Z11positioningv+0x4e>
		isPositioning = false;
		enemySignatureCTR = 0;
	}
	else {
		if (!rotating) {
			Rotate(360000, true);
     546:	41 e0       	ldi	r20, 0x01	; 1
     548:	60 e4       	ldi	r22, 0x40	; 64
     54a:	7e e7       	ldi	r23, 0x7E	; 126
     54c:	85 e0       	ldi	r24, 0x05	; 5
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	ba ce       	rjmp	.-652    	; 0x2c6 <_Z6Rotatelb>
     552:	08 95       	ret
		Shoot();
		isPositioning = false;
		enemySignatureCTR = 0;
	}
	else {
		if (!rotating) {
     554:	80 91 33 01 	lds	r24, 0x0133
     558:	81 11       	cpse	r24, r1
     55a:	0c c0       	rjmp	.+24     	; 0x574 <_Z11positioningv+0x6e>
     55c:	f4 cf       	rjmp	.-24     	; 0x546 <_Z11positioningv+0x40>
}


void positioning() {
	if (ultraSonicSensor1 <= maxDistance && enemySignatureCTR >= enemySignatureLimit) {
		Shoot();
     55e:	79 df       	rcall	.-270    	; 0x452 <_Z5Shootv>
		isPositioning = false;
     560:	10 92 1b 01 	sts	0x011B, r1
		enemySignatureCTR = 0;
     564:	10 92 23 01 	sts	0x0123, r1
     568:	10 92 24 01 	sts	0x0124, r1
     56c:	10 92 25 01 	sts	0x0125, r1
     570:	10 92 26 01 	sts	0x0126, r1
     574:	08 95       	ret

00000576 <main>:
bool signatureConfirmed = false;



int main(void)
{
     576:	2f 92       	push	r2
     578:	3f 92       	push	r3
     57a:	4f 92       	push	r4
     57c:	5f 92       	push	r5
     57e:	6f 92       	push	r6
     580:	7f 92       	push	r7
     582:	8f 92       	push	r8
     584:	9f 92       	push	r9
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
	DDRB = 0b11111011;
     59a:	8b ef       	ldi	r24, 0xFB	; 251
     59c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
     59e:	8f ef       	ldi	r24, 0xFF	; 255
     5a0:	87 b9       	out	0x07, r24	; 7
	
	//enable global interrupts
	sei();
     5a2:	78 94       	sei
	//################
	
	//initiate UART mÃ¥lsÃ¶kning from sensor
	//set baud rate
	uint16_t UBRR_val = UBRR_SENSOR_MALSOKNING;
	UBRR0H = (unsigned char) (UBRR_val >> 8);
     5a4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) UBRR_val;
     5a8:	87 e7       	ldi	r24, 0x77	; 119
     5aa:	80 93 c4 00 	sts	0x00C4, r24
	//enable receive + set frame 8 bits
	UCSR0B = (1<<RXEN0);
     5ae:	e1 ec       	ldi	r30, 0xC1	; 193
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 e1       	ldi	r24, 0x10	; 16
     5b4:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
     5b6:	96 e0       	ldi	r25, 0x06	; 6
     5b8:	90 93 c2 00 	sts	0x00C2, r25

	//enable receive interrupt
	UCSR0B |= (1<<RXCIE0);
     5bc:	80 81       	ld	r24, Z
     5be:	80 68       	ori	r24, 0x80	; 128
     5c0:	80 83       	st	Z, r24
	
	//initiate UART mÃ¥lsÃ¶kning to styr
	//set baud rate
	//115200
	uint16_t UBRR_val1 = UBRR_STYR_MALSOKNING;
	UBRR1H = (unsigned char) (UBRR_val1 >> 8);
     5c2:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char) UBRR_val1;
     5c6:	89 e0       	ldi	r24, 0x09	; 9
     5c8:	80 93 cc 00 	sts	0x00CC, r24
	
	//enable transmit + set frame 8 bits
	UCSR1B = (1<<TXEN1);
     5cc:	88 e0       	ldi	r24, 0x08	; 8
     5ce:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ10) | (1<<UCSZ11);
     5d2:	90 93 ca 00 	sts	0x00CA, r25
	
	//enable transmit interrupt was for testing blueetooth
	//UCSR1B |= (1<<TXCIE0);
	//#UART INITS END#//
	
	waitForActivation();
     5d6:	79 dd       	rcall	.-1294   	; 0xca <_Z17waitForActivationv>
	
	//start first UART transmission just for testing bluetooth
	//UDR1 = 0x00;
	
	//###first order!###
	nextOrder = MOVE_FORWARD;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	80 93 36 01 	sts	0x0136, r24
			//##############
			//## TestlÃ¤ge ##
			//##############
			
			// LASER timer stuff
			if (LASER_TIMER_COUNTER >= ONE_SECOND) {
     5de:	c4 e8       	ldi	r28, 0x84	; 132
     5e0:	d0 e0       	ldi	r29, 0x00	; 0
							leftTapeHit = false;
							Rotate(45000 + (-30000 + (rand()%60)*1000), false);
						}
						else if (rightTapeHit) {
							rightTapeHit = false;
							Rotate(60000 + (-30000 + (rand()%60)*1000), true);
     5e2:	0f 2e       	mov	r0, r31
     5e4:	fc e3       	ldi	r31, 0x3C	; 60
     5e6:	cf 2e       	mov	r12, r31
     5e8:	d1 2c       	mov	r13, r1
     5ea:	f0 2d       	mov	r31, r0
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f8 ee       	ldi	r31, 0xE8	; 232
     5f0:	ef 2e       	mov	r14, r31
     5f2:	f3 e0       	ldi	r31, 0x03	; 3
     5f4:	ff 2e       	mov	r15, r31
     5f6:	f0 2d       	mov	r31, r0
		
			// If the Right line sensor detects tape and we havn't startet rotating, turn left
			if((tapeSensor2 == 1) && !backing){
				rightTapeHit = true; 
				StartBackwardsTimer();
				nextOrder = MOVE_BACKWARDS;
     5f8:	0f 2e       	mov	r0, r31
     5fa:	fc e0       	ldi	r31, 0x0C	; 12
     5fc:	bf 2e       	mov	r11, r31
     5fe:	f0 2d       	mov	r31, r0
				}
			}
			
			else{
				//enemySignatureCTR -= 5;
				enemySignatureCTR -= (rotating ? 15 : 5);
     600:	31 2c       	mov	r3, r1
     602:	21 2c       	mov	r2, r1
     604:	81 2c       	mov	r8, r1
     606:	91 2c       	mov	r9, r1
				coolDownCTR++;
				LASER_TIMER_COUNTER = 0;
							
				// Lasers been active for 1 sec, turn it off
				if (coolDownCTR == 1) {
					nextOrder = DEACTIVATE_LASER;
     608:	0f 2e       	mov	r0, r31
     60a:	f5 e0       	ldi	r31, 0x05	; 5
     60c:	af 2e       	mov	r10, r31
     60e:	f0 2d       	mov	r31, r0
				}
				
			}

			//IR timer stuff
			if (IR_TIMER_COUNTER >= ONE_SECOND) {
     610:	04 e9       	ldi	r16, 0x94	; 148
     612:	10 e0       	ldi	r17, 0x00	; 0
	//health = 1;
	//WeAreHit();
	
	
	
    while(!dead)
     614:	83 c2       	rjmp	.+1286   	; 0xb1c <main+0x5a6>
    {
		//disable interrupts
		cli();
     616:	f8 94       	cli
		
		//############################
		//## Snapshot sensor values ##
		//############################
		//Message 1
		IRSignature = (message1>>IRSIGNATURE_INDEX) & 0b00000111;
     618:	20 91 3f 01 	lds	r18, 0x013F
     61c:	82 2f       	mov	r24, r18
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	ac 01       	movw	r20, r24
     622:	55 95       	asr	r21
     624:	47 95       	ror	r20
     626:	55 95       	asr	r21
     628:	47 95       	ror	r20
     62a:	55 95       	asr	r21
     62c:	47 95       	ror	r20
     62e:	47 70       	andi	r20, 0x07	; 7
     630:	40 93 39 01 	sts	0x0139, r20
		laserSensor = (message1>>LASER_INDEX) & 0b00000001;
     634:	08 2e       	mov	r0, r24
     636:	89 2f       	mov	r24, r25
     638:	00 0c       	add	r0, r0
     63a:	88 1f       	adc	r24, r24
     63c:	99 0b       	sbc	r25, r25
     63e:	00 0c       	add	r0, r0
     640:	88 1f       	adc	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	81 70       	andi	r24, 0x01	; 1
     646:	80 93 38 01 	sts	0x0138, r24
		activeIRsignature = (message1>>IRSENSOR_INDEX) & 0b00000001;
     64a:	22 1f       	adc	r18, r18
     64c:	22 27       	eor	r18, r18
     64e:	22 1f       	adc	r18, r18
     650:	20 93 3a 01 	sts	0x013A, r18
		
		//Message 2
		ultraSonicSensor1 = (message2>>ULTRASONICSENSOR1_INDEX) & 0b00011111;
     654:	80 91 15 01 	lds	r24, 0x0115
     658:	86 95       	lsr	r24
     65a:	86 95       	lsr	r24
     65c:	86 95       	lsr	r24
     65e:	80 93 3c 01 	sts	0x013C, r24
		
		//debugging
		if(ultraSonicSensor1 < 1){
     662:	80 91 3c 01 	lds	r24, 0x013C
     666:	81 11       	cpse	r24, r1
     668:	02 c0       	rjmp	.+4      	; 0x66e <main+0xf8>
			PORTC |= (1 << PINC0);
     66a:	40 9a       	sbi	0x08, 0	; 8
     66c:	01 c0       	rjmp	.+2      	; 0x670 <main+0xfa>
		}
		else{
			PORTC &= ~(1 << PINC0);
     66e:	40 98       	cbi	0x08, 0	; 8
		}
		//Message 3
		ultraSonicSensor2 = (message3>>ULTRASONICSENSOR2_INDEX) & 0b00011111;
     670:	80 91 14 01 	lds	r24, 0x0114
     674:	86 95       	lsr	r24
     676:	86 95       	lsr	r24
     678:	86 95       	lsr	r24
     67a:	80 93 3b 01 	sts	0x013B, r24
		
		//Message 4
		gyro = (message4>>LOWERBITSGYRO_INDEX) & 0b00011111; //Low 5 bits
     67e:	80 91 13 01 	lds	r24, 0x0113
     682:	86 95       	lsr	r24
     684:	86 95       	lsr	r24
     686:	86 95       	lsr	r24
     688:	80 93 37 01 	sts	0x0137, r24
		
		//Message 5
		gyro |= (message5<<2) & 0b11100000; //High 3 bits
     68c:	20 91 12 01 	lds	r18, 0x0112
     690:	82 2f       	mov	r24, r18
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	40 91 37 01 	lds	r20, 0x0137
     698:	bc 01       	movw	r22, r24
     69a:	66 0f       	add	r22, r22
     69c:	77 1f       	adc	r23, r23
     69e:	66 0f       	add	r22, r22
     6a0:	77 1f       	adc	r23, r23
     6a2:	36 2f       	mov	r19, r22
     6a4:	30 7e       	andi	r19, 0xE0	; 224
     6a6:	34 2b       	or	r19, r20
     6a8:	30 93 37 01 	sts	0x0137, r19
		tapeSensor1 = (message5>>TAPESENSOR1_INDEX) & 0b00000001;
     6ac:	08 2e       	mov	r0, r24
     6ae:	89 2f       	mov	r24, r25
     6b0:	00 0c       	add	r0, r0
     6b2:	88 1f       	adc	r24, r24
     6b4:	99 0b       	sbc	r25, r25
     6b6:	00 0c       	add	r0, r0
     6b8:	88 1f       	adc	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	81 70       	andi	r24, 0x01	; 1
     6be:	80 93 3e 01 	sts	0x013E, r24
		tapeSensor2 = (message5>>TAPESENSOR2_INDEX) & 0b00000001;
     6c2:	22 1f       	adc	r18, r18
     6c4:	22 27       	eor	r18, r18
     6c6:	22 1f       	adc	r18, r18
     6c8:	20 93 3d 01 	sts	0x013D, r18
		
		//enable interrupts
		sei();
     6cc:	78 94       	sei
		
		//#######################
		//## UART Transmission ##
		//#######################
		SendUART();
     6ce:	0d dd       	rcall	.-1510   	; 0xea <_Z8SendUARTv>
		
		if((PINB>>PINB2) == 0){
     6d0:	83 b1       	in	r24, 0x03	; 3
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	95 95       	asr	r25
     6d6:	87 95       	ror	r24
     6d8:	95 95       	asr	r25
     6da:	87 95       	ror	r24
     6dc:	89 2b       	or	r24, r25
     6de:	09 f0       	breq	.+2      	; 0x6e2 <main+0x16c>
     6e0:	04 c1       	rjmp	.+520    	; 0x8ea <main+0x374>
			//TÃ¤vling
			
			
			// Used for debouncing the IR signatures
			if (activeIRsignature) {
     6e2:	80 91 3a 01 	lds	r24, 0x013A
     6e6:	88 23       	and	r24, r24
     6e8:	a1 f0       	breq	.+40     	; 0x712 <main+0x19c>
				enemySignatureCTR++;
     6ea:	80 91 23 01 	lds	r24, 0x0123
     6ee:	90 91 24 01 	lds	r25, 0x0124
     6f2:	a0 91 25 01 	lds	r26, 0x0125
     6f6:	b0 91 26 01 	lds	r27, 0x0126
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	a1 1d       	adc	r26, r1
     6fe:	b1 1d       	adc	r27, r1
     700:	80 93 23 01 	sts	0x0123, r24
     704:	90 93 24 01 	sts	0x0124, r25
     708:	a0 93 25 01 	sts	0x0125, r26
     70c:	b0 93 26 01 	sts	0x0126, r27
     710:	08 c0       	rjmp	.+16     	; 0x722 <main+0x1ac>
			}
			
			else{
				enemySignatureCTR = 0;
     712:	10 92 23 01 	sts	0x0123, r1
     716:	10 92 24 01 	sts	0x0124, r1
     71a:	10 92 25 01 	sts	0x0125, r1
     71e:	10 92 26 01 	sts	0x0126, r1
			}
			
			// Used to see if we have confirmed a IR signature
			if (enemySignatureCTR >= enemySignatureLimit && !signatureConfirmed) {
     722:	40 91 23 01 	lds	r20, 0x0123
     726:	50 91 24 01 	lds	r21, 0x0124
     72a:	60 91 25 01 	lds	r22, 0x0125
     72e:	70 91 26 01 	lds	r23, 0x0126
     732:	80 91 0b 01 	lds	r24, 0x010B
     736:	90 91 0c 01 	lds	r25, 0x010C
     73a:	a0 91 0d 01 	lds	r26, 0x010D
     73e:	b0 91 0e 01 	lds	r27, 0x010E
     742:	48 17       	cp	r20, r24
     744:	59 07       	cpc	r21, r25
     746:	6a 07       	cpc	r22, r26
     748:	7b 07       	cpc	r23, r27
     74a:	44 f0       	brlt	.+16     	; 0x75c <main+0x1e6>
     74c:	80 91 16 01 	lds	r24, 0x0116
     750:	81 11       	cpse	r24, r1
     752:	04 c0       	rjmp	.+8      	; 0x75c <main+0x1e6>
				signatureConfirmed = true;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	80 93 16 01 	sts	0x0116, r24
     75a:	02 c0       	rjmp	.+4      	; 0x760 <main+0x1ea>
			}
			else {
				signatureConfirmed = false;
     75c:	10 92 16 01 	sts	0x0116, r1
			}
			
			// LASER timer stuff
			if (LASER_TIMER_COUNTER >= ONE_SECOND) {
     760:	88 81       	ld	r24, Y
     762:	99 81       	ldd	r25, Y+1	; 0x01
     764:	80 35       	cpi	r24, 0x50	; 80
     766:	96 44       	sbci	r25, 0x46	; 70
     768:	00 f1       	brcs	.+64     	; 0x7aa <main+0x234>
				coolDownCTR++;
     76a:	80 91 28 01 	lds	r24, 0x0128
     76e:	90 91 29 01 	lds	r25, 0x0129
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	90 93 29 01 	sts	0x0129, r25
     778:	80 93 28 01 	sts	0x0128, r24
				LASER_TIMER_COUNTER = 0;
     77c:	19 82       	std	Y+1, r1	; 0x01
     77e:	18 82       	st	Y, r1
				
				// Lasers been active for 1 sec, turn it off
				if (coolDownCTR == 1) {
     780:	80 91 28 01 	lds	r24, 0x0128
     784:	90 91 29 01 	lds	r25, 0x0129
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	91 05       	cpc	r25, r1
     78c:	41 f4       	brne	.+16     	; 0x79e <main+0x228>
					nextOrder = DEACTIVATE_LASER;
     78e:	a0 92 36 01 	sts	0x0136, r10
					laserActive = false;
     792:	10 92 27 01 	sts	0x0127, r1
					foundSomethingToDo = true;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 20 01 	sts	0x0120, r24
					continue;
     79c:	bf c1       	rjmp	.+894    	; 0xb1c <main+0x5a6>
				}
				// cooldown is over
				else if (coolDownCTR == 4) {
     79e:	04 97       	sbiw	r24, 0x04	; 4
     7a0:	21 f4       	brne	.+8      	; 0x7aa <main+0x234>
					canShoot = true;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 0f 01 	sts	0x010F, r24
					StopLaserTimer();
     7a8:	90 de       	rcall	.-736    	; 0x4ca <_Z14StopLaserTimerv>
				}
				
			}

			//IR timer stuff
			if (IR_TIMER_COUNTER >= ONE_SECOND) {
     7aa:	f8 01       	movw	r30, r16
     7ac:	80 81       	ld	r24, Z
     7ae:	91 81       	ldd	r25, Z+1	; 0x01
     7b0:	80 35       	cpi	r24, 0x50	; 80
     7b2:	96 44       	sbci	r25, 0x46	; 70
     7b4:	98 f0       	brcs	.+38     	; 0x7dc <main+0x266>
				IR_TIMER_COUNTER = 0;
     7b6:	f8 01       	movw	r30, r16
     7b8:	11 82       	std	Z+1, r1	; 0x01
     7ba:	10 82       	st	Z, r1
				IRCTR++;
     7bc:	80 91 21 01 	lds	r24, 0x0121
     7c0:	90 91 22 01 	lds	r25, 0x0122
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	90 93 22 01 	sts	0x0122, r25
     7ca:	80 93 21 01 	sts	0x0121, r24
				if (IRCTR >= 5) {
     7ce:	05 97       	sbiw	r24, 0x05	; 5
     7d0:	2c f0       	brlt	.+10     	; 0x7dc <main+0x266>
					StopIRTimer();
     7d2:	88 de       	rcall	.-752    	; 0x4e4 <_Z11StopIRTimerv>
					nextOrder = TURN_ON_IR_SIG;
     7d4:	f7 e0       	ldi	r31, 0x07	; 7
     7d6:	f0 93 36 01 	sts	0x0136, r31
					continue;
     7da:	a0 c1       	rjmp	.+832    	; 0xb1c <main+0x5a6>
				}
			}
			
			
			// If the Left line sensor detects tape and we havn't startet rotating, turn right
			if((tapeSensor1 == 1) && !rotating && !backing){
     7dc:	80 91 3e 01 	lds	r24, 0x013E
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <main+0x270>
     7e4:	c6 c1       	rjmp	.+908    	; 0xb72 <main+0x5fc>
     7e6:	80 91 33 01 	lds	r24, 0x0133
     7ea:	81 11       	cpse	r24, r1
     7ec:	f6 c1       	rjmp	.+1004   	; 0xbda <main+0x664>
     7ee:	80 91 2e 01 	lds	r24, 0x012E
     7f2:	81 11       	cpse	r24, r1
     7f4:	f5 c1       	rjmp	.+1002   	; 0xbe0 <main+0x66a>
     7f6:	c2 c1       	rjmp	.+900    	; 0xb7c <main+0x606>
				continue;

			}
			
			// If the Right line sensor detects tape and we havn't startet rotating, turn left
			if((tapeSensor2 == 1) && !rotating && !backing){
     7f8:	80 91 33 01 	lds	r24, 0x0133
     7fc:	81 11       	cpse	r24, r1
     7fe:	cc c1       	rjmp	.+920    	; 0xb98 <main+0x622>
     800:	80 91 2e 01 	lds	r24, 0x012E
     804:	88 23       	and	r24, r24
     806:	09 f4       	brne	.+2      	; 0x80a <main+0x294>
     808:	c0 c1       	rjmp	.+896    	; 0xb8a <main+0x614>
				continue;
			}
			
			// Backing stuff
			if (backing) {
				if(BACKWARDS_TIMER_CTR >= timeToReachOneHundredth){
     80a:	86 b5       	in	r24, 0x26	; 38
     80c:	84 3b       	cpi	r24, 0xB4	; 180
     80e:	40 f1       	brcs	.+80     	; 0x860 <main+0x2ea>
					BACKWARDS_TIMER_CTR = 0;
     810:	16 bc       	out	0x26, r1	; 38
					backing_ctr++;
     812:	80 91 2a 01 	lds	r24, 0x012A
     816:	90 91 2b 01 	lds	r25, 0x012B
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	90 93 2b 01 	sts	0x012B, r25
     820:	80 93 2a 01 	sts	0x012A, r24
					
					if (backing_ctr >= 50) {
     824:	c2 97       	sbiw	r24, 0x32	; 50
     826:	e4 f0       	brlt	.+56     	; 0x860 <main+0x2ea>
						backing = false;
     828:	10 92 2e 01 	sts	0x012E, r1
						StopBackwardsTimer();
     82c:	fe dd       	rcall	.-1028   	; 0x42a <_Z18StopBackwardsTimerv>
						
						if (leftTapeHit) {
     82e:	80 91 2d 01 	lds	r24, 0x012D
     832:	88 23       	and	r24, r24
     834:	49 f0       	breq	.+18     	; 0x848 <main+0x2d2>
							leftTapeHit = false;
     836:	10 92 2d 01 	sts	0x012D, r1
							Rotate(45000, false);
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	68 ec       	ldi	r22, 0xC8	; 200
     83e:	7f ea       	ldi	r23, 0xAF	; 175
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	40 dd       	rcall	.-1408   	; 0x2c6 <_Z6Rotatelb>
     846:	0c c0       	rjmp	.+24     	; 0x860 <main+0x2ea>
						}
						else if (rightTapeHit) {
     848:	80 91 2c 01 	lds	r24, 0x012C
     84c:	88 23       	and	r24, r24
     84e:	41 f0       	breq	.+16     	; 0x860 <main+0x2ea>
							rightTapeHit = false;
     850:	10 92 2c 01 	sts	0x012C, r1
							Rotate(60000, true);
     854:	41 e0       	ldi	r20, 0x01	; 1
     856:	60 e6       	ldi	r22, 0x60	; 96
     858:	7a ee       	ldi	r23, 0xEA	; 234
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	33 dd       	rcall	.-1434   	; 0x2c6 <_Z6Rotatelb>
					
				}
			}
			
			// Used to see if we are moving forward and to trigger a rotation after a specified amount of ticks have passed
			if (isMovingForward) {
     860:	80 91 04 01 	lds	r24, 0x0104
     864:	88 23       	and	r24, r24
     866:	89 f1       	breq	.+98     	; 0x8ca <main+0x354>
				forwardTickCTR++;
     868:	80 91 17 01 	lds	r24, 0x0117
     86c:	90 91 18 01 	lds	r25, 0x0118
     870:	a0 91 19 01 	lds	r26, 0x0119
     874:	b0 91 1a 01 	lds	r27, 0x011A
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	a1 1d       	adc	r26, r1
     87c:	b1 1d       	adc	r27, r1
     87e:	80 93 17 01 	sts	0x0117, r24
     882:	90 93 18 01 	sts	0x0118, r25
     886:	a0 93 19 01 	sts	0x0119, r26
     88a:	b0 93 1a 01 	sts	0x011A, r27
				
				// If we have Moved Forward enought, start rotate
				if (forwardTickCTR >= forwardMaxTimeInTicks) {
     88e:	40 91 05 01 	lds	r20, 0x0105
     892:	50 91 06 01 	lds	r21, 0x0106
     896:	60 91 07 01 	lds	r22, 0x0107
     89a:	70 91 08 01 	lds	r23, 0x0108
     89e:	84 17       	cp	r24, r20
     8a0:	95 07       	cpc	r25, r21
     8a2:	a6 07       	cpc	r26, r22
     8a4:	b7 07       	cpc	r27, r23
     8a6:	8c f0       	brlt	.+34     	; 0x8ca <main+0x354>
					forwardTickCTR = 0;
     8a8:	10 92 17 01 	sts	0x0117, r1
     8ac:	10 92 18 01 	sts	0x0118, r1
     8b0:	10 92 19 01 	sts	0x0119, r1
     8b4:	10 92 1a 01 	sts	0x011A, r1
					isMovingForward = false;
     8b8:	10 92 04 01 	sts	0x0104, r1
					Rotate(360000, true);
     8bc:	41 e0       	ldi	r20, 0x01	; 1
     8be:	60 e4       	ldi	r22, 0x40	; 64
     8c0:	7e e7       	ldi	r23, 0x7E	; 126
     8c2:	85 e0       	ldi	r24, 0x05	; 5
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	ff dc       	rcall	.-1538   	; 0x2c6 <_Z6Rotatelb>
					continue;
     8c8:	29 c1       	rjmp	.+594    	; 0xb1c <main+0x5a6>
				}
				
			}
			
			// Used to see if we are rotating and updates rotation data and checks for opponents
			if (rotating) {
     8ca:	80 91 33 01 	lds	r24, 0x0133
     8ce:	88 23       	and	r24, r24
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <main+0x35e>
     8d2:	24 c1       	rjmp	.+584    	; 0xb1c <main+0x5a6>
				UpdateRotation();
     8d4:	2a dd       	rcall	.-1452   	; 0x32a <_Z14UpdateRotationv>
				if (ultraSonicSensor1 <= 12 && signatureConfirmed) {
     8d6:	80 91 3c 01 	lds	r24, 0x013C
     8da:	8d 30       	cpi	r24, 0x0D	; 13
     8dc:	08 f0       	brcs	.+2      	; 0x8e0 <main+0x36a>
     8de:	1e c1       	rjmp	.+572    	; 0xb1c <main+0x5a6>
     8e0:	80 91 16 01 	lds	r24, 0x0116
     8e4:	81 11       	cpse	r24, r1
     8e6:	5e c1       	rjmp	.+700    	; 0xba4 <main+0x62e>
     8e8:	19 c1       	rjmp	.+562    	; 0xb1c <main+0x5a6>
			//##############
			//## TestlÃ¤ge ##
			//##############
			
			// LASER timer stuff
			if (LASER_TIMER_COUNTER >= ONE_SECOND) {
     8ea:	88 81       	ld	r24, Y
     8ec:	99 81       	ldd	r25, Y+1	; 0x01
     8ee:	80 35       	cpi	r24, 0x50	; 80
     8f0:	96 44       	sbci	r25, 0x46	; 70
     8f2:	20 f1       	brcs	.+72     	; 0x93c <main+0x3c6>
				coolDownCTR++;
     8f4:	80 91 28 01 	lds	r24, 0x0128
     8f8:	90 91 29 01 	lds	r25, 0x0129
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	90 93 29 01 	sts	0x0129, r25
     902:	80 93 28 01 	sts	0x0128, r24
				LASER_TIMER_COUNTER = 0;
     906:	19 82       	std	Y+1, r1	; 0x01
     908:	18 82       	st	Y, r1
							
				// Lasers been active for 1 sec, turn it off
				if (coolDownCTR == 1) {
     90a:	80 91 28 01 	lds	r24, 0x0128
     90e:	90 91 29 01 	lds	r25, 0x0129
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	91 05       	cpc	r25, r1
     916:	41 f4       	brne	.+16     	; 0x928 <main+0x3b2>
					nextOrder = DEACTIVATE_LASER;
     918:	a0 92 36 01 	sts	0x0136, r10
					laserActive = false;
     91c:	10 92 27 01 	sts	0x0127, r1
					foundSomethingToDo = true;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 20 01 	sts	0x0120, r24
					continue;
     926:	fa c0       	rjmp	.+500    	; 0xb1c <main+0x5a6>
				}
				// cooldown is over
				else if (coolDownCTR == 4) {
     928:	04 97       	sbiw	r24, 0x04	; 4
     92a:	41 f4       	brne	.+16     	; 0x93c <main+0x3c6>
					canShoot = true;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 93 0f 01 	sts	0x010F, r24
					StopLaserTimer();
     932:	cb dd       	rcall	.-1130   	; 0x4ca <_Z14StopLaserTimerv>
					coolDownCTR = 0;
     934:	10 92 29 01 	sts	0x0129, r1
     938:	10 92 28 01 	sts	0x0128, r1
							
							
			}
			
			// IR Signature debouncing
			if (activeIRsignature) {
     93c:	80 91 3a 01 	lds	r24, 0x013A
     940:	88 23       	and	r24, r24
     942:	a1 f1       	breq	.+104    	; 0x9ac <main+0x436>
				
				if (!(enemySignatureCTR >= enemySignatureLimit * 2)) {
     944:	40 91 23 01 	lds	r20, 0x0123
     948:	50 91 24 01 	lds	r21, 0x0124
     94c:	60 91 25 01 	lds	r22, 0x0125
     950:	70 91 26 01 	lds	r23, 0x0126
     954:	80 91 0b 01 	lds	r24, 0x010B
     958:	90 91 0c 01 	lds	r25, 0x010C
     95c:	a0 91 0d 01 	lds	r26, 0x010D
     960:	b0 91 0e 01 	lds	r27, 0x010E
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	aa 1f       	adc	r26, r26
     96a:	bb 1f       	adc	r27, r27
     96c:	48 17       	cp	r20, r24
     96e:	59 07       	cpc	r21, r25
     970:	6a 07       	cpc	r22, r26
     972:	7b 07       	cpc	r23, r27
     974:	0c f0       	brlt	.+2      	; 0x978 <main+0x402>
     976:	47 c0       	rjmp	.+142    	; 0xa06 <main+0x490>
					//enemySignatureCTR++;
					enemySignatureCTR += (rotating ? 3 : 1);
     978:	80 91 33 01 	lds	r24, 0x0133
     97c:	81 11       	cpse	r24, r1
     97e:	05 c0       	rjmp	.+10     	; 0x98a <main+0x414>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	04 c0       	rjmp	.+8      	; 0x992 <main+0x41c>
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e0       	ldi	r26, 0x00	; 0
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	48 0f       	add	r20, r24
     994:	59 1f       	adc	r21, r25
     996:	6a 1f       	adc	r22, r26
     998:	7b 1f       	adc	r23, r27
     99a:	40 93 23 01 	sts	0x0123, r20
     99e:	50 93 24 01 	sts	0x0124, r21
     9a2:	60 93 25 01 	sts	0x0125, r22
     9a6:	70 93 26 01 	sts	0x0126, r23
     9aa:	2d c0       	rjmp	.+90     	; 0xa06 <main+0x490>
				}
			}
			
			else{
				//enemySignatureCTR -= 5;
				enemySignatureCTR -= (rotating ? 15 : 5);
     9ac:	40 91 23 01 	lds	r20, 0x0123
     9b0:	50 91 24 01 	lds	r21, 0x0124
     9b4:	60 91 25 01 	lds	r22, 0x0125
     9b8:	70 91 26 01 	lds	r23, 0x0126
     9bc:	80 91 33 01 	lds	r24, 0x0133
     9c0:	81 11       	cpse	r24, r1
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <main+0x458>
     9c4:	85 e0       	ldi	r24, 0x05	; 5
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a8 2d       	mov	r26, r8
     9ca:	b9 2d       	mov	r27, r9
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <main+0x460>
     9ce:	8f e0       	ldi	r24, 0x0F	; 15
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a3 2d       	mov	r26, r3
     9d4:	b2 2d       	mov	r27, r2
     9d6:	2a 01       	movw	r4, r20
     9d8:	3b 01       	movw	r6, r22
     9da:	48 1a       	sub	r4, r24
     9dc:	59 0a       	sbc	r5, r25
     9de:	6a 0a       	sbc	r6, r26
     9e0:	7b 0a       	sbc	r7, r27
				
				if (enemySignatureCTR < 0){
     9e2:	4a f0       	brmi	.+18     	; 0x9f6 <main+0x480>
				}
			}
			
			else{
				//enemySignatureCTR -= 5;
				enemySignatureCTR -= (rotating ? 15 : 5);
     9e4:	40 92 23 01 	sts	0x0123, r4
     9e8:	50 92 24 01 	sts	0x0124, r5
     9ec:	60 92 25 01 	sts	0x0125, r6
     9f0:	70 92 26 01 	sts	0x0126, r7
     9f4:	08 c0       	rjmp	.+16     	; 0xa06 <main+0x490>
				
				if (enemySignatureCTR < 0){
					enemySignatureCTR = 0;
     9f6:	10 92 23 01 	sts	0x0123, r1
     9fa:	10 92 24 01 	sts	0x0124, r1
     9fe:	10 92 25 01 	sts	0x0125, r1
     a02:	10 92 26 01 	sts	0x0126, r1
				}
			}
			
			
			//test fÃ¶r att centrera framfÃ¶r fyr.
			if (enemySignatureCTR >= enemySignatureLimit && !isPositioning  && canShoot) {
     a06:	40 91 23 01 	lds	r20, 0x0123
     a0a:	50 91 24 01 	lds	r21, 0x0124
     a0e:	60 91 25 01 	lds	r22, 0x0125
     a12:	70 91 26 01 	lds	r23, 0x0126
     a16:	80 91 0b 01 	lds	r24, 0x010B
     a1a:	90 91 0c 01 	lds	r25, 0x010C
     a1e:	a0 91 0d 01 	lds	r26, 0x010D
     a22:	b0 91 0e 01 	lds	r27, 0x010E
     a26:	48 17       	cp	r20, r24
     a28:	59 07       	cpc	r21, r25
     a2a:	6a 07       	cpc	r22, r26
     a2c:	7b 07       	cpc	r23, r27
     a2e:	5c f0       	brlt	.+22     	; 0xa46 <main+0x4d0>
     a30:	80 91 1b 01 	lds	r24, 0x011B
     a34:	81 11       	cpse	r24, r1
     a36:	07 c0       	rjmp	.+14     	; 0xa46 <main+0x4d0>
     a38:	80 91 0f 01 	lds	r24, 0x010F
     a3c:	88 23       	and	r24, r24
     a3e:	19 f0       	breq	.+6      	; 0xa46 <main+0x4d0>
// 				nextOrder = ACTIVATE_LASER;
// 				continue;
				isPositioning = true;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	80 93 1b 01 	sts	0x011B, r24

			
			
		
			// If the Left line sensor detects tape and we haven't started rotating, turn right
			if((tapeSensor1 == 1) && !backing){ 
     a46:	80 91 3e 01 	lds	r24, 0x013E
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	09 f0       	breq	.+2      	; 0xa50 <main+0x4da>
     a4e:	b3 c0       	rjmp	.+358    	; 0xbb6 <main+0x640>
     a50:	80 91 2e 01 	lds	r24, 0x012E
     a54:	81 11       	cpse	r24, r1
     a56:	c9 c0       	rjmp	.+402    	; 0xbea <main+0x674>
     a58:	a7 c0       	rjmp	.+334    	; 0xba8 <main+0x632>
				continue;

			}
		
			// If the Right line sensor detects tape and we havn't startet rotating, turn left
			if((tapeSensor2 == 1) && !backing){
     a5a:	80 91 2e 01 	lds	r24, 0x012E
     a5e:	88 23       	and	r24, r24
     a60:	09 f4       	brne	.+2      	; 0xa64 <main+0x4ee>
     a62:	ae c0       	rjmp	.+348    	; 0xbc0 <main+0x64a>
				nextOrder = MOVE_BACKWARDS;
				continue;
			}
		
			if (backing) {
				if(BACKWARDS_TIMER_CTR >= timeToReachOneHundredth){
     a64:	86 b5       	in	r24, 0x26	; 38
     a66:	84 3b       	cpi	r24, 0xB4	; 180
     a68:	08 f4       	brcc	.+2      	; 0xa6c <main+0x4f6>
     a6a:	4d c0       	rjmp	.+154    	; 0xb06 <main+0x590>
					BACKWARDS_TIMER_CTR = 0;
     a6c:	16 bc       	out	0x26, r1	; 38
					backing_ctr++;
     a6e:	80 91 2a 01 	lds	r24, 0x012A
     a72:	90 91 2b 01 	lds	r25, 0x012B
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	90 93 2b 01 	sts	0x012B, r25
     a7c:	80 93 2a 01 	sts	0x012A, r24
					
					if (backing_ctr >= 50) {
     a80:	c2 97       	sbiw	r24, 0x32	; 50
     a82:	0c f4       	brge	.+2      	; 0xa86 <main+0x510>
     a84:	40 c0       	rjmp	.+128    	; 0xb06 <main+0x590>
						backing = false;
     a86:	10 92 2e 01 	sts	0x012E, r1
						StopBackwardsTimer();
     a8a:	cf dc       	rcall	.-1634   	; 0x42a <_Z18StopBackwardsTimerv>
						
						if (leftTapeHit) {
     a8c:	80 91 2d 01 	lds	r24, 0x012D
     a90:	88 23       	and	r24, r24
     a92:	d9 f0       	breq	.+54     	; 0xaca <main+0x554>
							leftTapeHit = false;
     a94:	10 92 2d 01 	sts	0x012D, r1
							Rotate(45000 + (-30000 + (rand()%60)*1000), false);
     a98:	48 d3       	rcall	.+1680   	; 0x112a <rand>
     a9a:	b6 01       	movw	r22, r12
     a9c:	d8 d2       	rcall	.+1456   	; 0x104e <__divmodhi4>
     a9e:	8e 9d       	mul	r24, r14
     aa0:	b0 01       	movw	r22, r0
     aa2:	8f 9d       	mul	r24, r15
     aa4:	70 0d       	add	r23, r0
     aa6:	9e 9d       	mul	r25, r14
     aa8:	70 0d       	add	r23, r0
     aaa:	11 24       	eor	r1, r1
     aac:	60 53       	subi	r22, 0x30	; 48
     aae:	75 47       	sbci	r23, 0x75	; 117
     ab0:	cb 01       	movw	r24, r22
     ab2:	77 0f       	add	r23, r23
     ab4:	aa 0b       	sbc	r26, r26
     ab6:	bb 0b       	sbc	r27, r27
     ab8:	bc 01       	movw	r22, r24
     aba:	cd 01       	movw	r24, r26
     abc:	68 53       	subi	r22, 0x38	; 56
     abe:	70 45       	sbci	r23, 0x50	; 80
     ac0:	8f 4f       	sbci	r24, 0xFF	; 255
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	ff db       	rcall	.-2050   	; 0x2c6 <_Z6Rotatelb>
     ac8:	1e c0       	rjmp	.+60     	; 0xb06 <main+0x590>
						}
						else if (rightTapeHit) {
     aca:	80 91 2c 01 	lds	r24, 0x012C
     ace:	88 23       	and	r24, r24
     ad0:	d1 f0       	breq	.+52     	; 0xb06 <main+0x590>
							rightTapeHit = false;
     ad2:	10 92 2c 01 	sts	0x012C, r1
							Rotate(60000 + (-30000 + (rand()%60)*1000), true);
     ad6:	29 d3       	rcall	.+1618   	; 0x112a <rand>
     ad8:	b6 01       	movw	r22, r12
     ada:	b9 d2       	rcall	.+1394   	; 0x104e <__divmodhi4>
     adc:	8e 9d       	mul	r24, r14
     ade:	b0 01       	movw	r22, r0
     ae0:	8f 9d       	mul	r24, r15
     ae2:	70 0d       	add	r23, r0
     ae4:	9e 9d       	mul	r25, r14
     ae6:	70 0d       	add	r23, r0
     ae8:	11 24       	eor	r1, r1
     aea:	60 53       	subi	r22, 0x30	; 48
     aec:	75 47       	sbci	r23, 0x75	; 117
     aee:	cb 01       	movw	r24, r22
     af0:	77 0f       	add	r23, r23
     af2:	aa 0b       	sbc	r26, r26
     af4:	bb 0b       	sbc	r27, r27
     af6:	bc 01       	movw	r22, r24
     af8:	cd 01       	movw	r24, r26
     afa:	60 5a       	subi	r22, 0xA0	; 160
     afc:	75 41       	sbci	r23, 0x15	; 21
     afe:	8f 4f       	sbci	r24, 0xFF	; 255
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	41 e0       	ldi	r20, 0x01	; 1
     b04:	e0 db       	rcall	.-2112   	; 0x2c6 <_Z6Rotatelb>
					
				}
			}
			
			// If we are rotating
			if (rotating) {
     b06:	80 91 33 01 	lds	r24, 0x0133
     b0a:	88 23       	and	r24, r24
     b0c:	19 f0       	breq	.+6      	; 0xb14 <main+0x59e>
				if (UpdateRotation()){
     b0e:	0d dc       	rcall	.-2022   	; 0x32a <_Z14UpdateRotationv>
     b10:	81 11       	cpse	r24, r1
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <main+0x5a6>
					continue;
				}
			}
			
			if (isPositioning) {
     b14:	80 91 1b 01 	lds	r24, 0x011B
     b18:	81 11       	cpse	r24, r1
				positioning();
     b1a:	f5 dc       	rcall	.-1558   	; 0x506 <_Z11positioningv>
	//health = 1;
	//WeAreHit();
	
	
	
    while(!dead)
     b1c:	80 91 35 01 	lds	r24, 0x0135
     b20:	88 23       	and	r24, r24
     b22:	09 f4       	brne	.+2      	; 0xb26 <main+0x5b0>
     b24:	78 cd       	rjmp	.-1296   	; 0x616 <main+0xa0>
	//#############################
	//#### DEATH CODE #############
	//#############################
	
	// Reset the laser timers count variable and start the laser timer (used to get a blinking LEDs)
	StartLaserTimer();
     b26:	8d dc       	rcall	.-1766   	; 0x442 <_Z15StartLaserTimerv>
	// This loop blinks the LEDs to show that we are dead
	while (dead) {
		SendUART();
		if (LASER_TIMER_COUNTER >= 2250) {
     b28:	c4 e8       	ldi	r28, 0x84	; 132
     b2a:	d0 e0       	ldi	r29, 0x00	; 0
			LASER_TIMER_COUNTER = 0;
			coolDownCTR++;
			nextOrder = DECREMENT_LED_LIVES;
     b2c:	19 e0       	ldi	r17, 0x09	; 9
			if (coolDownCTR == 4) {
				nextOrder = RESET_SE;
     b2e:	04 e1       	ldi	r16, 0x14	; 20
	//#############################
	
	// Reset the laser timers count variable and start the laser timer (used to get a blinking LEDs)
	StartLaserTimer();
	// This loop blinks the LEDs to show that we are dead
	while (dead) {
     b30:	1b c0       	rjmp	.+54     	; 0xb68 <main+0x5f2>
		SendUART();
     b32:	db da       	rcall	.-2634   	; 0xea <_Z8SendUARTv>
		if (LASER_TIMER_COUNTER >= 2250) {
     b34:	88 81       	ld	r24, Y
     b36:	99 81       	ldd	r25, Y+1	; 0x01
     b38:	8a 3c       	cpi	r24, 0xCA	; 202
     b3a:	98 40       	sbci	r25, 0x08	; 8
     b3c:	a8 f0       	brcs	.+42     	; 0xb68 <main+0x5f2>
			LASER_TIMER_COUNTER = 0;
     b3e:	19 82       	std	Y+1, r1	; 0x01
     b40:	18 82       	st	Y, r1
			coolDownCTR++;
     b42:	80 91 28 01 	lds	r24, 0x0128
     b46:	90 91 29 01 	lds	r25, 0x0129
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	90 93 29 01 	sts	0x0129, r25
     b50:	80 93 28 01 	sts	0x0128, r24
			nextOrder = DECREMENT_LED_LIVES;
     b54:	10 93 36 01 	sts	0x0136, r17
			if (coolDownCTR == 4) {
     b58:	04 97       	sbiw	r24, 0x04	; 4
     b5a:	31 f4       	brne	.+12     	; 0xb68 <main+0x5f2>
				nextOrder = RESET_SE;
     b5c:	00 93 36 01 	sts	0x0136, r16
				coolDownCTR = 0;
     b60:	10 92 29 01 	sts	0x0129, r1
     b64:	10 92 28 01 	sts	0x0128, r1
	//#############################
	
	// Reset the laser timers count variable and start the laser timer (used to get a blinking LEDs)
	StartLaserTimer();
	// This loop blinks the LEDs to show that we are dead
	while (dead) {
     b68:	80 91 35 01 	lds	r24, 0x0135
     b6c:	81 11       	cpse	r24, r1
     b6e:	e1 cf       	rjmp	.-62     	; 0xb32 <main+0x5bc>
     b70:	42 c0       	rjmp	.+132    	; 0xbf6 <main+0x680>
				continue;

			}
			
			// If the Right line sensor detects tape and we havn't startet rotating, turn left
			if((tapeSensor2 == 1) && !rotating && !backing){
     b72:	80 91 3d 01 	lds	r24, 0x013D
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	79 f4       	brne	.+30     	; 0xb98 <main+0x622>
     b7a:	3e ce       	rjmp	.-900    	; 0x7f8 <main+0x282>
			}
			
			
			// If the Left line sensor detects tape and we havn't startet rotating, turn right
			if((tapeSensor1 == 1) && !rotating && !backing){
				leftTapeHit = true;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	80 93 2d 01 	sts	0x012D, r24
				StartBackwardsTimer();
     b82:	48 dc       	rcall	.-1904   	; 0x414 <_Z19StartBackwardsTimerv>
				nextOrder = MOVE_BACKWARDS;
     b84:	b0 92 36 01 	sts	0x0136, r11
				continue;
     b88:	c9 cf       	rjmp	.-110    	; 0xb1c <main+0x5a6>

			}
			
			// If the Right line sensor detects tape and we havn't startet rotating, turn left
			if((tapeSensor2 == 1) && !rotating && !backing){
				rightTapeHit = true;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	80 93 2c 01 	sts	0x012C, r24
				StartBackwardsTimer();
     b90:	41 dc       	rcall	.-1918   	; 0x414 <_Z19StartBackwardsTimerv>
				nextOrder = MOVE_BACKWARDS;
     b92:	b0 92 36 01 	sts	0x0136, r11
				continue;
     b96:	c2 cf       	rjmp	.-124    	; 0xb1c <main+0x5a6>
			}
			
			// Backing stuff
			if (backing) {
     b98:	80 91 2e 01 	lds	r24, 0x012E
     b9c:	88 23       	and	r24, r24
     b9e:	09 f4       	brne	.+2      	; 0xba2 <main+0x62c>
     ba0:	5f ce       	rjmp	.-834    	; 0x860 <main+0x2ea>
     ba2:	33 ce       	rjmp	.-922    	; 0x80a <main+0x294>
			
			// Used to see if we are rotating and updates rotation data and checks for opponents
			if (rotating) {
				UpdateRotation();
				if (ultraSonicSensor1 <= 12 && signatureConfirmed) {
					Shoot();
     ba4:	56 dc       	rcall	.-1876   	; 0x452 <_Z5Shootv>
     ba6:	ba cf       	rjmp	.-140    	; 0xb1c <main+0x5a6>
			
			
		
			// If the Left line sensor detects tape and we haven't started rotating, turn right
			if((tapeSensor1 == 1) && !backing){ 
				leftTapeHit = true;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 2d 01 	sts	0x012D, r24
				StartBackwardsTimer();
     bae:	32 dc       	rcall	.-1948   	; 0x414 <_Z19StartBackwardsTimerv>
				nextOrder = MOVE_BACKWARDS;
     bb0:	b0 92 36 01 	sts	0x0136, r11
				continue;
     bb4:	b3 cf       	rjmp	.-154    	; 0xb1c <main+0x5a6>

			}
		
			// If the Right line sensor detects tape and we havn't startet rotating, turn left
			if((tapeSensor2 == 1) && !backing){
     bb6:	80 91 3d 01 	lds	r24, 0x013D
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	41 f4       	brne	.+16     	; 0xbce <main+0x658>
     bbe:	4d cf       	rjmp	.-358    	; 0xa5a <main+0x4e4>
				rightTapeHit = true; 
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 93 2c 01 	sts	0x012C, r24
				StartBackwardsTimer();
     bc6:	26 dc       	rcall	.-1972   	; 0x414 <_Z19StartBackwardsTimerv>
				nextOrder = MOVE_BACKWARDS;
     bc8:	b0 92 36 01 	sts	0x0136, r11
				continue;
     bcc:	a7 cf       	rjmp	.-178    	; 0xb1c <main+0x5a6>
			}
		
			if (backing) {
     bce:	80 91 2e 01 	lds	r24, 0x012E
     bd2:	88 23       	and	r24, r24
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <main+0x662>
     bd6:	97 cf       	rjmp	.-210    	; 0xb06 <main+0x590>
     bd8:	45 cf       	rjmp	.-374    	; 0xa64 <main+0x4ee>
				continue;

			}
			
			// If the Right line sensor detects tape and we havn't startet rotating, turn left
			if((tapeSensor2 == 1) && !rotating && !backing){
     bda:	80 91 3d 01 	lds	r24, 0x013D
     bde:	dc cf       	rjmp	.-72     	; 0xb98 <main+0x622>
     be0:	80 91 3d 01 	lds	r24, 0x013D
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	c1 f6       	brne	.-80     	; 0xb98 <main+0x622>
     be8:	0b ce       	rjmp	.-1002   	; 0x800 <main+0x28a>
				continue;

			}
		
			// If the Right line sensor detects tape and we havn't startet rotating, turn left
			if((tapeSensor2 == 1) && !backing){
     bea:	80 91 3d 01 	lds	r24, 0x013D
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <main+0x67e>
     bf2:	38 cf       	rjmp	.-400    	; 0xa64 <main+0x4ee>
     bf4:	32 cf       	rjmp	.-412    	; 0xa5a <main+0x4e4>
				coolDownCTR = 0;
			}
		}
	}
	
}
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	bf 90       	pop	r11
     c0c:	af 90       	pop	r10
     c0e:	9f 90       	pop	r9
     c10:	8f 90       	pop	r8
     c12:	7f 90       	pop	r7
     c14:	6f 90       	pop	r6
     c16:	5f 90       	pop	r5
     c18:	4f 90       	pop	r4
     c1a:	3f 90       	pop	r3
     c1c:	2f 90       	pop	r2
     c1e:	08 95       	ret

00000c20 <__subsf3>:
     c20:	50 58       	subi	r21, 0x80	; 128

00000c22 <__addsf3>:
     c22:	bb 27       	eor	r27, r27
     c24:	aa 27       	eor	r26, r26
     c26:	0e d0       	rcall	.+28     	; 0xc44 <__addsf3x>
     c28:	4d c1       	rjmp	.+666    	; 0xec4 <__fp_round>
     c2a:	3e d1       	rcall	.+636    	; 0xea8 <__fp_pscA>
     c2c:	30 f0       	brcs	.+12     	; 0xc3a <__addsf3+0x18>
     c2e:	43 d1       	rcall	.+646    	; 0xeb6 <__fp_pscB>
     c30:	20 f0       	brcs	.+8      	; 0xc3a <__addsf3+0x18>
     c32:	31 f4       	brne	.+12     	; 0xc40 <__addsf3+0x1e>
     c34:	9f 3f       	cpi	r25, 0xFF	; 255
     c36:	11 f4       	brne	.+4      	; 0xc3c <__addsf3+0x1a>
     c38:	1e f4       	brtc	.+6      	; 0xc40 <__addsf3+0x1e>
     c3a:	33 c1       	rjmp	.+614    	; 0xea2 <__fp_nan>
     c3c:	0e f4       	brtc	.+2      	; 0xc40 <__addsf3+0x1e>
     c3e:	e0 95       	com	r30
     c40:	e7 fb       	bst	r30, 7
     c42:	29 c1       	rjmp	.+594    	; 0xe96 <__fp_inf>

00000c44 <__addsf3x>:
     c44:	e9 2f       	mov	r30, r25
     c46:	4f d1       	rcall	.+670    	; 0xee6 <__fp_split3>
     c48:	80 f3       	brcs	.-32     	; 0xc2a <__addsf3+0x8>
     c4a:	ba 17       	cp	r27, r26
     c4c:	62 07       	cpc	r22, r18
     c4e:	73 07       	cpc	r23, r19
     c50:	84 07       	cpc	r24, r20
     c52:	95 07       	cpc	r25, r21
     c54:	18 f0       	brcs	.+6      	; 0xc5c <__addsf3x+0x18>
     c56:	71 f4       	brne	.+28     	; 0xc74 <__addsf3x+0x30>
     c58:	9e f5       	brtc	.+102    	; 0xcc0 <__addsf3x+0x7c>
     c5a:	67 c1       	rjmp	.+718    	; 0xf2a <__fp_zero>
     c5c:	0e f4       	brtc	.+2      	; 0xc60 <__addsf3x+0x1c>
     c5e:	e0 95       	com	r30
     c60:	0b 2e       	mov	r0, r27
     c62:	ba 2f       	mov	r27, r26
     c64:	a0 2d       	mov	r26, r0
     c66:	0b 01       	movw	r0, r22
     c68:	b9 01       	movw	r22, r18
     c6a:	90 01       	movw	r18, r0
     c6c:	0c 01       	movw	r0, r24
     c6e:	ca 01       	movw	r24, r20
     c70:	a0 01       	movw	r20, r0
     c72:	11 24       	eor	r1, r1
     c74:	ff 27       	eor	r31, r31
     c76:	59 1b       	sub	r21, r25
     c78:	99 f0       	breq	.+38     	; 0xca0 <__addsf3x+0x5c>
     c7a:	59 3f       	cpi	r21, 0xF9	; 249
     c7c:	50 f4       	brcc	.+20     	; 0xc92 <__addsf3x+0x4e>
     c7e:	50 3e       	cpi	r21, 0xE0	; 224
     c80:	68 f1       	brcs	.+90     	; 0xcdc <__addsf3x+0x98>
     c82:	1a 16       	cp	r1, r26
     c84:	f0 40       	sbci	r31, 0x00	; 0
     c86:	a2 2f       	mov	r26, r18
     c88:	23 2f       	mov	r18, r19
     c8a:	34 2f       	mov	r19, r20
     c8c:	44 27       	eor	r20, r20
     c8e:	58 5f       	subi	r21, 0xF8	; 248
     c90:	f3 cf       	rjmp	.-26     	; 0xc78 <__addsf3x+0x34>
     c92:	46 95       	lsr	r20
     c94:	37 95       	ror	r19
     c96:	27 95       	ror	r18
     c98:	a7 95       	ror	r26
     c9a:	f0 40       	sbci	r31, 0x00	; 0
     c9c:	53 95       	inc	r21
     c9e:	c9 f7       	brne	.-14     	; 0xc92 <__addsf3x+0x4e>
     ca0:	7e f4       	brtc	.+30     	; 0xcc0 <__addsf3x+0x7c>
     ca2:	1f 16       	cp	r1, r31
     ca4:	ba 0b       	sbc	r27, r26
     ca6:	62 0b       	sbc	r22, r18
     ca8:	73 0b       	sbc	r23, r19
     caa:	84 0b       	sbc	r24, r20
     cac:	ba f0       	brmi	.+46     	; 0xcdc <__addsf3x+0x98>
     cae:	91 50       	subi	r25, 0x01	; 1
     cb0:	a1 f0       	breq	.+40     	; 0xcda <__addsf3x+0x96>
     cb2:	ff 0f       	add	r31, r31
     cb4:	bb 1f       	adc	r27, r27
     cb6:	66 1f       	adc	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	88 1f       	adc	r24, r24
     cbc:	c2 f7       	brpl	.-16     	; 0xcae <__addsf3x+0x6a>
     cbe:	0e c0       	rjmp	.+28     	; 0xcdc <__addsf3x+0x98>
     cc0:	ba 0f       	add	r27, r26
     cc2:	62 1f       	adc	r22, r18
     cc4:	73 1f       	adc	r23, r19
     cc6:	84 1f       	adc	r24, r20
     cc8:	48 f4       	brcc	.+18     	; 0xcdc <__addsf3x+0x98>
     cca:	87 95       	ror	r24
     ccc:	77 95       	ror	r23
     cce:	67 95       	ror	r22
     cd0:	b7 95       	ror	r27
     cd2:	f7 95       	ror	r31
     cd4:	9e 3f       	cpi	r25, 0xFE	; 254
     cd6:	08 f0       	brcs	.+2      	; 0xcda <__addsf3x+0x96>
     cd8:	b3 cf       	rjmp	.-154    	; 0xc40 <__addsf3+0x1e>
     cda:	93 95       	inc	r25
     cdc:	88 0f       	add	r24, r24
     cde:	08 f0       	brcs	.+2      	; 0xce2 <__addsf3x+0x9e>
     ce0:	99 27       	eor	r25, r25
     ce2:	ee 0f       	add	r30, r30
     ce4:	97 95       	ror	r25
     ce6:	87 95       	ror	r24
     ce8:	08 95       	ret

00000cea <__divsf3>:
     cea:	0c d0       	rcall	.+24     	; 0xd04 <__divsf3x>
     cec:	eb c0       	rjmp	.+470    	; 0xec4 <__fp_round>
     cee:	e3 d0       	rcall	.+454    	; 0xeb6 <__fp_pscB>
     cf0:	40 f0       	brcs	.+16     	; 0xd02 <__divsf3+0x18>
     cf2:	da d0       	rcall	.+436    	; 0xea8 <__fp_pscA>
     cf4:	30 f0       	brcs	.+12     	; 0xd02 <__divsf3+0x18>
     cf6:	21 f4       	brne	.+8      	; 0xd00 <__divsf3+0x16>
     cf8:	5f 3f       	cpi	r21, 0xFF	; 255
     cfa:	19 f0       	breq	.+6      	; 0xd02 <__divsf3+0x18>
     cfc:	cc c0       	rjmp	.+408    	; 0xe96 <__fp_inf>
     cfe:	51 11       	cpse	r21, r1
     d00:	15 c1       	rjmp	.+554    	; 0xf2c <__fp_szero>
     d02:	cf c0       	rjmp	.+414    	; 0xea2 <__fp_nan>

00000d04 <__divsf3x>:
     d04:	f0 d0       	rcall	.+480    	; 0xee6 <__fp_split3>
     d06:	98 f3       	brcs	.-26     	; 0xcee <__divsf3+0x4>

00000d08 <__divsf3_pse>:
     d08:	99 23       	and	r25, r25
     d0a:	c9 f3       	breq	.-14     	; 0xcfe <__divsf3+0x14>
     d0c:	55 23       	and	r21, r21
     d0e:	b1 f3       	breq	.-20     	; 0xcfc <__divsf3+0x12>
     d10:	95 1b       	sub	r25, r21
     d12:	55 0b       	sbc	r21, r21
     d14:	bb 27       	eor	r27, r27
     d16:	aa 27       	eor	r26, r26
     d18:	62 17       	cp	r22, r18
     d1a:	73 07       	cpc	r23, r19
     d1c:	84 07       	cpc	r24, r20
     d1e:	38 f0       	brcs	.+14     	; 0xd2e <__divsf3_pse+0x26>
     d20:	9f 5f       	subi	r25, 0xFF	; 255
     d22:	5f 4f       	sbci	r21, 0xFF	; 255
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	44 1f       	adc	r20, r20
     d2a:	aa 1f       	adc	r26, r26
     d2c:	a9 f3       	breq	.-22     	; 0xd18 <__divsf3_pse+0x10>
     d2e:	33 d0       	rcall	.+102    	; 0xd96 <__divsf3_pse+0x8e>
     d30:	0e 2e       	mov	r0, r30
     d32:	3a f0       	brmi	.+14     	; 0xd42 <__divsf3_pse+0x3a>
     d34:	e0 e8       	ldi	r30, 0x80	; 128
     d36:	30 d0       	rcall	.+96     	; 0xd98 <__divsf3_pse+0x90>
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	50 40       	sbci	r21, 0x00	; 0
     d3c:	e6 95       	lsr	r30
     d3e:	00 1c       	adc	r0, r0
     d40:	ca f7       	brpl	.-14     	; 0xd34 <__divsf3_pse+0x2c>
     d42:	29 d0       	rcall	.+82     	; 0xd96 <__divsf3_pse+0x8e>
     d44:	fe 2f       	mov	r31, r30
     d46:	27 d0       	rcall	.+78     	; 0xd96 <__divsf3_pse+0x8e>
     d48:	66 0f       	add	r22, r22
     d4a:	77 1f       	adc	r23, r23
     d4c:	88 1f       	adc	r24, r24
     d4e:	bb 1f       	adc	r27, r27
     d50:	26 17       	cp	r18, r22
     d52:	37 07       	cpc	r19, r23
     d54:	48 07       	cpc	r20, r24
     d56:	ab 07       	cpc	r26, r27
     d58:	b0 e8       	ldi	r27, 0x80	; 128
     d5a:	09 f0       	breq	.+2      	; 0xd5e <__divsf3_pse+0x56>
     d5c:	bb 0b       	sbc	r27, r27
     d5e:	80 2d       	mov	r24, r0
     d60:	bf 01       	movw	r22, r30
     d62:	ff 27       	eor	r31, r31
     d64:	93 58       	subi	r25, 0x83	; 131
     d66:	5f 4f       	sbci	r21, 0xFF	; 255
     d68:	2a f0       	brmi	.+10     	; 0xd74 <__divsf3_pse+0x6c>
     d6a:	9e 3f       	cpi	r25, 0xFE	; 254
     d6c:	51 05       	cpc	r21, r1
     d6e:	68 f0       	brcs	.+26     	; 0xd8a <__divsf3_pse+0x82>
     d70:	92 c0       	rjmp	.+292    	; 0xe96 <__fp_inf>
     d72:	dc c0       	rjmp	.+440    	; 0xf2c <__fp_szero>
     d74:	5f 3f       	cpi	r21, 0xFF	; 255
     d76:	ec f3       	brlt	.-6      	; 0xd72 <__divsf3_pse+0x6a>
     d78:	98 3e       	cpi	r25, 0xE8	; 232
     d7a:	dc f3       	brlt	.-10     	; 0xd72 <__divsf3_pse+0x6a>
     d7c:	86 95       	lsr	r24
     d7e:	77 95       	ror	r23
     d80:	67 95       	ror	r22
     d82:	b7 95       	ror	r27
     d84:	f7 95       	ror	r31
     d86:	9f 5f       	subi	r25, 0xFF	; 255
     d88:	c9 f7       	brne	.-14     	; 0xd7c <__divsf3_pse+0x74>
     d8a:	88 0f       	add	r24, r24
     d8c:	91 1d       	adc	r25, r1
     d8e:	96 95       	lsr	r25
     d90:	87 95       	ror	r24
     d92:	97 f9       	bld	r25, 7
     d94:	08 95       	ret
     d96:	e1 e0       	ldi	r30, 0x01	; 1
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	bb 1f       	adc	r27, r27
     da0:	62 17       	cp	r22, r18
     da2:	73 07       	cpc	r23, r19
     da4:	84 07       	cpc	r24, r20
     da6:	ba 07       	cpc	r27, r26
     da8:	20 f0       	brcs	.+8      	; 0xdb2 <__divsf3_pse+0xaa>
     daa:	62 1b       	sub	r22, r18
     dac:	73 0b       	sbc	r23, r19
     dae:	84 0b       	sbc	r24, r20
     db0:	ba 0b       	sbc	r27, r26
     db2:	ee 1f       	adc	r30, r30
     db4:	88 f7       	brcc	.-30     	; 0xd98 <__divsf3_pse+0x90>
     db6:	e0 95       	com	r30
     db8:	08 95       	ret

00000dba <__fixsfsi>:
     dba:	04 d0       	rcall	.+8      	; 0xdc4 <__fixunssfsi>
     dbc:	68 94       	set
     dbe:	b1 11       	cpse	r27, r1
     dc0:	b5 c0       	rjmp	.+362    	; 0xf2c <__fp_szero>
     dc2:	08 95       	ret

00000dc4 <__fixunssfsi>:
     dc4:	98 d0       	rcall	.+304    	; 0xef6 <__fp_splitA>
     dc6:	88 f0       	brcs	.+34     	; 0xdea <__fixunssfsi+0x26>
     dc8:	9f 57       	subi	r25, 0x7F	; 127
     dca:	90 f0       	brcs	.+36     	; 0xdf0 <__fixunssfsi+0x2c>
     dcc:	b9 2f       	mov	r27, r25
     dce:	99 27       	eor	r25, r25
     dd0:	b7 51       	subi	r27, 0x17	; 23
     dd2:	a0 f0       	brcs	.+40     	; 0xdfc <__fixunssfsi+0x38>
     dd4:	d1 f0       	breq	.+52     	; 0xe0a <__fixunssfsi+0x46>
     dd6:	66 0f       	add	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	1a f0       	brmi	.+6      	; 0xde6 <__fixunssfsi+0x22>
     de0:	ba 95       	dec	r27
     de2:	c9 f7       	brne	.-14     	; 0xdd6 <__fixunssfsi+0x12>
     de4:	12 c0       	rjmp	.+36     	; 0xe0a <__fixunssfsi+0x46>
     de6:	b1 30       	cpi	r27, 0x01	; 1
     de8:	81 f0       	breq	.+32     	; 0xe0a <__fixunssfsi+0x46>
     dea:	9f d0       	rcall	.+318    	; 0xf2a <__fp_zero>
     dec:	b1 e0       	ldi	r27, 0x01	; 1
     dee:	08 95       	ret
     df0:	9c c0       	rjmp	.+312    	; 0xf2a <__fp_zero>
     df2:	67 2f       	mov	r22, r23
     df4:	78 2f       	mov	r23, r24
     df6:	88 27       	eor	r24, r24
     df8:	b8 5f       	subi	r27, 0xF8	; 248
     dfa:	39 f0       	breq	.+14     	; 0xe0a <__fixunssfsi+0x46>
     dfc:	b9 3f       	cpi	r27, 0xF9	; 249
     dfe:	cc f3       	brlt	.-14     	; 0xdf2 <__fixunssfsi+0x2e>
     e00:	86 95       	lsr	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	b3 95       	inc	r27
     e08:	d9 f7       	brne	.-10     	; 0xe00 <__fixunssfsi+0x3c>
     e0a:	3e f4       	brtc	.+14     	; 0xe1a <__fixunssfsi+0x56>
     e0c:	90 95       	com	r25
     e0e:	80 95       	com	r24
     e10:	70 95       	com	r23
     e12:	61 95       	neg	r22
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	8f 4f       	sbci	r24, 0xFF	; 255
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	08 95       	ret

00000e1c <__floatunsisf>:
     e1c:	e8 94       	clt
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <__floatsisf+0x12>

00000e20 <__floatsisf>:
     e20:	97 fb       	bst	r25, 7
     e22:	3e f4       	brtc	.+14     	; 0xe32 <__floatsisf+0x12>
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	99 23       	and	r25, r25
     e34:	a9 f0       	breq	.+42     	; 0xe60 <__floatsisf+0x40>
     e36:	f9 2f       	mov	r31, r25
     e38:	96 e9       	ldi	r25, 0x96	; 150
     e3a:	bb 27       	eor	r27, r27
     e3c:	93 95       	inc	r25
     e3e:	f6 95       	lsr	r31
     e40:	87 95       	ror	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b7 95       	ror	r27
     e48:	f1 11       	cpse	r31, r1
     e4a:	f8 cf       	rjmp	.-16     	; 0xe3c <__floatsisf+0x1c>
     e4c:	fa f4       	brpl	.+62     	; 0xe8c <__floatsisf+0x6c>
     e4e:	bb 0f       	add	r27, r27
     e50:	11 f4       	brne	.+4      	; 0xe56 <__floatsisf+0x36>
     e52:	60 ff       	sbrs	r22, 0
     e54:	1b c0       	rjmp	.+54     	; 0xe8c <__floatsisf+0x6c>
     e56:	6f 5f       	subi	r22, 0xFF	; 255
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f 4f       	sbci	r24, 0xFF	; 255
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	16 c0       	rjmp	.+44     	; 0xe8c <__floatsisf+0x6c>
     e60:	88 23       	and	r24, r24
     e62:	11 f0       	breq	.+4      	; 0xe68 <__floatsisf+0x48>
     e64:	96 e9       	ldi	r25, 0x96	; 150
     e66:	11 c0       	rjmp	.+34     	; 0xe8a <__floatsisf+0x6a>
     e68:	77 23       	and	r23, r23
     e6a:	21 f0       	breq	.+8      	; 0xe74 <__floatsisf+0x54>
     e6c:	9e e8       	ldi	r25, 0x8E	; 142
     e6e:	87 2f       	mov	r24, r23
     e70:	76 2f       	mov	r23, r22
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <__floatsisf+0x5e>
     e74:	66 23       	and	r22, r22
     e76:	71 f0       	breq	.+28     	; 0xe94 <__floatsisf+0x74>
     e78:	96 e8       	ldi	r25, 0x86	; 134
     e7a:	86 2f       	mov	r24, r22
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	2a f0       	brmi	.+10     	; 0xe8c <__floatsisf+0x6c>
     e82:	9a 95       	dec	r25
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	da f7       	brpl	.-10     	; 0xe82 <__floatsisf+0x62>
     e8c:	88 0f       	add	r24, r24
     e8e:	96 95       	lsr	r25
     e90:	87 95       	ror	r24
     e92:	97 f9       	bld	r25, 7
     e94:	08 95       	ret

00000e96 <__fp_inf>:
     e96:	97 f9       	bld	r25, 7
     e98:	9f 67       	ori	r25, 0x7F	; 127
     e9a:	80 e8       	ldi	r24, 0x80	; 128
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	08 95       	ret

00000ea2 <__fp_nan>:
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
     ea4:	80 ec       	ldi	r24, 0xC0	; 192
     ea6:	08 95       	ret

00000ea8 <__fp_pscA>:
     ea8:	00 24       	eor	r0, r0
     eaa:	0a 94       	dec	r0
     eac:	16 16       	cp	r1, r22
     eae:	17 06       	cpc	r1, r23
     eb0:	18 06       	cpc	r1, r24
     eb2:	09 06       	cpc	r0, r25
     eb4:	08 95       	ret

00000eb6 <__fp_pscB>:
     eb6:	00 24       	eor	r0, r0
     eb8:	0a 94       	dec	r0
     eba:	12 16       	cp	r1, r18
     ebc:	13 06       	cpc	r1, r19
     ebe:	14 06       	cpc	r1, r20
     ec0:	05 06       	cpc	r0, r21
     ec2:	08 95       	ret

00000ec4 <__fp_round>:
     ec4:	09 2e       	mov	r0, r25
     ec6:	03 94       	inc	r0
     ec8:	00 0c       	add	r0, r0
     eca:	11 f4       	brne	.+4      	; 0xed0 <__fp_round+0xc>
     ecc:	88 23       	and	r24, r24
     ece:	52 f0       	brmi	.+20     	; 0xee4 <__fp_round+0x20>
     ed0:	bb 0f       	add	r27, r27
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fp_round+0x20>
     ed4:	bf 2b       	or	r27, r31
     ed6:	11 f4       	brne	.+4      	; 0xedc <__fp_round+0x18>
     ed8:	60 ff       	sbrs	r22, 0
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <__fp_round+0x20>
     edc:	6f 5f       	subi	r22, 0xFF	; 255
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
     ee0:	8f 4f       	sbci	r24, 0xFF	; 255
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	08 95       	ret

00000ee6 <__fp_split3>:
     ee6:	57 fd       	sbrc	r21, 7
     ee8:	90 58       	subi	r25, 0x80	; 128
     eea:	44 0f       	add	r20, r20
     eec:	55 1f       	adc	r21, r21
     eee:	59 f0       	breq	.+22     	; 0xf06 <__fp_splitA+0x10>
     ef0:	5f 3f       	cpi	r21, 0xFF	; 255
     ef2:	71 f0       	breq	.+28     	; 0xf10 <__fp_splitA+0x1a>
     ef4:	47 95       	ror	r20

00000ef6 <__fp_splitA>:
     ef6:	88 0f       	add	r24, r24
     ef8:	97 fb       	bst	r25, 7
     efa:	99 1f       	adc	r25, r25
     efc:	61 f0       	breq	.+24     	; 0xf16 <__fp_splitA+0x20>
     efe:	9f 3f       	cpi	r25, 0xFF	; 255
     f00:	79 f0       	breq	.+30     	; 0xf20 <__fp_splitA+0x2a>
     f02:	87 95       	ror	r24
     f04:	08 95       	ret
     f06:	12 16       	cp	r1, r18
     f08:	13 06       	cpc	r1, r19
     f0a:	14 06       	cpc	r1, r20
     f0c:	55 1f       	adc	r21, r21
     f0e:	f2 cf       	rjmp	.-28     	; 0xef4 <__fp_split3+0xe>
     f10:	46 95       	lsr	r20
     f12:	f1 df       	rcall	.-30     	; 0xef6 <__fp_splitA>
     f14:	08 c0       	rjmp	.+16     	; 0xf26 <__fp_splitA+0x30>
     f16:	16 16       	cp	r1, r22
     f18:	17 06       	cpc	r1, r23
     f1a:	18 06       	cpc	r1, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	f1 cf       	rjmp	.-30     	; 0xf02 <__fp_splitA+0xc>
     f20:	86 95       	lsr	r24
     f22:	71 05       	cpc	r23, r1
     f24:	61 05       	cpc	r22, r1
     f26:	08 94       	sec
     f28:	08 95       	ret

00000f2a <__fp_zero>:
     f2a:	e8 94       	clt

00000f2c <__fp_szero>:
     f2c:	bb 27       	eor	r27, r27
     f2e:	66 27       	eor	r22, r22
     f30:	77 27       	eor	r23, r23
     f32:	cb 01       	movw	r24, r22
     f34:	97 f9       	bld	r25, 7
     f36:	08 95       	ret

00000f38 <__gesf2>:
     f38:	66 d0       	rcall	.+204    	; 0x1006 <__fp_cmp>
     f3a:	08 f4       	brcc	.+2      	; 0xf3e <__gesf2+0x6>
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	08 95       	ret

00000f40 <__mulsf3>:
     f40:	0b d0       	rcall	.+22     	; 0xf58 <__mulsf3x>
     f42:	c0 cf       	rjmp	.-128    	; 0xec4 <__fp_round>
     f44:	b1 df       	rcall	.-158    	; 0xea8 <__fp_pscA>
     f46:	28 f0       	brcs	.+10     	; 0xf52 <__mulsf3+0x12>
     f48:	b6 df       	rcall	.-148    	; 0xeb6 <__fp_pscB>
     f4a:	18 f0       	brcs	.+6      	; 0xf52 <__mulsf3+0x12>
     f4c:	95 23       	and	r25, r21
     f4e:	09 f0       	breq	.+2      	; 0xf52 <__mulsf3+0x12>
     f50:	a2 cf       	rjmp	.-188    	; 0xe96 <__fp_inf>
     f52:	a7 cf       	rjmp	.-178    	; 0xea2 <__fp_nan>
     f54:	11 24       	eor	r1, r1
     f56:	ea cf       	rjmp	.-44     	; 0xf2c <__fp_szero>

00000f58 <__mulsf3x>:
     f58:	c6 df       	rcall	.-116    	; 0xee6 <__fp_split3>
     f5a:	a0 f3       	brcs	.-24     	; 0xf44 <__mulsf3+0x4>

00000f5c <__mulsf3_pse>:
     f5c:	95 9f       	mul	r25, r21
     f5e:	d1 f3       	breq	.-12     	; 0xf54 <__mulsf3+0x14>
     f60:	95 0f       	add	r25, r21
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	55 1f       	adc	r21, r21
     f66:	62 9f       	mul	r22, r18
     f68:	f0 01       	movw	r30, r0
     f6a:	72 9f       	mul	r23, r18
     f6c:	bb 27       	eor	r27, r27
     f6e:	f0 0d       	add	r31, r0
     f70:	b1 1d       	adc	r27, r1
     f72:	63 9f       	mul	r22, r19
     f74:	aa 27       	eor	r26, r26
     f76:	f0 0d       	add	r31, r0
     f78:	b1 1d       	adc	r27, r1
     f7a:	aa 1f       	adc	r26, r26
     f7c:	64 9f       	mul	r22, r20
     f7e:	66 27       	eor	r22, r22
     f80:	b0 0d       	add	r27, r0
     f82:	a1 1d       	adc	r26, r1
     f84:	66 1f       	adc	r22, r22
     f86:	82 9f       	mul	r24, r18
     f88:	22 27       	eor	r18, r18
     f8a:	b0 0d       	add	r27, r0
     f8c:	a1 1d       	adc	r26, r1
     f8e:	62 1f       	adc	r22, r18
     f90:	73 9f       	mul	r23, r19
     f92:	b0 0d       	add	r27, r0
     f94:	a1 1d       	adc	r26, r1
     f96:	62 1f       	adc	r22, r18
     f98:	83 9f       	mul	r24, r19
     f9a:	a0 0d       	add	r26, r0
     f9c:	61 1d       	adc	r22, r1
     f9e:	22 1f       	adc	r18, r18
     fa0:	74 9f       	mul	r23, r20
     fa2:	33 27       	eor	r19, r19
     fa4:	a0 0d       	add	r26, r0
     fa6:	61 1d       	adc	r22, r1
     fa8:	23 1f       	adc	r18, r19
     faa:	84 9f       	mul	r24, r20
     fac:	60 0d       	add	r22, r0
     fae:	21 1d       	adc	r18, r1
     fb0:	82 2f       	mov	r24, r18
     fb2:	76 2f       	mov	r23, r22
     fb4:	6a 2f       	mov	r22, r26
     fb6:	11 24       	eor	r1, r1
     fb8:	9f 57       	subi	r25, 0x7F	; 127
     fba:	50 40       	sbci	r21, 0x00	; 0
     fbc:	8a f0       	brmi	.+34     	; 0xfe0 <__mulsf3_pse+0x84>
     fbe:	e1 f0       	breq	.+56     	; 0xff8 <__mulsf3_pse+0x9c>
     fc0:	88 23       	and	r24, r24
     fc2:	4a f0       	brmi	.+18     	; 0xfd6 <__mulsf3_pse+0x7a>
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	bb 1f       	adc	r27, r27
     fca:	66 1f       	adc	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	88 1f       	adc	r24, r24
     fd0:	91 50       	subi	r25, 0x01	; 1
     fd2:	50 40       	sbci	r21, 0x00	; 0
     fd4:	a9 f7       	brne	.-22     	; 0xfc0 <__mulsf3_pse+0x64>
     fd6:	9e 3f       	cpi	r25, 0xFE	; 254
     fd8:	51 05       	cpc	r21, r1
     fda:	70 f0       	brcs	.+28     	; 0xff8 <__mulsf3_pse+0x9c>
     fdc:	5c cf       	rjmp	.-328    	; 0xe96 <__fp_inf>
     fde:	a6 cf       	rjmp	.-180    	; 0xf2c <__fp_szero>
     fe0:	5f 3f       	cpi	r21, 0xFF	; 255
     fe2:	ec f3       	brlt	.-6      	; 0xfde <__mulsf3_pse+0x82>
     fe4:	98 3e       	cpi	r25, 0xE8	; 232
     fe6:	dc f3       	brlt	.-10     	; 0xfde <__mulsf3_pse+0x82>
     fe8:	86 95       	lsr	r24
     fea:	77 95       	ror	r23
     fec:	67 95       	ror	r22
     fee:	b7 95       	ror	r27
     ff0:	f7 95       	ror	r31
     ff2:	e7 95       	ror	r30
     ff4:	9f 5f       	subi	r25, 0xFF	; 255
     ff6:	c1 f7       	brne	.-16     	; 0xfe8 <__mulsf3_pse+0x8c>
     ff8:	fe 2b       	or	r31, r30
     ffa:	88 0f       	add	r24, r24
     ffc:	91 1d       	adc	r25, r1
     ffe:	96 95       	lsr	r25
    1000:	87 95       	ror	r24
    1002:	97 f9       	bld	r25, 7
    1004:	08 95       	ret

00001006 <__fp_cmp>:
    1006:	99 0f       	add	r25, r25
    1008:	00 08       	sbc	r0, r0
    100a:	55 0f       	add	r21, r21
    100c:	aa 0b       	sbc	r26, r26
    100e:	e0 e8       	ldi	r30, 0x80	; 128
    1010:	fe ef       	ldi	r31, 0xFE	; 254
    1012:	16 16       	cp	r1, r22
    1014:	17 06       	cpc	r1, r23
    1016:	e8 07       	cpc	r30, r24
    1018:	f9 07       	cpc	r31, r25
    101a:	c0 f0       	brcs	.+48     	; 0x104c <__fp_cmp+0x46>
    101c:	12 16       	cp	r1, r18
    101e:	13 06       	cpc	r1, r19
    1020:	e4 07       	cpc	r30, r20
    1022:	f5 07       	cpc	r31, r21
    1024:	98 f0       	brcs	.+38     	; 0x104c <__fp_cmp+0x46>
    1026:	62 1b       	sub	r22, r18
    1028:	73 0b       	sbc	r23, r19
    102a:	84 0b       	sbc	r24, r20
    102c:	95 0b       	sbc	r25, r21
    102e:	39 f4       	brne	.+14     	; 0x103e <__fp_cmp+0x38>
    1030:	0a 26       	eor	r0, r26
    1032:	61 f0       	breq	.+24     	; 0x104c <__fp_cmp+0x46>
    1034:	23 2b       	or	r18, r19
    1036:	24 2b       	or	r18, r20
    1038:	25 2b       	or	r18, r21
    103a:	21 f4       	brne	.+8      	; 0x1044 <__fp_cmp+0x3e>
    103c:	08 95       	ret
    103e:	0a 26       	eor	r0, r26
    1040:	09 f4       	brne	.+2      	; 0x1044 <__fp_cmp+0x3e>
    1042:	a1 40       	sbci	r26, 0x01	; 1
    1044:	a6 95       	lsr	r26
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	81 1d       	adc	r24, r1
    104a:	81 1d       	adc	r24, r1
    104c:	08 95       	ret

0000104e <__divmodhi4>:
    104e:	97 fb       	bst	r25, 7
    1050:	07 2e       	mov	r0, r23
    1052:	16 f4       	brtc	.+4      	; 0x1058 <__divmodhi4+0xa>
    1054:	00 94       	com	r0
    1056:	06 d0       	rcall	.+12     	; 0x1064 <__divmodhi4_neg1>
    1058:	77 fd       	sbrc	r23, 7
    105a:	08 d0       	rcall	.+16     	; 0x106c <__divmodhi4_neg2>
    105c:	0b d0       	rcall	.+22     	; 0x1074 <__udivmodhi4>
    105e:	07 fc       	sbrc	r0, 7
    1060:	05 d0       	rcall	.+10     	; 0x106c <__divmodhi4_neg2>
    1062:	3e f4       	brtc	.+14     	; 0x1072 <__divmodhi4_exit>

00001064 <__divmodhi4_neg1>:
    1064:	90 95       	com	r25
    1066:	81 95       	neg	r24
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	08 95       	ret

0000106c <__divmodhi4_neg2>:
    106c:	70 95       	com	r23
    106e:	61 95       	neg	r22
    1070:	7f 4f       	sbci	r23, 0xFF	; 255

00001072 <__divmodhi4_exit>:
    1072:	08 95       	ret

00001074 <__udivmodhi4>:
    1074:	aa 1b       	sub	r26, r26
    1076:	bb 1b       	sub	r27, r27
    1078:	51 e1       	ldi	r21, 0x11	; 17
    107a:	07 c0       	rjmp	.+14     	; 0x108a <__udivmodhi4_ep>

0000107c <__udivmodhi4_loop>:
    107c:	aa 1f       	adc	r26, r26
    107e:	bb 1f       	adc	r27, r27
    1080:	a6 17       	cp	r26, r22
    1082:	b7 07       	cpc	r27, r23
    1084:	10 f0       	brcs	.+4      	; 0x108a <__udivmodhi4_ep>
    1086:	a6 1b       	sub	r26, r22
    1088:	b7 0b       	sbc	r27, r23

0000108a <__udivmodhi4_ep>:
    108a:	88 1f       	adc	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	5a 95       	dec	r21
    1090:	a9 f7       	brne	.-22     	; 0x107c <__udivmodhi4_loop>
    1092:	80 95       	com	r24
    1094:	90 95       	com	r25
    1096:	bc 01       	movw	r22, r24
    1098:	cd 01       	movw	r24, r26
    109a:	08 95       	ret

0000109c <do_rand>:
    109c:	8f 92       	push	r8
    109e:	9f 92       	push	r9
    10a0:	af 92       	push	r10
    10a2:	bf 92       	push	r11
    10a4:	cf 92       	push	r12
    10a6:	df 92       	push	r13
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
    10b2:	68 81       	ld	r22, Y
    10b4:	79 81       	ldd	r23, Y+1	; 0x01
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	61 15       	cp	r22, r1
    10bc:	71 05       	cpc	r23, r1
    10be:	81 05       	cpc	r24, r1
    10c0:	91 05       	cpc	r25, r1
    10c2:	21 f4       	brne	.+8      	; 0x10cc <do_rand+0x30>
    10c4:	64 e2       	ldi	r22, 0x24	; 36
    10c6:	79 ed       	ldi	r23, 0xD9	; 217
    10c8:	8b e5       	ldi	r24, 0x5B	; 91
    10ca:	97 e0       	ldi	r25, 0x07	; 7
    10cc:	2d e1       	ldi	r18, 0x1D	; 29
    10ce:	33 ef       	ldi	r19, 0xF3	; 243
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	38 d0       	rcall	.+112    	; 0x1146 <__divmodsi4>
    10d6:	49 01       	movw	r8, r18
    10d8:	5a 01       	movw	r10, r20
    10da:	9b 01       	movw	r18, r22
    10dc:	ac 01       	movw	r20, r24
    10de:	a7 ea       	ldi	r26, 0xA7	; 167
    10e0:	b1 e4       	ldi	r27, 0x41	; 65
    10e2:	4d d0       	rcall	.+154    	; 0x117e <__muluhisi3>
    10e4:	6b 01       	movw	r12, r22
    10e6:	7c 01       	movw	r14, r24
    10e8:	ac ee       	ldi	r26, 0xEC	; 236
    10ea:	b4 ef       	ldi	r27, 0xF4	; 244
    10ec:	a5 01       	movw	r20, r10
    10ee:	94 01       	movw	r18, r8
    10f0:	52 d0       	rcall	.+164    	; 0x1196 <__mulohisi3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	8c 0d       	add	r24, r12
    10f8:	9d 1d       	adc	r25, r13
    10fa:	ae 1d       	adc	r26, r14
    10fc:	bf 1d       	adc	r27, r15
    10fe:	b7 ff       	sbrs	r27, 7
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <do_rand+0x6c>
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	a1 09       	sbc	r26, r1
    1106:	b0 48       	sbci	r27, 0x80	; 128
    1108:	88 83       	st	Y, r24
    110a:	99 83       	std	Y+1, r25	; 0x01
    110c:	aa 83       	std	Y+2, r26	; 0x02
    110e:	bb 83       	std	Y+3, r27	; 0x03
    1110:	9f 77       	andi	r25, 0x7F	; 127
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	df 90       	pop	r13
    111c:	cf 90       	pop	r12
    111e:	bf 90       	pop	r11
    1120:	af 90       	pop	r10
    1122:	9f 90       	pop	r9
    1124:	8f 90       	pop	r8
    1126:	08 95       	ret

00001128 <rand_r>:
    1128:	b9 cf       	rjmp	.-142    	; 0x109c <do_rand>

0000112a <rand>:
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	b6 cf       	rjmp	.-148    	; 0x109c <do_rand>

00001130 <srand>:
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	80 93 00 01 	sts	0x0100, r24
    1138:	90 93 01 01 	sts	0x0101, r25
    113c:	a0 93 02 01 	sts	0x0102, r26
    1140:	b0 93 03 01 	sts	0x0103, r27
    1144:	08 95       	ret

00001146 <__divmodsi4>:
    1146:	05 2e       	mov	r0, r21
    1148:	97 fb       	bst	r25, 7
    114a:	16 f4       	brtc	.+4      	; 0x1150 <__divmodsi4+0xa>
    114c:	00 94       	com	r0
    114e:	0f d0       	rcall	.+30     	; 0x116e <__negsi2>
    1150:	57 fd       	sbrc	r21, 7
    1152:	05 d0       	rcall	.+10     	; 0x115e <__divmodsi4_neg2>
    1154:	24 d0       	rcall	.+72     	; 0x119e <__udivmodsi4>
    1156:	07 fc       	sbrc	r0, 7
    1158:	02 d0       	rcall	.+4      	; 0x115e <__divmodsi4_neg2>
    115a:	46 f4       	brtc	.+16     	; 0x116c <__divmodsi4_exit>
    115c:	08 c0       	rjmp	.+16     	; 0x116e <__negsi2>

0000115e <__divmodsi4_neg2>:
    115e:	50 95       	com	r21
    1160:	40 95       	com	r20
    1162:	30 95       	com	r19
    1164:	21 95       	neg	r18
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	4f 4f       	sbci	r20, 0xFF	; 255
    116a:	5f 4f       	sbci	r21, 0xFF	; 255

0000116c <__divmodsi4_exit>:
    116c:	08 95       	ret

0000116e <__negsi2>:
    116e:	90 95       	com	r25
    1170:	80 95       	com	r24
    1172:	70 95       	com	r23
    1174:	61 95       	neg	r22
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	8f 4f       	sbci	r24, 0xFF	; 255
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	08 95       	ret

0000117e <__muluhisi3>:
    117e:	31 d0       	rcall	.+98     	; 0x11e2 <__umulhisi3>
    1180:	a5 9f       	mul	r26, r21
    1182:	90 0d       	add	r25, r0
    1184:	b4 9f       	mul	r27, r20
    1186:	90 0d       	add	r25, r0
    1188:	a4 9f       	mul	r26, r20
    118a:	80 0d       	add	r24, r0
    118c:	91 1d       	adc	r25, r1
    118e:	11 24       	eor	r1, r1
    1190:	08 95       	ret

00001192 <__mulshisi3>:
    1192:	b7 ff       	sbrs	r27, 7
    1194:	f4 cf       	rjmp	.-24     	; 0x117e <__muluhisi3>

00001196 <__mulohisi3>:
    1196:	f3 df       	rcall	.-26     	; 0x117e <__muluhisi3>
    1198:	82 1b       	sub	r24, r18
    119a:	93 0b       	sbc	r25, r19
    119c:	08 95       	ret

0000119e <__udivmodsi4>:
    119e:	a1 e2       	ldi	r26, 0x21	; 33
    11a0:	1a 2e       	mov	r1, r26
    11a2:	aa 1b       	sub	r26, r26
    11a4:	bb 1b       	sub	r27, r27
    11a6:	fd 01       	movw	r30, r26
    11a8:	0d c0       	rjmp	.+26     	; 0x11c4 <__udivmodsi4_ep>

000011aa <__udivmodsi4_loop>:
    11aa:	aa 1f       	adc	r26, r26
    11ac:	bb 1f       	adc	r27, r27
    11ae:	ee 1f       	adc	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	a2 17       	cp	r26, r18
    11b4:	b3 07       	cpc	r27, r19
    11b6:	e4 07       	cpc	r30, r20
    11b8:	f5 07       	cpc	r31, r21
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__udivmodsi4_ep>
    11bc:	a2 1b       	sub	r26, r18
    11be:	b3 0b       	sbc	r27, r19
    11c0:	e4 0b       	sbc	r30, r20
    11c2:	f5 0b       	sbc	r31, r21

000011c4 <__udivmodsi4_ep>:
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	1a 94       	dec	r1
    11ce:	69 f7       	brne	.-38     	; 0x11aa <__udivmodsi4_loop>
    11d0:	60 95       	com	r22
    11d2:	70 95       	com	r23
    11d4:	80 95       	com	r24
    11d6:	90 95       	com	r25
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	bd 01       	movw	r22, r26
    11de:	cf 01       	movw	r24, r30
    11e0:	08 95       	ret

000011e2 <__umulhisi3>:
    11e2:	a2 9f       	mul	r26, r18
    11e4:	b0 01       	movw	r22, r0
    11e6:	b3 9f       	mul	r27, r19
    11e8:	c0 01       	movw	r24, r0
    11ea:	a3 9f       	mul	r26, r19
    11ec:	70 0d       	add	r23, r0
    11ee:	81 1d       	adc	r24, r1
    11f0:	11 24       	eor	r1, r1
    11f2:	91 1d       	adc	r25, r1
    11f4:	b2 9f       	mul	r27, r18
    11f6:	70 0d       	add	r23, r0
    11f8:	81 1d       	adc	r24, r1
    11fa:	11 24       	eor	r1, r1
    11fc:	91 1d       	adc	r25, r1
    11fe:	08 95       	ret

00001200 <_exit>:
    1200:	f8 94       	cli

00001202 <__stop_program>:
    1202:	ff cf       	rjmp	.-2      	; 0x1202 <__stop_program>
