
Malsokningsenh.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800100  00800100  0000033a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000022c  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c8  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002bf  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000950  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000269  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000015a  00000000  00000000  00000c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000d73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3b c0       	rjmp	.+118    	; 0xc8 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ec       	ldi	r30, 0xC6	; 198
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	56 d0       	rcall	.+172    	; 0x170 <main>
  c4:	fe c0       	rjmp	.+508    	; 0x2c2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_20>:
			if(messageNumber>NUMBER_OF_MESSAGES+1) messageNumber=1;
		}
    }
}

ISR(USART0_RX_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	
	//may need to disable interupts
	//mask "bit8"
	uint16_t buffer = UCSR0B & 0x02;
  d8:	80 91 c1 00 	lds	r24, 0x00C1
  dc:	82 70       	andi	r24, 0x02	; 2
  de:	90 e0       	ldi	r25, 0x00	; 0
	//shift to position 8
	buffer = buffer << 7;
  e0:	96 95       	lsr	r25
  e2:	98 2f       	mov	r25, r24
  e4:	88 27       	eor	r24, r24
  e6:	97 95       	ror	r25
  e8:	87 95       	ror	r24
	//or in rest of bits
	buffer |= UDR0;
  ea:	20 91 c6 00 	lds	r18, 0x00C6
  ee:	82 2b       	or	r24, r18
	uint8_t messageID = buffer & 0x07;
  f0:	28 2f       	mov	r18, r24
  f2:	27 70       	andi	r18, 0x07	; 7
	//PORTB |= (1<<PINB4);
	switch(messageID){
  f4:	22 30       	cpi	r18, 0x02	; 2
  f6:	a9 f0       	breq	.+42     	; 0x122 <__vector_20+0x5a>
  f8:	28 f4       	brcc	.+10     	; 0x104 <__vector_20+0x3c>
  fa:	22 23       	and	r18, r18
  fc:	41 f0       	breq	.+16     	; 0x10e <__vector_20+0x46>
  fe:	21 30       	cpi	r18, 0x01	; 1
 100:	59 f0       	breq	.+22     	; 0x118 <__vector_20+0x50>
 102:	1d c0       	rjmp	.+58     	; 0x13e <__vector_20+0x76>
 104:	23 30       	cpi	r18, 0x03	; 3
 106:	91 f0       	breq	.+36     	; 0x12c <__vector_20+0x64>
 108:	24 30       	cpi	r18, 0x04	; 4
 10a:	a9 f0       	breq	.+42     	; 0x136 <__vector_20+0x6e>
 10c:	18 c0       	rjmp	.+48     	; 0x13e <__vector_20+0x76>
		case 0:
			//_delay_ms(500);
			//PORTB ^= (1<<PINB4);
			message1 = buffer;
 10e:	90 93 09 01 	sts	0x0109, r25
 112:	80 93 08 01 	sts	0x0108, r24
			break;
 116:	13 c0       	rjmp	.+38     	; 0x13e <__vector_20+0x76>
		case 1:
			//PORTB ^= (1<<PINB5);
			message2 = buffer;
 118:	90 93 07 01 	sts	0x0107, r25
 11c:	80 93 06 01 	sts	0x0106, r24
			break;
 120:	0e c0       	rjmp	.+28     	; 0x13e <__vector_20+0x76>
		case 2:
			//_delay_ms(500);
			//PORTB ^= (1<<PINB6);
			message3 = buffer;
 122:	90 93 05 01 	sts	0x0105, r25
 126:	80 93 04 01 	sts	0x0104, r24
			break;
 12a:	09 c0       	rjmp	.+18     	; 0x13e <__vector_20+0x76>
		case 3:
			//PORTB ^= (1<<PINB7);
			message4 = buffer;
 12c:	90 93 03 01 	sts	0x0103, r25
 130:	80 93 02 01 	sts	0x0102, r24
			break;
 134:	04 c0       	rjmp	.+8      	; 0x13e <__vector_20+0x76>
		case 4:
			//PORTB ^= (1<<PINB7);
			message5 = buffer;
 136:	90 93 01 01 	sts	0x0101, r25
 13a:	80 93 00 01 	sts	0x0100, r24
			break;
	}
}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <testTAPEsensors>:
	
//just test function
//PIN B4 and B5 as outputs
void testTAPEsensors(){
	//AD omvandlinar 2 TAPEsensorer + gyro med interupts
	unsigned snapshot = 0b0000000010000000&message1;
 14e:	80 91 08 01 	lds	r24, 0x0108
	
	if(snapshot == 0b0000000010000000){
 152:	87 ff       	sbrs	r24, 7
 154:	02 c0       	rjmp	.+4      	; 0x15a <testTAPEsensors+0xc>
		PORTB |= (1<<PINB4);
 156:	2c 9a       	sbi	0x05, 4	; 5
 158:	01 c0       	rjmp	.+2      	; 0x15c <testTAPEsensors+0xe>
	}
	else{
		PORTB &= 0b11101111;
 15a:	2c 98       	cbi	0x05, 4	; 5
	}
	
	snapshot = 0b0000000100000000&message1;
 15c:	80 91 08 01 	lds	r24, 0x0108
 160:	90 91 09 01 	lds	r25, 0x0109
	
	if(snapshot == 0b0000000100000000){
 164:	90 ff       	sbrs	r25, 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <testTAPEsensors+0x1e>
		PORTB |= (1<<PINB5);
 168:	2d 9a       	sbi	0x05, 5	; 5
 16a:	08 95       	ret
	}
	else{
		PORTB &= 0b11011111;
 16c:	2d 98       	cbi	0x05, 5	; 5
 16e:	08 95       	ret

00000170 <main>:


int main(void)
{
	
	DDRB = 0b11111111;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	84 b9       	out	0x04, r24	; 4
	
	//enable global interupts
	sei();
 174:	78 94       	sei
	
	//initiate UART målsökning from sensor
	//set baudrate
	//4800
	uint16_t UBRR_val = UBRR_SENSOR_MALSOKNING;
	UBRR0H = (unsigned char) (UBRR_val >> 8);
 176:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) UBRR_val;
 17a:	87 e7       	ldi	r24, 0x77	; 119
 17c:	80 93 c4 00 	sts	0x00C4, r24
	//enable receive + set frame 9 bits
	UCSR0B = (1<<RXEN0) | (1<<UCSZ02);
 180:	e1 ec       	ldi	r30, 0xC1	; 193
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	84 e1       	ldi	r24, 0x14	; 20
 186:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	80 93 c2 00 	sts	0x00C2, r24

	//enable receive interupt
	UCSR0B |= (1<<RXCIE0);
 18e:	90 81       	ld	r25, Z
 190:	90 68       	ori	r25, 0x80	; 128
 192:	90 83       	st	Z, r25
	
	//initiate UART målsökning to styr
	//set baudrate
	//115200
	uint16_t UBRR_val1 = UBRR_STYR_MALSOKNING;
	UBRR1H = (unsigned char) (UBRR_val1 >> 8);
 194:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char) UBRR_val1;
 198:	99 e0       	ldi	r25, 0x09	; 9
 19a:	90 93 cc 00 	sts	0x00CC, r25
	
	//enable transmit + set frame 9 bits
	UCSR1B = (1<<TXEN1) | (1<<UCSZ12);
 19e:	9c e0       	ldi	r25, 0x0C	; 12
 1a0:	90 93 c9 00 	sts	0x00C9, r25
	UCSR1C = (1<<UCSZ10) | (1<<UCSZ11);
 1a4:	80 93 ca 00 	sts	0x00CA, r24
	
    while(1)
    {
		//PORTB ^= (1<<PINB4);
		//PORTB = message2;
		testTAPEsensors();
 1a8:	d2 df       	rcall	.-92     	; 0x14e <testTAPEsensors>
	
	unsigned nextOrder = 0;
	
	uint8_t testChange = 0;
	
	uint8_t messageNumber = 1;
 1aa:	11 e0       	ldi	r17, 0x01	; 1
		
		//sväng vänster:
		//nextOrder = TURN_LEFT;
		if (testChange == 0){
			nextOrder = 0x41;
			testChange = 1;
 1ac:	44 24       	eor	r4, r4
 1ae:	43 94       	inc	r4
		//AI
		
		//sväng vänster:
		//nextOrder = TURN_LEFT;
		if (testChange == 0){
			nextOrder = 0x41;
 1b0:	91 e4       	ldi	r25, 0x41	; 65
		//if so send next order and reset nextOrder as in have no order
		if((UCSR1A & (1<<UDRE1))){
			//muxa through messages
			//may need to disable interupts
			//need to reset bit8 for "reasons", this bit is not shifted out and must manually be reset each time
			UCSR1B &= 0xFE;
 1b2:	c9 ec       	ldi	r28, 0xC9	; 201
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
					UCSR1B |= (message2 >> 8) & 1;
					UDR1 = message2;
					break;
				case 3:
					UCSR1B |= (message3 >> 8) & 1;
					UDR1 = message3;
 1b6:	0f 2e       	mov	r0, r31
 1b8:	f4 e0       	ldi	r31, 0x04	; 4
 1ba:	af 2e       	mov	r10, r31
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	bf 2e       	mov	r11, r31
 1c0:	f0 2d       	mov	r31, r0
 1c2:	0f 2e       	mov	r0, r31
 1c4:	fe ec       	ldi	r31, 0xCE	; 206
 1c6:	ef 2e       	mov	r14, r31
 1c8:	f1 2c       	mov	r15, r1
 1ca:	f0 2d       	mov	r31, r0
				default:
					break;
			}
			//next mux
			messageNumber++;
			if(messageNumber>NUMBER_OF_MESSAGES+1) messageNumber=1;
 1cc:	33 24       	eor	r3, r3
 1ce:	33 94       	inc	r3
					UCSR1B |= (message4 >> 8) & 1;
					UDR1 = message4;
					break;
				case 5: 
					UCSR1B |= (message5 >> 8) & 1;
					UDR1 = message5;
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	cf 2e       	mov	r12, r31
 1d6:	f1 e0       	ldi	r31, 0x01	; 1
 1d8:	df 2e       	mov	r13, r31
 1da:	f0 2d       	mov	r31, r0
					UCSR1B |= (message3 >> 8) & 1;
					UDR1 = message3;
					break;
				case 4:
					UCSR1B |= (message4 >> 8) & 1;
					UDR1 = message4;
 1dc:	0f 2e       	mov	r0, r31
 1de:	f2 e0       	ldi	r31, 0x02	; 2
 1e0:	8f 2e       	mov	r8, r31
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	9f 2e       	mov	r9, r31
 1e6:	f0 2d       	mov	r31, r0
			switch(messageNumber){
				case 1:
					//set highest bit
					UCSR1B |= (message1 >> 8) & 1;
					//set others bits
					UDR1 = message1;
 1e8:	0f 2e       	mov	r0, r31
 1ea:	f8 e0       	ldi	r31, 0x08	; 8
 1ec:	6f 2e       	mov	r6, r31
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	7f 2e       	mov	r7, r31
 1f2:	f0 2d       	mov	r31, r0
			nextOrder = 0x41;
			testChange = 1;
		}
		else{
			nextOrder = 0x2B;
			testChange = 0;
 1f4:	21 2c       	mov	r2, r1
 1f6:	08 c0       	rjmp	.+16     	; 0x208 <main+0x98>
	
    while(1)
    {
		//PORTB ^= (1<<PINB4);
		//PORTB = message2;
		testTAPEsensors();
 1f8:	aa df       	rcall	.-172    	; 0x14e <testTAPEsensors>
		*/
		//AI
		
		//sväng vänster:
		//nextOrder = TURN_LEFT;
		if (testChange == 0){
 1fa:	41 10       	cpse	r4, r1
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <main+0x94>
			nextOrder = 0x41;
			testChange = 1;
 1fe:	43 2c       	mov	r4, r3
		//AI
		
		//sväng vänster:
		//nextOrder = TURN_LEFT;
		if (testChange == 0){
			nextOrder = 0x41;
 200:	91 e4       	ldi	r25, 0x41	; 65
 202:	02 c0       	rjmp	.+4      	; 0x208 <main+0x98>
			testChange = 1;
		}
		else{
			nextOrder = 0x2B;
			testChange = 0;
 204:	42 2c       	mov	r4, r2
		if (testChange == 0){
			nextOrder = 0x41;
			testChange = 1;
		}
		else{
			nextOrder = 0x2B;
 206:	9b e2       	ldi	r25, 0x2B	; 43
        
		

		//check if transmit buffer is empty
		//if so send next order and reset nextOrder as in have no order
		if((UCSR1A & (1<<UDRE1))){
 208:	e8 ec       	ldi	r30, 0xC8	; 200
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	85 ff       	sbrs	r24, 5
 210:	f3 cf       	rjmp	.-26     	; 0x1f8 <main+0x88>
			//muxa through messages
			//may need to disable interupts
			//need to reset bit8 for "reasons", this bit is not shifted out and must manually be reset each time
			UCSR1B &= 0xFE;
 212:	88 81       	ld	r24, Y
 214:	8e 7f       	andi	r24, 0xFE	; 254
 216:	88 83       	st	Y, r24
			switch(messageNumber){
 218:	13 30       	cpi	r17, 0x03	; 3
 21a:	19 f1       	breq	.+70     	; 0x262 <main+0xf2>
 21c:	28 f4       	brcc	.+10     	; 0x228 <main+0xb8>
 21e:	11 30       	cpi	r17, 0x01	; 1
 220:	49 f0       	breq	.+18     	; 0x234 <main+0xc4>
 222:	12 30       	cpi	r17, 0x02	; 2
 224:	91 f0       	breq	.+36     	; 0x24a <main+0xda>
 226:	43 c0       	rjmp	.+134    	; 0x2ae <main+0x13e>
 228:	15 30       	cpi	r17, 0x05	; 5
 22a:	89 f1       	breq	.+98     	; 0x28e <main+0x11e>
 22c:	28 f1       	brcs	.+74     	; 0x278 <main+0x108>
 22e:	16 30       	cpi	r17, 0x06	; 6
 230:	c9 f1       	breq	.+114    	; 0x2a4 <main+0x134>
 232:	3d c0       	rjmp	.+122    	; 0x2ae <main+0x13e>
				case 1:
					//set highest bit
					UCSR1B |= (message1 >> 8) & 1;
 234:	98 81       	ld	r25, Y
 236:	80 91 09 01 	lds	r24, 0x0109
 23a:	81 70       	andi	r24, 0x01	; 1
 23c:	89 2b       	or	r24, r25
 23e:	88 83       	st	Y, r24
					//set others bits
					UDR1 = message1;
 240:	f3 01       	movw	r30, r6
 242:	80 81       	ld	r24, Z
 244:	f7 01       	movw	r30, r14
 246:	80 83       	st	Z, r24
					break;
 248:	3a c0       	rjmp	.+116    	; 0x2be <main+0x14e>
				case 2:
					UCSR1B |= (message2 >> 8) & 1;
 24a:	98 81       	ld	r25, Y
 24c:	80 91 07 01 	lds	r24, 0x0107
 250:	81 70       	andi	r24, 0x01	; 1
 252:	89 2b       	or	r24, r25
 254:	88 83       	st	Y, r24
					UDR1 = message2;
 256:	e6 e0       	ldi	r30, 0x06	; 6
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	80 81       	ld	r24, Z
 25c:	f7 01       	movw	r30, r14
 25e:	80 83       	st	Z, r24
					break;
 260:	2e c0       	rjmp	.+92     	; 0x2be <main+0x14e>
				case 3:
					UCSR1B |= (message3 >> 8) & 1;
 262:	98 81       	ld	r25, Y
 264:	80 91 05 01 	lds	r24, 0x0105
 268:	81 70       	andi	r24, 0x01	; 1
 26a:	89 2b       	or	r24, r25
 26c:	88 83       	st	Y, r24
					UDR1 = message3;
 26e:	f5 01       	movw	r30, r10
 270:	80 81       	ld	r24, Z
 272:	f7 01       	movw	r30, r14
 274:	80 83       	st	Z, r24
					break;
 276:	23 c0       	rjmp	.+70     	; 0x2be <main+0x14e>
				case 4:
					UCSR1B |= (message4 >> 8) & 1;
 278:	98 81       	ld	r25, Y
 27a:	80 91 03 01 	lds	r24, 0x0103
 27e:	81 70       	andi	r24, 0x01	; 1
 280:	89 2b       	or	r24, r25
 282:	88 83       	st	Y, r24
					UDR1 = message4;
 284:	f4 01       	movw	r30, r8
 286:	80 81       	ld	r24, Z
 288:	f7 01       	movw	r30, r14
 28a:	80 83       	st	Z, r24
					break;
 28c:	18 c0       	rjmp	.+48     	; 0x2be <main+0x14e>
				case 5: 
					UCSR1B |= (message5 >> 8) & 1;
 28e:	98 81       	ld	r25, Y
 290:	80 91 01 01 	lds	r24, 0x0101
 294:	81 70       	andi	r24, 0x01	; 1
 296:	89 2b       	or	r24, r25
 298:	88 83       	st	Y, r24
					UDR1 = message5;
 29a:	f6 01       	movw	r30, r12
 29c:	80 81       	ld	r24, Z
 29e:	f7 01       	movw	r30, r14
 2a0:	80 83       	st	Z, r24
					break;
 2a2:	0d c0       	rjmp	.+26     	; 0x2be <main+0x14e>
				case 6:
					if(nextOrder != 0){
						UCSR1B |= (nextOrder >> 8) & 1;
 2a4:	88 81       	ld	r24, Y
 2a6:	88 83       	st	Y, r24
						UDR1 = nextOrder;
 2a8:	f7 01       	movw	r30, r14
 2aa:	90 83       	st	Z, r25
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <main+0x14a>
					}
				default:
					break;
			}
			//next mux
			messageNumber++;
 2ae:	1f 5f       	subi	r17, 0xFF	; 255
			if(messageNumber>NUMBER_OF_MESSAGES+1) messageNumber=1;
 2b0:	81 2f       	mov	r24, r17
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	07 97       	sbiw	r24, 0x07	; 7
 2b6:	0c f4       	brge	.+2      	; 0x2ba <main+0x14a>
 2b8:	9f cf       	rjmp	.-194    	; 0x1f8 <main+0x88>
 2ba:	13 2d       	mov	r17, r3
 2bc:	9d cf       	rjmp	.-198    	; 0x1f8 <main+0x88>
					}
				default:
					break;
			}
			//next mux
			messageNumber++;
 2be:	1f 5f       	subi	r17, 0xFF	; 255
 2c0:	9b cf       	rjmp	.-202    	; 0x1f8 <main+0x88>

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
