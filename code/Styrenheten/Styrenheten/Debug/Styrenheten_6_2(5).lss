
Styrenheten_6_2(5).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000ad8  00000b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800126  00800126  00000b92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a31  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034a  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000842  00000000  00000000  00001a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  000022bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d7  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f8  00000000  00000000  00002bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00002fc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e9 c1       	rjmp	.+978    	; 0x424 <__vector_20>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	f7 02       	muls	r31, r23
  8e:	d0 02       	muls	r29, r16
  90:	d4 02       	muls	r29, r20
  92:	d8 02       	muls	r29, r24
  94:	dc 02       	muls	r29, r28
  96:	de 02       	muls	r29, r30
  98:	e0 02       	muls	r30, r16
  9a:	e2 02       	muls	r30, r18
  9c:	e4 02       	muls	r30, r20
  9e:	e6 02       	muls	r30, r22
  a0:	e8 02       	muls	r30, r24
  a2:	eb 02       	muls	r30, r27
  a4:	f0 02       	muls	r31, r16
  a6:	f6 02       	muls	r31, r22
  a8:	f6 02       	muls	r31, r22
  aa:	f6 02       	muls	r31, r22
  ac:	f6 02       	muls	r31, r22
  ae:	f6 02       	muls	r31, r22
  b0:	f6 02       	muls	r31, r22
  b2:	f6 02       	muls	r31, r22
  b4:	f4 02       	muls	r31, r20

000000b6 <__ctors_start>:
  b6:	fe 02       	muls	r31, r30

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d0 e4       	ldi	r29, 0x40	; 64
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	e8 ed       	ldi	r30, 0xD8	; 216
  cc:	fa e0       	ldi	r31, 0x0A	; 10
  ce:	00 e0       	ldi	r16, 0x00	; 0
  d0:	0b bf       	out	0x3b, r16	; 59
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x14>
  d4:	07 90       	elpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	a6 32       	cpi	r26, 0x26	; 38
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0x10>

000000de <__do_clear_bss>:
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	a6 e2       	ldi	r26, 0x26	; 38
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
  e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
  e8:	a8 33       	cpi	r26, 0x38	; 56
  ea:	b2 07       	cpc	r27, r18
  ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	cc e5       	ldi	r28, 0x5C	; 92
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	03 c0       	rjmp	.+6      	; 0xfc <__do_global_ctors+0xe>
  f6:	21 97       	sbiw	r28, 0x01	; 1
  f8:	fe 01       	movw	r30, r28
  fa:	b6 d3       	rcall	.+1900   	; 0x868 <__tablejump2__>
  fc:	cb 35       	cpi	r28, 0x5B	; 91
  fe:	d1 07       	cpc	r29, r17
 100:	d1 f7       	brne	.-12     	; 0xf6 <__do_global_ctors+0x8>
 102:	28 d2       	rcall	.+1104   	; 0x554 <main>
 104:	e7 c4       	rjmp	.+2510   	; 0xad4 <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <_Z17waitForActivationv>:
	return queue->size;
}

bool isempty(struct queue *queue){
	return queue->size;
}
 108:	57 98       	cbi	0x0a, 7	; 10
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	93 eb       	ldi	r25, 0xB3	; 179
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <_Z17waitForActivationv+0x6>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_Z17waitForActivationv+0xc>
 114:	00 00       	nop
 116:	89 b1       	in	r24, 0x09	; 9
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	88 0f       	add	r24, r24
 11c:	89 2f       	mov	r24, r25
 11e:	88 1f       	adc	r24, r24
 120:	99 0b       	sbc	r25, r25
 122:	89 2b       	or	r24, r25
 124:	c1 f3       	breq	.-16     	; 0x116 <_Z17waitForActivationv+0xe>
 126:	08 95       	ret

00000128 <_Z7enqueuehP5queue>:
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	18 2f       	mov	r17, r24
 130:	eb 01       	movw	r28, r22
 132:	2a 81       	ldd	r18, Y+2	; 0x02
 134:	3b 81       	ldd	r19, Y+3	; 0x03
 136:	23 2b       	or	r18, r19
 138:	81 f4       	brne	.+32     	; 0x15a <_Z7enqueuehP5queue+0x32>
 13a:	8c 81       	ldd	r24, Y+4	; 0x04
 13c:	9d 81       	ldd	r25, Y+5	; 0x05
 13e:	89 2b       	or	r24, r25
 140:	61 f4       	brne	.+24     	; 0x15a <_Z7enqueuehP5queue+0x32>
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	99 d3       	rcall	.+1842   	; 0x87a <malloc>
 148:	9d 83       	std	Y+5, r25	; 0x05
 14a:	8c 83       	std	Y+4, r24	; 0x04
 14c:	fc 01       	movw	r30, r24
 14e:	12 82       	std	Z+2, r1	; 0x02
 150:	11 82       	std	Z+1, r1	; 0x01
 152:	10 83       	st	Z, r17
 154:	9b 83       	std	Y+3, r25	; 0x03
 156:	8a 83       	std	Y+2, r24	; 0x02
 158:	0f c0       	rjmp	.+30     	; 0x178 <_Z7enqueuehP5queue+0x50>
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	8d d3       	rcall	.+1818   	; 0x87a <malloc>
 160:	fc 01       	movw	r30, r24
 162:	ac 81       	ldd	r26, Y+4	; 0x04
 164:	bd 81       	ldd	r27, Y+5	; 0x05
 166:	12 96       	adiw	r26, 0x02	; 2
 168:	9c 93       	st	X, r25
 16a:	8e 93       	st	-X, r24
 16c:	11 97       	sbiw	r26, 0x01	; 1
 16e:	10 83       	st	Z, r17
 170:	12 82       	std	Z+2, r1	; 0x02
 172:	11 82       	std	Z+1, r1	; 0x01
 174:	9d 83       	std	Y+5, r25	; 0x05
 176:	8c 83       	std	Y+4, r24	; 0x04
 178:	88 81       	ld	r24, Y
 17a:	99 81       	ldd	r25, Y+1	; 0x01
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	99 83       	std	Y+1, r25	; 0x01
 180:	88 83       	st	Y, r24
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	08 95       	ret

0000018a <_Z7dequeueP5queue>:
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	fc 01       	movw	r30, r24
 190:	82 81       	ldd	r24, Z+2	; 0x02
 192:	93 81       	ldd	r25, Z+3	; 0x03
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	c1 f0       	breq	.+48     	; 0x1c8 <_Z7dequeueP5queue+0x3e>
 198:	24 81       	ldd	r18, Z+4	; 0x04
 19a:	35 81       	ldd	r19, Z+5	; 0x05
 19c:	82 17       	cp	r24, r18
 19e:	93 07       	cpc	r25, r19
 1a0:	29 f4       	brne	.+10     	; 0x1ac <_Z7dequeueP5queue+0x22>
 1a2:	13 82       	std	Z+3, r1	; 0x03
 1a4:	12 82       	std	Z+2, r1	; 0x02
 1a6:	15 82       	std	Z+5, r1	; 0x05
 1a8:	14 82       	std	Z+4, r1	; 0x04
 1aa:	07 c0       	rjmp	.+14     	; 0x1ba <_Z7dequeueP5queue+0x30>
 1ac:	dc 01       	movw	r26, r24
 1ae:	11 96       	adiw	r26, 0x01	; 1
 1b0:	2d 91       	ld	r18, X+
 1b2:	3c 91       	ld	r19, X
 1b4:	12 97       	sbiw	r26, 0x02	; 2
 1b6:	33 83       	std	Z+3, r19	; 0x03
 1b8:	22 83       	std	Z+2, r18	; 0x02
 1ba:	ef 01       	movw	r28, r30
 1bc:	f3 d3       	rcall	.+2022   	; 0x9a4 <free>
 1be:	88 81       	ld	r24, Y
 1c0:	99 81       	ldd	r25, Y+1	; 0x01
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	99 83       	std	Y+1, r25	; 0x01
 1c6:	88 83       	st	Y, r24
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <_Z9IR_senderv>:
    }
}

// Code that send out our signature
void IR_sender() {
	if (isHigh) {
 1ce:	80 91 11 01 	lds	r24, 0x0111
 1d2:	88 23       	and	r24, r24
 1d4:	79 f0       	breq	.+30     	; 0x1f4 <_Z9IR_senderv+0x26>
		OCR3A = ICR3 - IRdutyCycle; // duty cycle on 50% of length 26 for PINB6
 1d6:	80 91 96 00 	lds	r24, 0x0096
 1da:	90 91 97 00 	lds	r25, 0x0097
 1de:	20 91 24 01 	lds	r18, 0x0124
 1e2:	30 91 25 01 	lds	r19, 0x0125
 1e6:	82 1b       	sub	r24, r18
 1e8:	93 0b       	sbc	r25, r19
 1ea:	90 93 99 00 	sts	0x0099, r25
 1ee:	80 93 98 00 	sts	0x0098, r24
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <_Z9IR_senderv+0x36>
	}
	else {
		OCR3A = ICR3; // duty cycle on 50% of length 26 for PINB6
 1f4:	80 91 96 00 	lds	r24, 0x0096
 1f8:	90 91 97 00 	lds	r25, 0x0097
 1fc:	90 93 99 00 	sts	0x0099, r25
 200:	80 93 98 00 	sts	0x0098, r24
	}
	
	if (TCNT0 > 225) {
 204:	86 b5       	in	r24, 0x26	; 38
 206:	82 3e       	cpi	r24, 0xE2	; 226
 208:	50 f0       	brcs	.+20     	; 0x21e <_Z9IR_senderv+0x50>
		ctr++;
 20a:	80 91 2a 01 	lds	r24, 0x012A
 20e:	90 91 2b 01 	lds	r25, 0x012B
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 2b 01 	sts	0x012B, r25
 218:	80 93 2a 01 	sts	0x012A, r24
		TCNT0 = 0;
 21c:	16 bc       	out	0x26, r1	; 38
		
	}
	
	if (ctr == pauseTimes[ptIndex]) {
 21e:	80 91 2c 01 	lds	r24, 0x012C
 222:	90 91 2d 01 	lds	r25, 0x012D
 226:	fc 01       	movw	r30, r24
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	ee 5e       	subi	r30, 0xEE	; 238
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
 230:	40 81       	ld	r20, Z
 232:	51 81       	ldd	r21, Z+1	; 0x01
 234:	20 91 2a 01 	lds	r18, 0x012A
 238:	30 91 2b 01 	lds	r19, 0x012B
 23c:	42 17       	cp	r20, r18
 23e:	53 07       	cpc	r21, r19
 240:	b9 f4       	brne	.+46     	; 0x270 <_Z9IR_senderv+0xa2>
		ctr = 0;
 242:	10 92 2b 01 	sts	0x012B, r1
 246:	10 92 2a 01 	sts	0x012A, r1
		ptIndex++;
 24a:	01 96       	adiw	r24, 0x01	; 1
		
		if (ptIndex == 8) {
 24c:	88 30       	cpi	r24, 0x08	; 8
 24e:	91 05       	cpc	r25, r1
 250:	29 f0       	breq	.+10     	; 0x25c <_Z9IR_senderv+0x8e>
		
	}
	
	if (ctr == pauseTimes[ptIndex]) {
		ctr = 0;
		ptIndex++;
 252:	90 93 2d 01 	sts	0x012D, r25
 256:	80 93 2c 01 	sts	0x012C, r24
 25a:	04 c0       	rjmp	.+8      	; 0x264 <_Z9IR_senderv+0x96>
		
		if (ptIndex == 8) {
			ptIndex = 0;
 25c:	10 92 2d 01 	sts	0x012D, r1
 260:	10 92 2c 01 	sts	0x012C, r1
		}
		isHigh = !isHigh;			
 264:	90 91 11 01 	lds	r25, 0x0111
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	89 27       	eor	r24, r25
 26c:	80 93 11 01 	sts	0x0111, r24
 270:	08 95       	ret

00000272 <_Z7ResetSEv>:
}

// Reset all necessary data
void ResetSE() {
	// Reset health
	health = 3;
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 0e 01 	sts	0x010E, r25
 27a:	80 93 0d 01 	sts	0x010D, r24
	
	// Make sure that we dont move when we have restarted this module
	//MoveForward(0);
	
	// Set all heath LEDs activate
	LED_PORT |= (1<<LED1_PIN) | (1<<LED2_PIN) | (1<<LED3_PIN);
 27e:	85 b1       	in	r24, 0x05	; 5
 280:	87 60       	ori	r24, 0x07	; 7
 282:	85 b9       	out	0x05, r24	; 5
 284:	08 95       	ret

00000286 <_Z6SetPWMv>:
}

// Set doutyCycle for the PWM pins
void SetPWM() {
	OCR1A = ICR1 - dutyCycle; // duty cycle on "dutyCycle" of length "period" for PD5
 286:	e6 e8       	ldi	r30, 0x86	; 134
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	91 81       	ldd	r25, Z+1	; 0x01
 28e:	20 91 28 01 	lds	r18, 0x0128
 292:	30 91 29 01 	lds	r19, 0x0129
 296:	82 1b       	sub	r24, r18
 298:	93 0b       	sbc	r25, r19
 29a:	90 93 89 00 	sts	0x0089, r25
 29e:	80 93 88 00 	sts	0x0088, r24
	OCR1B = ICR1 - dutyCycle; // duty cycle on "dutyCycle" of length "period" for PD4
 2a2:	80 81       	ld	r24, Z
 2a4:	91 81       	ldd	r25, Z+1	; 0x01
 2a6:	20 91 28 01 	lds	r18, 0x0128
 2aa:	30 91 29 01 	lds	r19, 0x0129
 2ae:	82 1b       	sub	r24, r18
 2b0:	93 0b       	sbc	r25, r19
 2b2:	90 93 8b 00 	sts	0x008B, r25
 2b6:	80 93 8a 00 	sts	0x008A, r24
 2ba:	08 95       	ret

000002bc <_Z8InitUARTv>:

	//initiate UART målsökning to styr
	//set baud rate
	//115200
	uint16_t UBRR_val = UBRR_STYR_MALSOKNING;
	UBRR0H = (unsigned char) (UBRR_val >> 8);
 2bc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) UBRR_val;
 2c0:	29 e0       	ldi	r18, 0x09	; 9
 2c2:	20 93 c4 00 	sts	0x00C4, r18

	//enable receive + set frame 8 bits
	UCSR0B = (1<<RXEN0);
 2c6:	e1 ec       	ldi	r30, 0xC1	; 193
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 e1       	ldi	r24, 0x10	; 16
 2cc:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
 2ce:	96 e0       	ldi	r25, 0x06	; 6
 2d0:	90 93 c2 00 	sts	0x00C2, r25
	
	//enable receive interrupt
	UCSR0B |= (1<<RXCIE0);
 2d4:	80 81       	ld	r24, Z
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	80 83       	st	Z, r24
	//FROM STYR TO BLUETOOTH
	//initiate UART målsökning to styr
	//set baud rate
	//115200
	uint16_t UBRR_val1 = UBRR_STYR_MALSOKNING;
	UBRR1H = (unsigned char) (UBRR_val1 >> 8);
 2da:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char) UBRR_val1;
 2de:	20 93 cc 00 	sts	0x00CC, r18
		
	//enable transmit + set frame 8 bits
	UCSR1B = (1<<TXEN1);
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1<<UCSZ10) | (1<<UCSZ11);
 2e8:	90 93 ca 00 	sts	0x00CA, r25
 2ec:	08 95       	ret

000002ee <_Z8InitLEDsv>:
	//#UART INITS END#//
}

// Set all LED pins as output and light them up!
void InitLEDs() {
	DDRB |= (1<<LED1_PIN) | (1<<LED2_PIN) | (1<<LED3_PIN) | (1<<INVISIBLE_LED_PIN) | (1<<LASER_LED_PIN);
 2ee:	84 b1       	in	r24, 0x04	; 4
 2f0:	8f 61       	ori	r24, 0x1F	; 31
 2f2:	84 b9       	out	0x04, r24	; 4
	// Set all heath LEDs activate
	LED_PORT |= (1<<LED1_PIN) | (1<<LED2_PIN) | (1<<LED3_PIN);
 2f4:	85 b1       	in	r24, 0x05	; 5
 2f6:	87 60       	ori	r24, 0x07	; 7
 2f8:	85 b9       	out	0x05, r24	; 5
 2fa:	08 95       	ret

000002fc <_Z7InitPWMv>:
}

// Setup of PWM and DIR
void InitPWM() {
	// PWM setup
	TCCR1A |= (1<<WGM11) | (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B0) | (1<<COM1B1);
 2fc:	e0 e8       	ldi	r30, 0x80	; 128
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	82 6f       	ori	r24, 0xF2	; 242
 304:	80 83       	st	Z, r24
 	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS10);
 306:	e1 e8       	ldi	r30, 0x81	; 129
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	89 61       	ori	r24, 0x19	; 25
 30e:	80 83       	st	Z, r24


	ICR1 = period;
 310:	80 91 0f 01 	lds	r24, 0x010F
 314:	90 91 10 01 	lds	r25, 0x0110
 318:	e6 e8       	ldi	r30, 0x86	; 134
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	91 83       	std	Z+1, r25	; 0x01
 31e:	80 83       	st	Z, r24
	
	// make sure motor is off.
	OCR1A = ICR1;
 320:	80 81       	ld	r24, Z
 322:	91 81       	ldd	r25, Z+1	; 0x01
 324:	90 93 89 00 	sts	0x0089, r25
 328:	80 93 88 00 	sts	0x0088, r24
	OCR1B = ICR1;
 32c:	80 81       	ld	r24, Z
 32e:	91 81       	ldd	r25, Z+1	; 0x01
 330:	90 93 8b 00 	sts	0x008B, r25
 334:	80 93 8a 00 	sts	0x008A, r24
	
	// DIR setup
	
	DDRD |= (1<<PWM1) | (1<<PWM2);
 338:	8a b1       	in	r24, 0x0a	; 10
 33a:	80 63       	ori	r24, 0x30	; 48
 33c:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<DIR1);
 33e:	25 9a       	sbi	0x04, 5	; 4
	DDRA |= (1<<DIR2);
 340:	08 9a       	sbi	0x01, 0	; 1
 342:	08 95       	ret

00000344 <_Z12InitIRSenderv>:
}


void InitIRSender() {
	DDRB|= (1<<PINB6);
 344:	26 9a       	sbi	0x04, 6	; 4
	TCCR3A |= 1<<WGM31 | 1<<COM3A1 | 1<<COM3A0 |1<<COM3B0 | 1<<COM3B1;
 346:	e0 e9       	ldi	r30, 0x90	; 144
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	82 6f       	ori	r24, 0xF2	; 242
 34e:	80 83       	st	Z, r24
	TCCR3B |= 1<<WGM32 | 1<<WGM33 | 1<<CS30;
 350:	e1 e9       	ldi	r30, 0x91	; 145
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	89 61       	ori	r24, 0x19	; 25
 358:	80 83       	st	Z, r24
	
	ICR3 = IRperiod;		// period length in us
 35a:	80 91 22 01 	lds	r24, 0x0122
 35e:	90 91 23 01 	lds	r25, 0x0123
 362:	e6 e9       	ldi	r30, 0x96	; 150
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	91 83       	std	Z+1, r25	; 0x01
 368:	80 83       	st	Z, r24
	OCR3A = ICR3;
 36a:	80 81       	ld	r24, Z
 36c:	91 81       	ldd	r25, Z+1	; 0x01
 36e:	90 93 99 00 	sts	0x0099, r25
 372:	80 93 98 00 	sts	0x0098, r24
	TCCR0B |= 1<<CS01;	// Starta 8-bit ctr
 376:	85 b5       	in	r24, 0x25	; 37
 378:	82 60       	ori	r24, 0x02	; 2
 37a:	85 bd       	out	0x25, r24	; 37
 37c:	08 95       	ret

0000037e <_Z4Initv>:
	OCR1B = ICR1 - dutyCycle; // duty cycle on "dutyCycle" of length "period" for PD4
}

// Calls all Init functions
void Init() {
	InitUART();
 37e:	9e df       	rcall	.-196    	; 0x2bc <_Z8InitUARTv>
	InitPWM();
 380:	bd df       	rcall	.-134    	; 0x2fc <_Z7InitPWMv>
	InitLEDs();
 382:	b5 df       	rcall	.-150    	; 0x2ee <_Z8InitLEDsv>
	InitIRSender();
 384:	df cf       	rjmp	.-66     	; 0x344 <_Z12InitIRSenderv>
 386:	08 95       	ret

00000388 <_Z11MoveForwardi>:
}

// Set PWM1 and PWM2 to HIGH(set dutyCycle)
// Set DIR1 and DIR2 to low
void MoveForward(int speed) {
	dutyCycle = speed;
 388:	90 93 29 01 	sts	0x0129, r25
 38c:	80 93 28 01 	sts	0x0128, r24
	SetPWM();
 390:	7a df       	rcall	.-268    	; 0x286 <_Z6SetPWMv>
	PORTB |= (1<<DIR1);
 392:	2d 9a       	sbi	0x05, 5	; 5
	PORTA |= (1<<DIR2);
 394:	10 9a       	sbi	0x02, 0	; 2
 396:	08 95       	ret

00000398 <_Z13MoveBackwardsi>:
}

void MoveBackwards(int speed) {
	dutyCycle = speed;
 398:	90 93 29 01 	sts	0x0129, r25
 39c:	80 93 28 01 	sts	0x0128, r24
	SetPWM();
 3a0:	72 df       	rcall	.-284    	; 0x286 <_Z6SetPWMv>
	PORTB &= ~(1<<DIR1);
 3a2:	2d 98       	cbi	0x05, 5	; 5
	PORTA &= ~(1<<DIR2);
 3a4:	10 98       	cbi	0x02, 0	; 2
 3a6:	08 95       	ret

000003a8 <_Z8TurnLefti>:
}

// Set PWM1 and PWM2 to HIGH(set dutyCycle)
// Set DIR1 to LOW and DIR2 to HIGH
void TurnLeft(int speed) {
	dutyCycle = speed;
 3a8:	90 93 29 01 	sts	0x0129, r25
 3ac:	80 93 28 01 	sts	0x0128, r24
	SetPWM();
 3b0:	6a df       	rcall	.-300    	; 0x286 <_Z6SetPWMv>
	PORTB &= ~(1<<DIR1);
 3b2:	2d 98       	cbi	0x05, 5	; 5
	PORTA |= (1<<DIR2);
 3b4:	10 9a       	sbi	0x02, 0	; 2
 3b6:	08 95       	ret

000003b8 <_Z9TurnRighti>:
}

// Set PWM1 and PWM2 to HIGH(set dutyCycle)
// Set DIR2 to LOW and DIR1 to HIGH
void TurnRight(int speed) {
	dutyCycle = speed;
 3b8:	90 93 29 01 	sts	0x0129, r25
 3bc:	80 93 28 01 	sts	0x0128, r24
	SetPWM();
 3c0:	62 df       	rcall	.-316    	; 0x286 <_Z6SetPWMv>
	PORTA &= ~(1<<DIR2);
 3c2:	10 98       	cbi	0x02, 0	; 2
	PORTB |= (1<<DIR1);
 3c4:	2d 9a       	sbi	0x05, 5	; 5
 3c6:	08 95       	ret

000003c8 <_Z13ActivateLaserv>:
}

// Activates the laser pointer and the Laser lED
void ActivateLaser() {
	LASER_PORT |= (1<<LASER_PIN);
 3c8:	2c 9a       	sbi	0x05, 4	; 5
 3ca:	08 95       	ret

000003cc <_Z15DeactivateLaserv>:
}

// Deactivates the laser pointer and the Laser LED
void DeactivateLaser() {
	LASER_PORT &= ~(1<<LASER_PIN);
 3cc:	2c 98       	cbi	0x05, 4	; 5
 3ce:	08 95       	ret

000003d0 <_Z18TurnOffIRSignaturev>:
}

// Turns the IR-sender off (invisible) and turn on Invisible LED
void TurnOffIRSignature() {
	IRisActivive = false;
 3d0:	10 92 0c 01 	sts	0x010C, r1
	LED_PORT |= (1 << INVISIBLE_LED_PIN);
 3d4:	2b 9a       	sbi	0x05, 3	; 5
 3d6:	08 95       	ret

000003d8 <_Z17TurnOnIRSignaturev>:
}

// Turns the IR-sender on (not invisible) and turn off Invisible LED
void TurnOnIRSignature() {
	IRisActivive = true;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	80 93 0c 01 	sts	0x010C, r24
	LED_PORT &= ~(1 << INVISIBLE_LED_PIN);
 3de:	2b 98       	cbi	0x05, 3	; 5
 3e0:	08 95       	ret

000003e2 <_Z17DecrementLEDLivesv>:

}

// Decrement the amount of lives we have (show on less LED)
void DecrementLEDLives() {
	health--;
 3e2:	80 91 0d 01 	lds	r24, 0x010D
 3e6:	90 91 0e 01 	lds	r25, 0x010E
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	90 93 0e 01 	sts	0x010E, r25
 3f0:	80 93 0d 01 	sts	0x010D, r24
	
	if (health == 2) {
 3f4:	02 97       	sbiw	r24, 0x02	; 2
 3f6:	09 f4       	brne	.+2      	; 0x3fa <_Z17DecrementLEDLivesv+0x18>
		LED_PORT &= ~(1<<LED3_PIN);
 3f8:	2a 98       	cbi	0x05, 2	; 5
	}
	
	if (health == 1) {
 3fa:	80 91 0d 01 	lds	r24, 0x010D
 3fe:	90 91 0e 01 	lds	r25, 0x010E
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	09 f4       	brne	.+2      	; 0x408 <_Z17DecrementLEDLivesv+0x26>
		LED_PORT &= ~(1<<LED2_PIN);
 406:	29 98       	cbi	0x05, 1	; 5
	}
	
	if (health == 0) {
 408:	80 91 0d 01 	lds	r24, 0x010D
 40c:	90 91 0e 01 	lds	r25, 0x010E
 410:	89 2b       	or	r24, r25
 412:	09 f4       	brne	.+2      	; 0x416 <_Z17DecrementLEDLivesv+0x34>
		LED_PORT &= ~(1<<LED1_PIN);
 414:	28 98       	cbi	0x05, 0	; 5
 416:	08 95       	ret

00000418 <_Z8StopMovev>:
	
}

// Set PWM1 and PWM2 to LOW(dutyCycle == 0)
void StopMove() {
	dutyCycle = 0;
 418:	10 92 29 01 	sts	0x0129, r1
 41c:	10 92 28 01 	sts	0x0128, r1
	SetPWM();
 420:	32 cf       	rjmp	.-412    	; 0x286 <_Z6SetPWMv>
 422:	08 95       	ret

00000424 <__vector_20>:
}

//UART ISR which sets the "currentOrder" variable
ISR(USART0_RX_vect){
 424:	1f 92       	push	r1
 426:	0f 92       	push	r0
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	0f 92       	push	r0
 42c:	11 24       	eor	r1, r1
 42e:	0b b6       	in	r0, 0x3b	; 59
 430:	0f 92       	push	r0
 432:	2f 93       	push	r18
 434:	3f 93       	push	r19
 436:	4f 93       	push	r20
 438:	5f 93       	push	r21
 43a:	6f 93       	push	r22
 43c:	7f 93       	push	r23
 43e:	8f 93       	push	r24
 440:	9f 93       	push	r25
 442:	af 93       	push	r26
 444:	bf 93       	push	r27
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
	uint8_t snapbuffer = UDR0;
 44a:	80 91 c6 00 	lds	r24, 0x00C6
	uint8_t messageID = snapbuffer & 0x07; //Mask out message ID
 44e:	98 2f       	mov	r25, r24
 450:	97 70       	andi	r25, 0x07	; 7
	
	//Mux through messages
	switch(messageID){
 452:	92 30       	cpi	r25, 0x02	; 2
 454:	91 f0       	breq	.+36     	; 0x47a <__vector_20+0x56>
 456:	28 f4       	brcc	.+10     	; 0x462 <__vector_20+0x3e>
 458:	99 23       	and	r25, r25
 45a:	49 f0       	breq	.+18     	; 0x46e <__vector_20+0x4a>
 45c:	91 30       	cpi	r25, 0x01	; 1
 45e:	51 f0       	breq	.+20     	; 0x474 <__vector_20+0x50>
 460:	18 c0       	rjmp	.+48     	; 0x492 <__vector_20+0x6e>
 462:	94 30       	cpi	r25, 0x04	; 4
 464:	81 f0       	breq	.+32     	; 0x486 <__vector_20+0x62>
 466:	60 f0       	brcs	.+24     	; 0x480 <__vector_20+0x5c>
 468:	95 30       	cpi	r25, 0x05	; 5
 46a:	81 f0       	breq	.+32     	; 0x48c <__vector_20+0x68>
 46c:	12 c0       	rjmp	.+36     	; 0x492 <__vector_20+0x6e>
		case 0:
			message1 = snapbuffer;
 46e:	80 93 26 01 	sts	0x0126, r24
			break;
 472:	1a c0       	rjmp	.+52     	; 0x4a8 <__vector_20+0x84>
		case 1:
			message2 = snapbuffer;
 474:	80 93 0b 01 	sts	0x010B, r24
			break;
 478:	17 c0       	rjmp	.+46     	; 0x4a8 <__vector_20+0x84>
		case 2:
			message3 = snapbuffer;
 47a:	80 93 0a 01 	sts	0x010A, r24
			break;
 47e:	14 c0       	rjmp	.+40     	; 0x4a8 <__vector_20+0x84>
		case 3:
			message4 = snapbuffer;
 480:	80 93 09 01 	sts	0x0109, r24
			break;
 484:	11 c0       	rjmp	.+34     	; 0x4a8 <__vector_20+0x84>
		case 4:
			message5 = snapbuffer;
 486:	80 93 08 01 	sts	0x0108, r24
			break;
 48a:	0e c0       	rjmp	.+28     	; 0x4a8 <__vector_20+0x84>
		case 5:
			message6 = snapbuffer;
 48c:	80 93 07 01 	sts	0x0107, r24
 490:	02 c0       	rjmp	.+4      	; 0x496 <__vector_20+0x72>
			break;
	}
	//only look at ORDERS
	if(messageID == ORDER_ID){
 492:	95 30       	cpi	r25, 0x05	; 5
 494:	49 f4       	brne	.+18     	; 0x4a8 <__vector_20+0x84>
		currentOrder = (snapbuffer>>3) & 0b00011111; //Mask out the order
 496:	98 2f       	mov	r25, r24
 498:	96 95       	lsr	r25
 49a:	96 95       	lsr	r25
 49c:	96 95       	lsr	r25
 49e:	90 93 27 01 	sts	0x0127, r25
		enqueue(snapbuffer, &orderQueue);
 4a2:	6e e2       	ldi	r22, 0x2E	; 46
 4a4:	71 e0       	ldi	r23, 0x01	; 1
 4a6:	40 de       	rcall	.-896    	; 0x128 <_Z7enqueuehP5queue>
	}
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	bf 91       	pop	r27
 4ae:	af 91       	pop	r26
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	7f 91       	pop	r23
 4b6:	6f 91       	pop	r22
 4b8:	5f 91       	pop	r21
 4ba:	4f 91       	pop	r20
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	0f 90       	pop	r0
 4c2:	0b be       	out	0x3b, r0	; 59
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <_Z8SendUARTv>:

void SendUART() {
	//check if transmit buffer is empty
	//(UCSR1A & (1<<TXC1)) &&
	//_delay_us(300);
	if((UCSR1A & (1<<UDRE1))){
 4ce:	80 91 c8 00 	lds	r24, 0x00C8
 4d2:	85 ff       	sbrs	r24, 5
 4d4:	3e c0       	rjmp	.+124    	; 0x552 <_Z8SendUARTv+0x84>
		//mux through messages
		//may need to disable interrupts
		switch(messageNumber){
 4d6:	80 91 06 01 	lds	r24, 0x0106
 4da:	83 30       	cpi	r24, 0x03	; 3
 4dc:	b1 f0       	breq	.+44     	; 0x50a <_Z8SendUARTv+0x3c>
 4de:	28 f4       	brcc	.+10     	; 0x4ea <_Z8SendUARTv+0x1c>
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	49 f0       	breq	.+18     	; 0x4f6 <_Z8SendUARTv+0x28>
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	61 f0       	breq	.+24     	; 0x500 <_Z8SendUARTv+0x32>
 4e8:	29 c0       	rjmp	.+82     	; 0x53c <_Z8SendUARTv+0x6e>
 4ea:	85 30       	cpi	r24, 0x05	; 5
 4ec:	c1 f0       	breq	.+48     	; 0x51e <_Z8SendUARTv+0x50>
 4ee:	90 f0       	brcs	.+36     	; 0x514 <_Z8SendUARTv+0x46>
 4f0:	86 30       	cpi	r24, 0x06	; 6
 4f2:	d1 f0       	breq	.+52     	; 0x528 <_Z8SendUARTv+0x5a>
 4f4:	23 c0       	rjmp	.+70     	; 0x53c <_Z8SendUARTv+0x6e>
			case 1:
			UDR1 = message1;
 4f6:	80 91 26 01 	lds	r24, 0x0126
 4fa:	80 93 ce 00 	sts	0x00CE, r24
			break;
 4fe:	1e c0       	rjmp	.+60     	; 0x53c <_Z8SendUARTv+0x6e>
			case 2:
			UDR1 = message2;
 500:	80 91 0b 01 	lds	r24, 0x010B
 504:	80 93 ce 00 	sts	0x00CE, r24
			break;
 508:	19 c0       	rjmp	.+50     	; 0x53c <_Z8SendUARTv+0x6e>
			case 3:
			UDR1 = message3;
 50a:	80 91 0a 01 	lds	r24, 0x010A
 50e:	80 93 ce 00 	sts	0x00CE, r24
			break;
 512:	14 c0       	rjmp	.+40     	; 0x53c <_Z8SendUARTv+0x6e>
			case 4:
			UDR1 = message4;
 514:	80 91 09 01 	lds	r24, 0x0109
 518:	80 93 ce 00 	sts	0x00CE, r24
			break;
 51c:	0f c0       	rjmp	.+30     	; 0x53c <_Z8SendUARTv+0x6e>
			case 5:
			UDR1 = message5;
 51e:	80 91 08 01 	lds	r24, 0x0108
 522:	80 93 ce 00 	sts	0x00CE, r24
			break;
 526:	0a c0       	rjmp	.+20     	; 0x53c <_Z8SendUARTv+0x6e>
			case 6:
				//cli();
				UDR1 = orderQueue.front->orderdata;
 528:	e0 91 30 01 	lds	r30, 0x0130
 52c:	f0 91 31 01 	lds	r31, 0x0131
 530:	80 81       	ld	r24, Z
 532:	80 93 ce 00 	sts	0x00CE, r24
				dequeue(&orderQueue);
 536:	8e e2       	ldi	r24, 0x2E	; 46
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	27 de       	rcall	.-946    	; 0x18a <_Z7dequeueP5queue>
			//_delay_us(300);
			//PORTC &= ~(1 << PINC0);
			break;
		}
		//next mux
		messageNumber++;
 53c:	80 91 06 01 	lds	r24, 0x0106
 540:	8f 5f       	subi	r24, 0xFF	; 255
		if(messageNumber>NUMBER_OF_MESSAGES+1) messageNumber=1;
 542:	87 30       	cpi	r24, 0x07	; 7
 544:	18 f4       	brcc	.+6      	; 0x54c <_Z8SendUARTv+0x7e>
			//_delay_us(300);
			//PORTC &= ~(1 << PINC0);
			break;
		}
		//next mux
		messageNumber++;
 546:	80 93 06 01 	sts	0x0106, r24
 54a:	08 95       	ret
		if(messageNumber>NUMBER_OF_MESSAGES+1) messageNumber=1;
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	80 93 06 01 	sts	0x0106, r24
 552:	08 95       	ret

00000554 <main>:
uint8_t message6 = 5;

uint8_t messageNumber = 1;

int main(void){
	DDRB = 0b11111111;
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	84 b9       	out	0x04, r24	; 4

	//Grace time for bluetooth timer prescale /1024
	TCCR2B |= (1<<CS20) | (1<<CS22);
 558:	e1 eb       	ldi	r30, 0xB1	; 177
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	85 60       	ori	r24, 0x05	; 5
 560:	80 83       	st	Z, r24
	
	// Call all Init functions in this module
	Init();
 562:	0d df       	rcall	.-486    	; 0x37e <_Z4Initv>
		node *back;

}orderQueue;

void queue_init(struct queue *toBeInit){
	toBeInit->front = 0;
 564:	ee e2       	ldi	r30, 0x2E	; 46
 566:	f1 e0       	ldi	r31, 0x01	; 1
 568:	13 82       	std	Z+3, r1	; 0x03
 56a:	12 82       	std	Z+2, r1	; 0x02
	toBeInit->back = 0;
 56c:	15 82       	std	Z+5, r1	; 0x05
 56e:	14 82       	std	Z+4, r1	; 0x04
	
	queue_init(&orderQueue);
	//enable global interrupts
	sei();
 570:	78 94       	sei
	
	waitForActivation();
 572:	ca dd       	rcall	.-1132   	; 0x108 <_Z17waitForActivationv>
    {

		
		
		//Send UART to bluetooth without DC
 		if(TCNT2 >= UART_BLUETOOTH_GRACE_PERIOD){
 574:	c2 eb       	ldi	r28, 0xB2	; 178
 576:	d0 e0       	ldi	r29, 0x00	; 0
 578:	88 81       	ld	r24, Y
 57a:	8d 32       	cpi	r24, 0x2D	; 45
 57c:	10 f0       	brcs	.+4      	; 0x582 <main+0x2e>
			//LED_PORT ^= (1 << INVISIBLE_LED_PIN);
 			SendUART();
 57e:	a7 df       	rcall	.-178    	; 0x4ce <_Z8SendUARTv>
 			TCNT2 = 0;	
 580:	18 82       	st	Y, r1
 		}

		//Do command
		cli();
 582:	f8 94       	cli
		uint8_t snapshotOrder = currentOrder;
 584:	e0 91 27 01 	lds	r30, 0x0127
		sei();
 588:	78 94       	sei
		
		//Reset order so that its not executed more than once
		currentOrder = DO_NOTHING;
 58a:	10 92 27 01 	sts	0x0127, r1

		//snapshotOrder = TURN_RIGHT;
		switch (snapshotOrder) {
 58e:	8e 2f       	mov	r24, r30
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	85 31       	cpi	r24, 0x15	; 21
 594:	91 05       	cpc	r25, r1
 596:	50 f5       	brcc	.+84     	; 0x5ec <main+0x98>
 598:	fc 01       	movw	r30, r24
 59a:	ea 5b       	subi	r30, 0xBA	; 186
 59c:	ff 4f       	sbci	r31, 0xFF	; 255
 59e:	64 c1       	rjmp	.+712    	; 0x868 <__tablejump2__>
			case DO_NOTHING:
				break;
			
			case MOVE_FORWARD:
				MoveForward(MOVEMENT_SPEED);
 5a0:	80 ed       	ldi	r24, 0xD0	; 208
 5a2:	97 e0       	ldi	r25, 0x07	; 7
 5a4:	f1 de       	rcall	.-542    	; 0x388 <_Z11MoveForwardi>
				break;
 5a6:	23 c0       	rjmp	.+70     	; 0x5ee <main+0x9a>
			
			case TURN_LEFT:
				TurnLeft(ROTATION_SPEED);
 5a8:	88 e0       	ldi	r24, 0x08	; 8
 5aa:	97 e0       	ldi	r25, 0x07	; 7
 5ac:	fd de       	rcall	.-518    	; 0x3a8 <_Z8TurnLefti>
				break;
 5ae:	1f c0       	rjmp	.+62     	; 0x5ee <main+0x9a>
			
			case TURN_RIGHT:
				TurnRight(ROTATION_SPEED);
 5b0:	88 e0       	ldi	r24, 0x08	; 8
 5b2:	97 e0       	ldi	r25, 0x07	; 7
 5b4:	01 df       	rcall	.-510    	; 0x3b8 <_Z9TurnRighti>
				break;
 5b6:	1b c0       	rjmp	.+54     	; 0x5ee <main+0x9a>
			
			case ACTIVATE_LASER:
				ActivateLaser();
 5b8:	07 df       	rcall	.-498    	; 0x3c8 <_Z13ActivateLaserv>
				break;
 5ba:	19 c0       	rjmp	.+50     	; 0x5ee <main+0x9a>
			
			case DEACTIVATE_LASER:
				DeactivateLaser();
 5bc:	07 df       	rcall	.-498    	; 0x3cc <_Z15DeactivateLaserv>
				break;
 5be:	17 c0       	rjmp	.+46     	; 0x5ee <main+0x9a>
			
			case TURN_OFF_IR_SIG:
				TurnOffIRSignature();
 5c0:	07 df       	rcall	.-498    	; 0x3d0 <_Z18TurnOffIRSignaturev>
				break;
 5c2:	15 c0       	rjmp	.+42     	; 0x5ee <main+0x9a>
			
			case TURN_ON_IR_SIG:
				TurnOnIRSignature();
 5c4:	09 df       	rcall	.-494    	; 0x3d8 <_Z17TurnOnIRSignaturev>
				break;
 5c6:	13 c0       	rjmp	.+38     	; 0x5ee <main+0x9a>
			
			case STOP_MOVING:
				StopMove();
 5c8:	27 df       	rcall	.-434    	; 0x418 <_Z8StopMovev>
				break;
 5ca:	11 c0       	rjmp	.+34     	; 0x5ee <main+0x9a>
			
			case DECREMENT_LED_LIVES:
				DecrementLEDLives();
 5cc:	0a df       	rcall	.-492    	; 0x3e2 <_Z17DecrementLEDLivesv>
				break;
 5ce:	0f c0       	rjmp	.+30     	; 0x5ee <main+0x9a>
			
			case TURN_INVISIBLE_AND_DEC_LIFE_LED:
				DecrementLEDLives();
 5d0:	08 df       	rcall	.-496    	; 0x3e2 <_Z17DecrementLEDLivesv>
				TurnOffIRSignature();
 5d2:	fe de       	rcall	.-516    	; 0x3d0 <_Z18TurnOffIRSignaturev>
				break;
 5d4:	0c c0       	rjmp	.+24     	; 0x5ee <main+0x9a>
			case ACTIVATE_LASER_AND_TURN_RIGHT:
				ActivateLaser();
 5d6:	f8 de       	rcall	.-528    	; 0x3c8 <_Z13ActivateLaserv>
				TurnRight(ROTATION_SPEED);
 5d8:	88 e0       	ldi	r24, 0x08	; 8
 5da:	97 e0       	ldi	r25, 0x07	; 7
 5dc:	ed de       	rcall	.-550    	; 0x3b8 <_Z9TurnRighti>
				break;
 5de:	07 c0       	rjmp	.+14     	; 0x5ee <main+0x9a>
				
			case MOVE_BACKWARDS:
				MoveBackwards(MOVEMENT_SPEED);			
 5e0:	80 ed       	ldi	r24, 0xD0	; 208
 5e2:	97 e0       	ldi	r25, 0x07	; 7
 5e4:	d9 de       	rcall	.-590    	; 0x398 <_Z13MoveBackwardsi>
				break;
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <main+0x9a>
				
			case RESET_SE:
				ResetSE();
 5e8:	44 de       	rcall	.-888    	; 0x272 <_Z7ResetSEv>
				break;
 5ea:	01 c0       	rjmp	.+2      	; 0x5ee <main+0x9a>
			
			default:
				// Error
				PORTB |= (1<<PINB4);
 5ec:	2c 9a       	sbi	0x05, 4	; 5
				break;
		}
		
		// IR-sender
		if (IRisActivive) {
 5ee:	80 91 0c 01 	lds	r24, 0x010C
 5f2:	88 23       	and	r24, r24
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <main+0xa4>
 5f6:	c0 cf       	rjmp	.-128    	; 0x578 <main+0x24>
			IR_sender();
 5f8:	ea dd       	rcall	.-1068   	; 0x1ce <_Z9IR_senderv>
 5fa:	be cf       	rjmp	.-132    	; 0x578 <main+0x24>

000005fc <_GLOBAL__sub_I_tape1Threshold>:

bool isHigh = true;


int period = 4700; // Period time
int dutyCycle = period* 0.5; // 50% duty cycle to start
 5fc:	60 91 0f 01 	lds	r22, 0x010F
 600:	70 91 10 01 	lds	r23, 0x0110
 604:	07 2e       	mov	r0, r23
 606:	00 0c       	add	r0, r0
 608:	88 0b       	sbc	r24, r24
 60a:	99 0b       	sbc	r25, r25
 60c:	3e d0       	rcall	.+124    	; 0x68a <__floatsisf>
 60e:	20 e0       	ldi	r18, 0x00	; 0
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	5f e3       	ldi	r21, 0x3F	; 63
 616:	9d d0       	rcall	.+314    	; 0x752 <__mulsf3>
 618:	05 d0       	rcall	.+10     	; 0x624 <__fixsfsi>
 61a:	70 93 29 01 	sts	0x0129, r23
 61e:	60 93 28 01 	sts	0x0128, r22
 622:	08 95       	ret

00000624 <__fixsfsi>:
 624:	04 d0       	rcall	.+8      	; 0x62e <__fixunssfsi>
 626:	68 94       	set
 628:	b1 11       	cpse	r27, r1
 62a:	8d c0       	rjmp	.+282    	; 0x746 <__fp_szero>
 62c:	08 95       	ret

0000062e <__fixunssfsi>:
 62e:	70 d0       	rcall	.+224    	; 0x710 <__fp_splitA>
 630:	88 f0       	brcs	.+34     	; 0x654 <__fixunssfsi+0x26>
 632:	9f 57       	subi	r25, 0x7F	; 127
 634:	90 f0       	brcs	.+36     	; 0x65a <__fixunssfsi+0x2c>
 636:	b9 2f       	mov	r27, r25
 638:	99 27       	eor	r25, r25
 63a:	b7 51       	subi	r27, 0x17	; 23
 63c:	a0 f0       	brcs	.+40     	; 0x666 <__fixunssfsi+0x38>
 63e:	d1 f0       	breq	.+52     	; 0x674 <__fixunssfsi+0x46>
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	1a f0       	brmi	.+6      	; 0x650 <__fixunssfsi+0x22>
 64a:	ba 95       	dec	r27
 64c:	c9 f7       	brne	.-14     	; 0x640 <__fixunssfsi+0x12>
 64e:	12 c0       	rjmp	.+36     	; 0x674 <__fixunssfsi+0x46>
 650:	b1 30       	cpi	r27, 0x01	; 1
 652:	81 f0       	breq	.+32     	; 0x674 <__fixunssfsi+0x46>
 654:	77 d0       	rcall	.+238    	; 0x744 <__fp_zero>
 656:	b1 e0       	ldi	r27, 0x01	; 1
 658:	08 95       	ret
 65a:	74 c0       	rjmp	.+232    	; 0x744 <__fp_zero>
 65c:	67 2f       	mov	r22, r23
 65e:	78 2f       	mov	r23, r24
 660:	88 27       	eor	r24, r24
 662:	b8 5f       	subi	r27, 0xF8	; 248
 664:	39 f0       	breq	.+14     	; 0x674 <__fixunssfsi+0x46>
 666:	b9 3f       	cpi	r27, 0xF9	; 249
 668:	cc f3       	brlt	.-14     	; 0x65c <__fixunssfsi+0x2e>
 66a:	86 95       	lsr	r24
 66c:	77 95       	ror	r23
 66e:	67 95       	ror	r22
 670:	b3 95       	inc	r27
 672:	d9 f7       	brne	.-10     	; 0x66a <__fixunssfsi+0x3c>
 674:	3e f4       	brtc	.+14     	; 0x684 <__fixunssfsi+0x56>
 676:	90 95       	com	r25
 678:	80 95       	com	r24
 67a:	70 95       	com	r23
 67c:	61 95       	neg	r22
 67e:	7f 4f       	sbci	r23, 0xFF	; 255
 680:	8f 4f       	sbci	r24, 0xFF	; 255
 682:	9f 4f       	sbci	r25, 0xFF	; 255
 684:	08 95       	ret

00000686 <__floatunsisf>:
 686:	e8 94       	clt
 688:	09 c0       	rjmp	.+18     	; 0x69c <__floatsisf+0x12>

0000068a <__floatsisf>:
 68a:	97 fb       	bst	r25, 7
 68c:	3e f4       	brtc	.+14     	; 0x69c <__floatsisf+0x12>
 68e:	90 95       	com	r25
 690:	80 95       	com	r24
 692:	70 95       	com	r23
 694:	61 95       	neg	r22
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	8f 4f       	sbci	r24, 0xFF	; 255
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	99 23       	and	r25, r25
 69e:	a9 f0       	breq	.+42     	; 0x6ca <__floatsisf+0x40>
 6a0:	f9 2f       	mov	r31, r25
 6a2:	96 e9       	ldi	r25, 0x96	; 150
 6a4:	bb 27       	eor	r27, r27
 6a6:	93 95       	inc	r25
 6a8:	f6 95       	lsr	r31
 6aa:	87 95       	ror	r24
 6ac:	77 95       	ror	r23
 6ae:	67 95       	ror	r22
 6b0:	b7 95       	ror	r27
 6b2:	f1 11       	cpse	r31, r1
 6b4:	f8 cf       	rjmp	.-16     	; 0x6a6 <__floatsisf+0x1c>
 6b6:	fa f4       	brpl	.+62     	; 0x6f6 <__floatsisf+0x6c>
 6b8:	bb 0f       	add	r27, r27
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <__floatsisf+0x36>
 6bc:	60 ff       	sbrs	r22, 0
 6be:	1b c0       	rjmp	.+54     	; 0x6f6 <__floatsisf+0x6c>
 6c0:	6f 5f       	subi	r22, 0xFF	; 255
 6c2:	7f 4f       	sbci	r23, 0xFF	; 255
 6c4:	8f 4f       	sbci	r24, 0xFF	; 255
 6c6:	9f 4f       	sbci	r25, 0xFF	; 255
 6c8:	16 c0       	rjmp	.+44     	; 0x6f6 <__floatsisf+0x6c>
 6ca:	88 23       	and	r24, r24
 6cc:	11 f0       	breq	.+4      	; 0x6d2 <__floatsisf+0x48>
 6ce:	96 e9       	ldi	r25, 0x96	; 150
 6d0:	11 c0       	rjmp	.+34     	; 0x6f4 <__floatsisf+0x6a>
 6d2:	77 23       	and	r23, r23
 6d4:	21 f0       	breq	.+8      	; 0x6de <__floatsisf+0x54>
 6d6:	9e e8       	ldi	r25, 0x8E	; 142
 6d8:	87 2f       	mov	r24, r23
 6da:	76 2f       	mov	r23, r22
 6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <__floatsisf+0x5e>
 6de:	66 23       	and	r22, r22
 6e0:	71 f0       	breq	.+28     	; 0x6fe <__floatsisf+0x74>
 6e2:	96 e8       	ldi	r25, 0x86	; 134
 6e4:	86 2f       	mov	r24, r22
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	2a f0       	brmi	.+10     	; 0x6f6 <__floatsisf+0x6c>
 6ec:	9a 95       	dec	r25
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	da f7       	brpl	.-10     	; 0x6ec <__floatsisf+0x62>
 6f6:	88 0f       	add	r24, r24
 6f8:	96 95       	lsr	r25
 6fa:	87 95       	ror	r24
 6fc:	97 f9       	bld	r25, 7
 6fe:	08 95       	ret

00000700 <__fp_split3>:
 700:	57 fd       	sbrc	r21, 7
 702:	90 58       	subi	r25, 0x80	; 128
 704:	44 0f       	add	r20, r20
 706:	55 1f       	adc	r21, r21
 708:	59 f0       	breq	.+22     	; 0x720 <__fp_splitA+0x10>
 70a:	5f 3f       	cpi	r21, 0xFF	; 255
 70c:	71 f0       	breq	.+28     	; 0x72a <__fp_splitA+0x1a>
 70e:	47 95       	ror	r20

00000710 <__fp_splitA>:
 710:	88 0f       	add	r24, r24
 712:	97 fb       	bst	r25, 7
 714:	99 1f       	adc	r25, r25
 716:	61 f0       	breq	.+24     	; 0x730 <__fp_splitA+0x20>
 718:	9f 3f       	cpi	r25, 0xFF	; 255
 71a:	79 f0       	breq	.+30     	; 0x73a <__fp_splitA+0x2a>
 71c:	87 95       	ror	r24
 71e:	08 95       	ret
 720:	12 16       	cp	r1, r18
 722:	13 06       	cpc	r1, r19
 724:	14 06       	cpc	r1, r20
 726:	55 1f       	adc	r21, r21
 728:	f2 cf       	rjmp	.-28     	; 0x70e <__fp_split3+0xe>
 72a:	46 95       	lsr	r20
 72c:	f1 df       	rcall	.-30     	; 0x710 <__fp_splitA>
 72e:	08 c0       	rjmp	.+16     	; 0x740 <__fp_splitA+0x30>
 730:	16 16       	cp	r1, r22
 732:	17 06       	cpc	r1, r23
 734:	18 06       	cpc	r1, r24
 736:	99 1f       	adc	r25, r25
 738:	f1 cf       	rjmp	.-30     	; 0x71c <__fp_splitA+0xc>
 73a:	86 95       	lsr	r24
 73c:	71 05       	cpc	r23, r1
 73e:	61 05       	cpc	r22, r1
 740:	08 94       	sec
 742:	08 95       	ret

00000744 <__fp_zero>:
 744:	e8 94       	clt

00000746 <__fp_szero>:
 746:	bb 27       	eor	r27, r27
 748:	66 27       	eor	r22, r22
 74a:	77 27       	eor	r23, r23
 74c:	cb 01       	movw	r24, r22
 74e:	97 f9       	bld	r25, 7
 750:	08 95       	ret

00000752 <__mulsf3>:
 752:	0b d0       	rcall	.+22     	; 0x76a <__mulsf3x>
 754:	78 c0       	rjmp	.+240    	; 0x846 <__fp_round>
 756:	69 d0       	rcall	.+210    	; 0x82a <__fp_pscA>
 758:	28 f0       	brcs	.+10     	; 0x764 <__mulsf3+0x12>
 75a:	6e d0       	rcall	.+220    	; 0x838 <__fp_pscB>
 75c:	18 f0       	brcs	.+6      	; 0x764 <__mulsf3+0x12>
 75e:	95 23       	and	r25, r21
 760:	09 f0       	breq	.+2      	; 0x764 <__mulsf3+0x12>
 762:	5a c0       	rjmp	.+180    	; 0x818 <__fp_inf>
 764:	5f c0       	rjmp	.+190    	; 0x824 <__fp_nan>
 766:	11 24       	eor	r1, r1
 768:	ee cf       	rjmp	.-36     	; 0x746 <__fp_szero>

0000076a <__mulsf3x>:
 76a:	ca df       	rcall	.-108    	; 0x700 <__fp_split3>
 76c:	a0 f3       	brcs	.-24     	; 0x756 <__mulsf3+0x4>

0000076e <__mulsf3_pse>:
 76e:	95 9f       	mul	r25, r21
 770:	d1 f3       	breq	.-12     	; 0x766 <__mulsf3+0x14>
 772:	95 0f       	add	r25, r21
 774:	50 e0       	ldi	r21, 0x00	; 0
 776:	55 1f       	adc	r21, r21
 778:	62 9f       	mul	r22, r18
 77a:	f0 01       	movw	r30, r0
 77c:	72 9f       	mul	r23, r18
 77e:	bb 27       	eor	r27, r27
 780:	f0 0d       	add	r31, r0
 782:	b1 1d       	adc	r27, r1
 784:	63 9f       	mul	r22, r19
 786:	aa 27       	eor	r26, r26
 788:	f0 0d       	add	r31, r0
 78a:	b1 1d       	adc	r27, r1
 78c:	aa 1f       	adc	r26, r26
 78e:	64 9f       	mul	r22, r20
 790:	66 27       	eor	r22, r22
 792:	b0 0d       	add	r27, r0
 794:	a1 1d       	adc	r26, r1
 796:	66 1f       	adc	r22, r22
 798:	82 9f       	mul	r24, r18
 79a:	22 27       	eor	r18, r18
 79c:	b0 0d       	add	r27, r0
 79e:	a1 1d       	adc	r26, r1
 7a0:	62 1f       	adc	r22, r18
 7a2:	73 9f       	mul	r23, r19
 7a4:	b0 0d       	add	r27, r0
 7a6:	a1 1d       	adc	r26, r1
 7a8:	62 1f       	adc	r22, r18
 7aa:	83 9f       	mul	r24, r19
 7ac:	a0 0d       	add	r26, r0
 7ae:	61 1d       	adc	r22, r1
 7b0:	22 1f       	adc	r18, r18
 7b2:	74 9f       	mul	r23, r20
 7b4:	33 27       	eor	r19, r19
 7b6:	a0 0d       	add	r26, r0
 7b8:	61 1d       	adc	r22, r1
 7ba:	23 1f       	adc	r18, r19
 7bc:	84 9f       	mul	r24, r20
 7be:	60 0d       	add	r22, r0
 7c0:	21 1d       	adc	r18, r1
 7c2:	82 2f       	mov	r24, r18
 7c4:	76 2f       	mov	r23, r22
 7c6:	6a 2f       	mov	r22, r26
 7c8:	11 24       	eor	r1, r1
 7ca:	9f 57       	subi	r25, 0x7F	; 127
 7cc:	50 40       	sbci	r21, 0x00	; 0
 7ce:	8a f0       	brmi	.+34     	; 0x7f2 <__mulsf3_pse+0x84>
 7d0:	e1 f0       	breq	.+56     	; 0x80a <__mulsf3_pse+0x9c>
 7d2:	88 23       	and	r24, r24
 7d4:	4a f0       	brmi	.+18     	; 0x7e8 <__mulsf3_pse+0x7a>
 7d6:	ee 0f       	add	r30, r30
 7d8:	ff 1f       	adc	r31, r31
 7da:	bb 1f       	adc	r27, r27
 7dc:	66 1f       	adc	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	91 50       	subi	r25, 0x01	; 1
 7e4:	50 40       	sbci	r21, 0x00	; 0
 7e6:	a9 f7       	brne	.-22     	; 0x7d2 <__mulsf3_pse+0x64>
 7e8:	9e 3f       	cpi	r25, 0xFE	; 254
 7ea:	51 05       	cpc	r21, r1
 7ec:	70 f0       	brcs	.+28     	; 0x80a <__mulsf3_pse+0x9c>
 7ee:	14 c0       	rjmp	.+40     	; 0x818 <__fp_inf>
 7f0:	aa cf       	rjmp	.-172    	; 0x746 <__fp_szero>
 7f2:	5f 3f       	cpi	r21, 0xFF	; 255
 7f4:	ec f3       	brlt	.-6      	; 0x7f0 <__mulsf3_pse+0x82>
 7f6:	98 3e       	cpi	r25, 0xE8	; 232
 7f8:	dc f3       	brlt	.-10     	; 0x7f0 <__mulsf3_pse+0x82>
 7fa:	86 95       	lsr	r24
 7fc:	77 95       	ror	r23
 7fe:	67 95       	ror	r22
 800:	b7 95       	ror	r27
 802:	f7 95       	ror	r31
 804:	e7 95       	ror	r30
 806:	9f 5f       	subi	r25, 0xFF	; 255
 808:	c1 f7       	brne	.-16     	; 0x7fa <__mulsf3_pse+0x8c>
 80a:	fe 2b       	or	r31, r30
 80c:	88 0f       	add	r24, r24
 80e:	91 1d       	adc	r25, r1
 810:	96 95       	lsr	r25
 812:	87 95       	ror	r24
 814:	97 f9       	bld	r25, 7
 816:	08 95       	ret

00000818 <__fp_inf>:
 818:	97 f9       	bld	r25, 7
 81a:	9f 67       	ori	r25, 0x7F	; 127
 81c:	80 e8       	ldi	r24, 0x80	; 128
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	08 95       	ret

00000824 <__fp_nan>:
 824:	9f ef       	ldi	r25, 0xFF	; 255
 826:	80 ec       	ldi	r24, 0xC0	; 192
 828:	08 95       	ret

0000082a <__fp_pscA>:
 82a:	00 24       	eor	r0, r0
 82c:	0a 94       	dec	r0
 82e:	16 16       	cp	r1, r22
 830:	17 06       	cpc	r1, r23
 832:	18 06       	cpc	r1, r24
 834:	09 06       	cpc	r0, r25
 836:	08 95       	ret

00000838 <__fp_pscB>:
 838:	00 24       	eor	r0, r0
 83a:	0a 94       	dec	r0
 83c:	12 16       	cp	r1, r18
 83e:	13 06       	cpc	r1, r19
 840:	14 06       	cpc	r1, r20
 842:	05 06       	cpc	r0, r21
 844:	08 95       	ret

00000846 <__fp_round>:
 846:	09 2e       	mov	r0, r25
 848:	03 94       	inc	r0
 84a:	00 0c       	add	r0, r0
 84c:	11 f4       	brne	.+4      	; 0x852 <__fp_round+0xc>
 84e:	88 23       	and	r24, r24
 850:	52 f0       	brmi	.+20     	; 0x866 <__fp_round+0x20>
 852:	bb 0f       	add	r27, r27
 854:	40 f4       	brcc	.+16     	; 0x866 <__fp_round+0x20>
 856:	bf 2b       	or	r27, r31
 858:	11 f4       	brne	.+4      	; 0x85e <__fp_round+0x18>
 85a:	60 ff       	sbrs	r22, 0
 85c:	04 c0       	rjmp	.+8      	; 0x866 <__fp_round+0x20>
 85e:	6f 5f       	subi	r22, 0xFF	; 255
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	08 95       	ret

00000868 <__tablejump2__>:
 868:	ee 0f       	add	r30, r30
 86a:	ff 1f       	adc	r31, r31
 86c:	00 24       	eor	r0, r0
 86e:	00 1c       	adc	r0, r0
 870:	0b be       	out	0x3b, r0	; 59
 872:	07 90       	elpm	r0, Z+
 874:	f6 91       	elpm	r31, Z
 876:	e0 2d       	mov	r30, r0
 878:	09 94       	ijmp

0000087a <malloc>:
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
 87e:	82 30       	cpi	r24, 0x02	; 2
 880:	91 05       	cpc	r25, r1
 882:	10 f4       	brcc	.+4      	; 0x888 <malloc+0xe>
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	e0 91 36 01 	lds	r30, 0x0136
 88c:	f0 91 37 01 	lds	r31, 0x0137
 890:	20 e0       	ldi	r18, 0x00	; 0
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	c0 e0       	ldi	r28, 0x00	; 0
 896:	d0 e0       	ldi	r29, 0x00	; 0
 898:	30 97       	sbiw	r30, 0x00	; 0
 89a:	11 f1       	breq	.+68     	; 0x8e0 <malloc+0x66>
 89c:	40 81       	ld	r20, Z
 89e:	51 81       	ldd	r21, Z+1	; 0x01
 8a0:	48 17       	cp	r20, r24
 8a2:	59 07       	cpc	r21, r25
 8a4:	c0 f0       	brcs	.+48     	; 0x8d6 <malloc+0x5c>
 8a6:	48 17       	cp	r20, r24
 8a8:	59 07       	cpc	r21, r25
 8aa:	61 f4       	brne	.+24     	; 0x8c4 <malloc+0x4a>
 8ac:	82 81       	ldd	r24, Z+2	; 0x02
 8ae:	93 81       	ldd	r25, Z+3	; 0x03
 8b0:	20 97       	sbiw	r28, 0x00	; 0
 8b2:	19 f0       	breq	.+6      	; 0x8ba <malloc+0x40>
 8b4:	9b 83       	std	Y+3, r25	; 0x03
 8b6:	8a 83       	std	Y+2, r24	; 0x02
 8b8:	2b c0       	rjmp	.+86     	; 0x910 <malloc+0x96>
 8ba:	90 93 37 01 	sts	0x0137, r25
 8be:	80 93 36 01 	sts	0x0136, r24
 8c2:	26 c0       	rjmp	.+76     	; 0x910 <malloc+0x96>
 8c4:	21 15       	cp	r18, r1
 8c6:	31 05       	cpc	r19, r1
 8c8:	19 f0       	breq	.+6      	; 0x8d0 <malloc+0x56>
 8ca:	42 17       	cp	r20, r18
 8cc:	53 07       	cpc	r21, r19
 8ce:	18 f4       	brcc	.+6      	; 0x8d6 <malloc+0x5c>
 8d0:	9a 01       	movw	r18, r20
 8d2:	be 01       	movw	r22, r28
 8d4:	df 01       	movw	r26, r30
 8d6:	ef 01       	movw	r28, r30
 8d8:	02 80       	ldd	r0, Z+2	; 0x02
 8da:	f3 81       	ldd	r31, Z+3	; 0x03
 8dc:	e0 2d       	mov	r30, r0
 8de:	dc cf       	rjmp	.-72     	; 0x898 <malloc+0x1e>
 8e0:	21 15       	cp	r18, r1
 8e2:	31 05       	cpc	r19, r1
 8e4:	09 f1       	breq	.+66     	; 0x928 <malloc+0xae>
 8e6:	28 1b       	sub	r18, r24
 8e8:	39 0b       	sbc	r19, r25
 8ea:	24 30       	cpi	r18, 0x04	; 4
 8ec:	31 05       	cpc	r19, r1
 8ee:	90 f4       	brcc	.+36     	; 0x914 <malloc+0x9a>
 8f0:	12 96       	adiw	r26, 0x02	; 2
 8f2:	8d 91       	ld	r24, X+
 8f4:	9c 91       	ld	r25, X
 8f6:	13 97       	sbiw	r26, 0x03	; 3
 8f8:	61 15       	cp	r22, r1
 8fa:	71 05       	cpc	r23, r1
 8fc:	21 f0       	breq	.+8      	; 0x906 <malloc+0x8c>
 8fe:	fb 01       	movw	r30, r22
 900:	93 83       	std	Z+3, r25	; 0x03
 902:	82 83       	std	Z+2, r24	; 0x02
 904:	04 c0       	rjmp	.+8      	; 0x90e <malloc+0x94>
 906:	90 93 37 01 	sts	0x0137, r25
 90a:	80 93 36 01 	sts	0x0136, r24
 90e:	fd 01       	movw	r30, r26
 910:	32 96       	adiw	r30, 0x02	; 2
 912:	44 c0       	rjmp	.+136    	; 0x99c <malloc+0x122>
 914:	fd 01       	movw	r30, r26
 916:	e2 0f       	add	r30, r18
 918:	f3 1f       	adc	r31, r19
 91a:	81 93       	st	Z+, r24
 91c:	91 93       	st	Z+, r25
 91e:	22 50       	subi	r18, 0x02	; 2
 920:	31 09       	sbc	r19, r1
 922:	2d 93       	st	X+, r18
 924:	3c 93       	st	X, r19
 926:	3a c0       	rjmp	.+116    	; 0x99c <malloc+0x122>
 928:	20 91 34 01 	lds	r18, 0x0134
 92c:	30 91 35 01 	lds	r19, 0x0135
 930:	23 2b       	or	r18, r19
 932:	41 f4       	brne	.+16     	; 0x944 <malloc+0xca>
 934:	20 91 02 01 	lds	r18, 0x0102
 938:	30 91 03 01 	lds	r19, 0x0103
 93c:	30 93 35 01 	sts	0x0135, r19
 940:	20 93 34 01 	sts	0x0134, r18
 944:	20 91 00 01 	lds	r18, 0x0100
 948:	30 91 01 01 	lds	r19, 0x0101
 94c:	21 15       	cp	r18, r1
 94e:	31 05       	cpc	r19, r1
 950:	41 f4       	brne	.+16     	; 0x962 <malloc+0xe8>
 952:	2d b7       	in	r18, 0x3d	; 61
 954:	3e b7       	in	r19, 0x3e	; 62
 956:	40 91 04 01 	lds	r20, 0x0104
 95a:	50 91 05 01 	lds	r21, 0x0105
 95e:	24 1b       	sub	r18, r20
 960:	35 0b       	sbc	r19, r21
 962:	e0 91 34 01 	lds	r30, 0x0134
 966:	f0 91 35 01 	lds	r31, 0x0135
 96a:	e2 17       	cp	r30, r18
 96c:	f3 07       	cpc	r31, r19
 96e:	a0 f4       	brcc	.+40     	; 0x998 <malloc+0x11e>
 970:	2e 1b       	sub	r18, r30
 972:	3f 0b       	sbc	r19, r31
 974:	28 17       	cp	r18, r24
 976:	39 07       	cpc	r19, r25
 978:	78 f0       	brcs	.+30     	; 0x998 <malloc+0x11e>
 97a:	ac 01       	movw	r20, r24
 97c:	4e 5f       	subi	r20, 0xFE	; 254
 97e:	5f 4f       	sbci	r21, 0xFF	; 255
 980:	24 17       	cp	r18, r20
 982:	35 07       	cpc	r19, r21
 984:	48 f0       	brcs	.+18     	; 0x998 <malloc+0x11e>
 986:	4e 0f       	add	r20, r30
 988:	5f 1f       	adc	r21, r31
 98a:	50 93 35 01 	sts	0x0135, r21
 98e:	40 93 34 01 	sts	0x0134, r20
 992:	81 93       	st	Z+, r24
 994:	91 93       	st	Z+, r25
 996:	02 c0       	rjmp	.+4      	; 0x99c <malloc+0x122>
 998:	e0 e0       	ldi	r30, 0x00	; 0
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	cf 01       	movw	r24, r30
 99e:	df 91       	pop	r29
 9a0:	cf 91       	pop	r28
 9a2:	08 95       	ret

000009a4 <free>:
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	00 97       	sbiw	r24, 0x00	; 0
 9ae:	09 f4       	brne	.+2      	; 0x9b2 <free+0xe>
 9b0:	8c c0       	rjmp	.+280    	; 0xaca <free+0x126>
 9b2:	fc 01       	movw	r30, r24
 9b4:	32 97       	sbiw	r30, 0x02	; 2
 9b6:	13 82       	std	Z+3, r1	; 0x03
 9b8:	12 82       	std	Z+2, r1	; 0x02
 9ba:	00 91 36 01 	lds	r16, 0x0136
 9be:	10 91 37 01 	lds	r17, 0x0137
 9c2:	01 15       	cp	r16, r1
 9c4:	11 05       	cpc	r17, r1
 9c6:	81 f4       	brne	.+32     	; 0x9e8 <free+0x44>
 9c8:	20 81       	ld	r18, Z
 9ca:	31 81       	ldd	r19, Z+1	; 0x01
 9cc:	82 0f       	add	r24, r18
 9ce:	93 1f       	adc	r25, r19
 9d0:	20 91 34 01 	lds	r18, 0x0134
 9d4:	30 91 35 01 	lds	r19, 0x0135
 9d8:	28 17       	cp	r18, r24
 9da:	39 07       	cpc	r19, r25
 9dc:	79 f5       	brne	.+94     	; 0xa3c <free+0x98>
 9de:	f0 93 35 01 	sts	0x0135, r31
 9e2:	e0 93 34 01 	sts	0x0134, r30
 9e6:	71 c0       	rjmp	.+226    	; 0xaca <free+0x126>
 9e8:	d8 01       	movw	r26, r16
 9ea:	40 e0       	ldi	r20, 0x00	; 0
 9ec:	50 e0       	ldi	r21, 0x00	; 0
 9ee:	ae 17       	cp	r26, r30
 9f0:	bf 07       	cpc	r27, r31
 9f2:	50 f4       	brcc	.+20     	; 0xa08 <free+0x64>
 9f4:	12 96       	adiw	r26, 0x02	; 2
 9f6:	2d 91       	ld	r18, X+
 9f8:	3c 91       	ld	r19, X
 9fa:	13 97       	sbiw	r26, 0x03	; 3
 9fc:	ad 01       	movw	r20, r26
 9fe:	21 15       	cp	r18, r1
 a00:	31 05       	cpc	r19, r1
 a02:	09 f1       	breq	.+66     	; 0xa46 <free+0xa2>
 a04:	d9 01       	movw	r26, r18
 a06:	f3 cf       	rjmp	.-26     	; 0x9ee <free+0x4a>
 a08:	9d 01       	movw	r18, r26
 a0a:	da 01       	movw	r26, r20
 a0c:	33 83       	std	Z+3, r19	; 0x03
 a0e:	22 83       	std	Z+2, r18	; 0x02
 a10:	60 81       	ld	r22, Z
 a12:	71 81       	ldd	r23, Z+1	; 0x01
 a14:	86 0f       	add	r24, r22
 a16:	97 1f       	adc	r25, r23
 a18:	82 17       	cp	r24, r18
 a1a:	93 07       	cpc	r25, r19
 a1c:	69 f4       	brne	.+26     	; 0xa38 <free+0x94>
 a1e:	ec 01       	movw	r28, r24
 a20:	28 81       	ld	r18, Y
 a22:	39 81       	ldd	r19, Y+1	; 0x01
 a24:	26 0f       	add	r18, r22
 a26:	37 1f       	adc	r19, r23
 a28:	2e 5f       	subi	r18, 0xFE	; 254
 a2a:	3f 4f       	sbci	r19, 0xFF	; 255
 a2c:	31 83       	std	Z+1, r19	; 0x01
 a2e:	20 83       	st	Z, r18
 a30:	8a 81       	ldd	r24, Y+2	; 0x02
 a32:	9b 81       	ldd	r25, Y+3	; 0x03
 a34:	93 83       	std	Z+3, r25	; 0x03
 a36:	82 83       	std	Z+2, r24	; 0x02
 a38:	45 2b       	or	r20, r21
 a3a:	29 f4       	brne	.+10     	; 0xa46 <free+0xa2>
 a3c:	f0 93 37 01 	sts	0x0137, r31
 a40:	e0 93 36 01 	sts	0x0136, r30
 a44:	42 c0       	rjmp	.+132    	; 0xaca <free+0x126>
 a46:	13 96       	adiw	r26, 0x03	; 3
 a48:	fc 93       	st	X, r31
 a4a:	ee 93       	st	-X, r30
 a4c:	12 97       	sbiw	r26, 0x02	; 2
 a4e:	ed 01       	movw	r28, r26
 a50:	49 91       	ld	r20, Y+
 a52:	59 91       	ld	r21, Y+
 a54:	9e 01       	movw	r18, r28
 a56:	24 0f       	add	r18, r20
 a58:	35 1f       	adc	r19, r21
 a5a:	e2 17       	cp	r30, r18
 a5c:	f3 07       	cpc	r31, r19
 a5e:	71 f4       	brne	.+28     	; 0xa7c <free+0xd8>
 a60:	80 81       	ld	r24, Z
 a62:	91 81       	ldd	r25, Z+1	; 0x01
 a64:	84 0f       	add	r24, r20
 a66:	95 1f       	adc	r25, r21
 a68:	02 96       	adiw	r24, 0x02	; 2
 a6a:	11 96       	adiw	r26, 0x01	; 1
 a6c:	9c 93       	st	X, r25
 a6e:	8e 93       	st	-X, r24
 a70:	82 81       	ldd	r24, Z+2	; 0x02
 a72:	93 81       	ldd	r25, Z+3	; 0x03
 a74:	13 96       	adiw	r26, 0x03	; 3
 a76:	9c 93       	st	X, r25
 a78:	8e 93       	st	-X, r24
 a7a:	12 97       	sbiw	r26, 0x02	; 2
 a7c:	e0 e0       	ldi	r30, 0x00	; 0
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	d8 01       	movw	r26, r16
 a82:	12 96       	adiw	r26, 0x02	; 2
 a84:	8d 91       	ld	r24, X+
 a86:	9c 91       	ld	r25, X
 a88:	13 97       	sbiw	r26, 0x03	; 3
 a8a:	00 97       	sbiw	r24, 0x00	; 0
 a8c:	19 f0       	breq	.+6      	; 0xa94 <free+0xf0>
 a8e:	f8 01       	movw	r30, r16
 a90:	8c 01       	movw	r16, r24
 a92:	f6 cf       	rjmp	.-20     	; 0xa80 <free+0xdc>
 a94:	8d 91       	ld	r24, X+
 a96:	9c 91       	ld	r25, X
 a98:	98 01       	movw	r18, r16
 a9a:	2e 5f       	subi	r18, 0xFE	; 254
 a9c:	3f 4f       	sbci	r19, 0xFF	; 255
 a9e:	82 0f       	add	r24, r18
 aa0:	93 1f       	adc	r25, r19
 aa2:	20 91 34 01 	lds	r18, 0x0134
 aa6:	30 91 35 01 	lds	r19, 0x0135
 aaa:	28 17       	cp	r18, r24
 aac:	39 07       	cpc	r19, r25
 aae:	69 f4       	brne	.+26     	; 0xaca <free+0x126>
 ab0:	30 97       	sbiw	r30, 0x00	; 0
 ab2:	29 f4       	brne	.+10     	; 0xabe <free+0x11a>
 ab4:	10 92 37 01 	sts	0x0137, r1
 ab8:	10 92 36 01 	sts	0x0136, r1
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <free+0x11e>
 abe:	13 82       	std	Z+3, r1	; 0x03
 ac0:	12 82       	std	Z+2, r1	; 0x02
 ac2:	10 93 35 01 	sts	0x0135, r17
 ac6:	00 93 34 01 	sts	0x0134, r16
 aca:	df 91       	pop	r29
 acc:	cf 91       	pop	r28
 ace:	1f 91       	pop	r17
 ad0:	0f 91       	pop	r16
 ad2:	08 95       	ret

00000ad4 <_exit>:
 ad4:	f8 94       	cli

00000ad6 <__stop_program>:
 ad6:	ff cf       	rjmp	.-2      	; 0xad6 <__stop_program>
