
Sensorenheten_6_2(10)_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000a6c  00000b00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080010e  0080010e  00000b0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083c  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002c8  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000861  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000630  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ca  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002ae2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	37 c0       	rjmp	.+110    	; 0xc8 <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	79 c0       	rjmp	.+242    	; 0x154 <__vector_24>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 32       	cpi	r26, 0x29	; 41
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a7 d3       	rcall	.+1870   	; 0x812 <main>
  c4:	d1 c4       	rjmp	.+2466   	; 0xa68 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_22>:
		return 1;
	}
	else{
		return 0;
	}
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	f8 94       	cli
  d6:	80 91 03 01 	lds	r24, 0x0103
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	a9 f0       	breq	.+42     	; 0x108 <__vector_22+0x40>
  de:	28 f4       	brcc	.+10     	; 0xea <__vector_22+0x22>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	41 f0       	breq	.+16     	; 0xf4 <__vector_22+0x2c>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	59 f0       	breq	.+22     	; 0xfe <__vector_22+0x36>
  e8:	1d c0       	rjmp	.+58     	; 0x124 <__vector_22+0x5c>
  ea:	84 30       	cpi	r24, 0x04	; 4
  ec:	91 f0       	breq	.+36     	; 0x112 <__vector_22+0x4a>
  ee:	85 30       	cpi	r24, 0x05	; 5
  f0:	a9 f0       	breq	.+42     	; 0x11c <__vector_22+0x54>
  f2:	18 c0       	rjmp	.+48     	; 0x124 <__vector_22+0x5c>
  f4:	80 91 09 01 	lds	r24, 0x0109
  f8:	80 93 c6 00 	sts	0x00C6, r24
  fc:	13 c0       	rjmp	.+38     	; 0x124 <__vector_22+0x5c>
  fe:	80 91 08 01 	lds	r24, 0x0108
 102:	80 93 c6 00 	sts	0x00C6, r24
 106:	0e c0       	rjmp	.+28     	; 0x124 <__vector_22+0x5c>
 108:	80 91 07 01 	lds	r24, 0x0107
 10c:	80 93 c6 00 	sts	0x00C6, r24
 110:	09 c0       	rjmp	.+18     	; 0x124 <__vector_22+0x5c>
 112:	80 91 06 01 	lds	r24, 0x0106
 116:	80 93 c6 00 	sts	0x00C6, r24
 11a:	04 c0       	rjmp	.+8      	; 0x124 <__vector_22+0x5c>
 11c:	80 91 05 01 	lds	r24, 0x0105
 120:	80 93 c6 00 	sts	0x00C6, r24
 124:	80 91 03 01 	lds	r24, 0x0103
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	86 30       	cpi	r24, 0x06	; 6
 12c:	18 f4       	brcc	.+6      	; 0x134 <__vector_22+0x6c>
 12e:	80 93 03 01 	sts	0x0103, r24
 132:	03 c0       	rjmp	.+6      	; 0x13a <__vector_22+0x72>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 03 01 	sts	0x0103, r24
 13a:	78 94       	sei
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <_Z11clearADCMUXv>:

/*
	Resets the MUX counter for the ADC.
*/
void clearADCMUX(){
	ADMUX &= 0b11100000;
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 7e       	andi	r24, 0xE0	; 224
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <__vector_24>:
}

/*
	Interrupt function for ADC
*/
ISR(ADC_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	0b b6       	in	r0, 0x3b	; 59
 160:	0f 92       	push	r0
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	cli();
 17a:	f8 94       	cli
	uint8_t lowbits = ADCL;
 17c:	80 91 78 00 	lds	r24, 0x0078
	uint16_t message = ADCH <<8 | lowbits;
 180:	20 91 79 00 	lds	r18, 0x0079
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	92 2b       	or	r25, r18
	//enable interrupts
	sei();
 188:	78 94       	sei
	uint8_t inbetween = 0;
	switch(ADCcount){
 18a:	20 91 04 01 	lds	r18, 0x0104
 18e:	21 30       	cpi	r18, 0x01	; 1
 190:	29 f1       	breq	.+74     	; 0x1dc <__vector_24+0x88>
 192:	20 f0       	brcs	.+8      	; 0x19c <__vector_24+0x48>
 194:	22 30       	cpi	r18, 0x02	; 2
 196:	09 f4       	brne	.+2      	; 0x19a <__vector_24+0x46>
 198:	53 c0       	rjmp	.+166    	; 0x240 <__vector_24+0xec>
 19a:	6d c0       	rjmp	.+218    	; 0x276 <__vector_24+0x122>
		case GYRO:
			message >>= 2; //Divide by 4
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
			message4 &= 0b00000111; //Reset bits
			message4 |= (message<<LOWERBITSGYRO_INDEX);
 1a4:	38 2f       	mov	r19, r24
 1a6:	33 0f       	add	r19, r19
 1a8:	33 0f       	add	r19, r19
 1aa:	33 0f       	add	r19, r19
	sei();
	uint8_t inbetween = 0;
	switch(ADCcount){
		case GYRO:
			message >>= 2; //Divide by 4
			message4 &= 0b00000111; //Reset bits
 1ac:	20 91 06 01 	lds	r18, 0x0106
 1b0:	27 70       	andi	r18, 0x07	; 7
			message4 |= (message<<LOWERBITSGYRO_INDEX);
 1b2:	23 2b       	or	r18, r19
 1b4:	20 93 06 01 	sts	0x0106, r18
			message5 &= 0b11000111; //Reset bits
			message5 |= ((message>>2) & 0b00111000);
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	88 73       	andi	r24, 0x38	; 56
	switch(ADCcount){
		case GYRO:
			message >>= 2; //Divide by 4
			message4 &= 0b00000111; //Reset bits
			message4 |= (message<<LOWERBITSGYRO_INDEX);
			message5 &= 0b11000111; //Reset bits
 1c2:	90 91 05 01 	lds	r25, 0x0105
 1c6:	97 7c       	andi	r25, 0xC7	; 199
			message5 |= ((message>>2) & 0b00111000);
 1c8:	89 2b       	or	r24, r25
 1ca:	80 93 05 01 	sts	0x0105, r24
			clearADCMUX();
 1ce:	bc df       	rcall	.-136    	; 0x148 <_Z11clearADCMUXv>
			ADMUX |= 1;
 1d0:	ec e7       	ldi	r30, 0x7C	; 124
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	80 83       	st	Z, r24
			break;
 1da:	4d c0       	rjmp	.+154    	; 0x276 <__vector_24+0x122>
		case TAPESENSOR1:
			//clear TAPESENSOR1_INDEX bit
			message5 &= 0b10111111;
 1dc:	40 91 05 01 	lds	r20, 0x0105
 1e0:	4f 7b       	andi	r20, 0xBF	; 191
			tape1CurrentValue = message; //Save current value, used for calibration
 1e2:	90 93 28 01 	sts	0x0128, r25
 1e6:	80 93 27 01 	sts	0x0127, r24
 1ea:	9c 01       	movw	r18, r24
 1ec:	36 95       	lsr	r19
 1ee:	27 95       	ror	r18
 1f0:	36 95       	lsr	r19
 1f2:	27 95       	ror	r18
			//mask in actual value
			//debug
			message3 &= 0b00000111;
			inbetween = (message >> 5);
			message3 |= (inbetween << 3);
 1f4:	28 7f       	andi	r18, 0xF8	; 248
 1f6:	37 70       	andi	r19, 0x07	; 7
			//clear TAPESENSOR1_INDEX bit
			message5 &= 0b10111111;
			tape1CurrentValue = message; //Save current value, used for calibration
			//mask in actual value
			//debug
			message3 &= 0b00000111;
 1f8:	30 91 07 01 	lds	r19, 0x0107
 1fc:	37 70       	andi	r19, 0x07	; 7
			inbetween = (message >> 5);
			message3 |= (inbetween << 3);
 1fe:	23 2b       	or	r18, r19
 200:	20 93 07 01 	sts	0x0107, r18
/*
	Check if the converted value from the tape sensors indicate tape or not.
	Returns 1 if tape.
*/
uint8_t tapeCheck(uint16_t message, uint8_t tapeSensorNumber){
	if((tapeSensorNumber == 1 && message >= tape1Threshold) || (tapeSensorNumber == 2 && message >= tape2Threshold)){
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	60 91 0c 01 	lds	r22, 0x010C
 20c:	70 91 0d 01 	lds	r23, 0x010D
 210:	86 17       	cp	r24, r22
 212:	97 07       	cpc	r25, r23
 214:	10 f4       	brcc	.+4      	; 0x21a <__vector_24+0xc6>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
			//debug
			message3 &= 0b00000111;
			inbetween = (message >> 5);
			message3 |= (inbetween << 3);
			//!!!
			message5 |= (tapeCheck(message, 1)<<TAPESENSOR1_INDEX);
 21a:	00 24       	eor	r0, r0
 21c:	36 95       	lsr	r19
 21e:	27 95       	ror	r18
 220:	07 94       	ror	r0
 222:	36 95       	lsr	r19
 224:	27 95       	ror	r18
 226:	07 94       	ror	r0
 228:	32 2f       	mov	r19, r18
 22a:	20 2d       	mov	r18, r0
 22c:	24 2b       	or	r18, r20
 22e:	20 93 05 01 	sts	0x0105, r18
			//next muxed ADC
			clearADCMUX();
 232:	8a df       	rcall	.-236    	; 0x148 <_Z11clearADCMUXv>
			ADMUX |= 2;
 234:	ec e7       	ldi	r30, 0x7C	; 124
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	80 83       	st	Z, r24
			break;
 23e:	1b c0       	rjmp	.+54     	; 0x276 <__vector_24+0x122>
		case TAPESENSOR2:
			//clear TAPESENSOR2_INDEX bit
			message5 &= 0b01111111;
 240:	40 91 05 01 	lds	r20, 0x0105
 244:	4f 77       	andi	r20, 0x7F	; 127
			tape2CurrentValue = message; //Save current value, used for calibration
 246:	90 93 26 01 	sts	0x0126, r25
 24a:	80 93 25 01 	sts	0x0125, r24
/*
	Check if the converted value from the tape sensors indicate tape or not.
	Returns 1 if tape.
*/
uint8_t tapeCheck(uint16_t message, uint8_t tapeSensorNumber){
	if((tapeSensorNumber == 1 && message >= tape1Threshold) || (tapeSensorNumber == 2 && message >= tape2Threshold)){
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	60 91 0a 01 	lds	r22, 0x010A
 256:	70 91 0b 01 	lds	r23, 0x010B
 25a:	86 17       	cp	r24, r22
 25c:	97 07       	cpc	r25, r23
 25e:	10 f4       	brcc	.+4      	; 0x264 <__vector_24+0x110>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
		case TAPESENSOR2:
			//clear TAPESENSOR2_INDEX bit
			message5 &= 0b01111111;
			tape2CurrentValue = message; //Save current value, used for calibration
			//mask in actual value
			message5 |= (tapeCheck(message, 2)<<TAPESENSOR2_INDEX);
 264:	36 95       	lsr	r19
 266:	32 2f       	mov	r19, r18
 268:	22 27       	eor	r18, r18
 26a:	37 95       	ror	r19
 26c:	27 95       	ror	r18
 26e:	24 2b       	or	r18, r20
 270:	20 93 05 01 	sts	0x0105, r18
			//next muxed ADC
			clearADCMUX();
 274:	69 df       	rcall	.-302    	; 0x148 <_Z11clearADCMUXv>
			//MUX to IRSENSOR-ADC?
			break;
	}
	
	ADCcount++;
 276:	80 91 04 01 	lds	r24, 0x0104
 27a:	8f 5f       	subi	r24, 0xFF	; 255
	//go around
	if(ADCcount >= NUMBER_OF_ADC_SENSORS){
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	18 f4       	brcc	.+6      	; 0x286 <__vector_24+0x132>
			clearADCMUX();
			//MUX to IRSENSOR-ADC?
			break;
	}
	
	ADCcount++;
 280:	80 93 04 01 	sts	0x0104, r24
 284:	03 c0       	rjmp	.+6      	; 0x28c <__vector_24+0x138>
	//go around
	if(ADCcount >= NUMBER_OF_ADC_SENSORS){
		 ADCcount = 0;
 286:	10 92 04 01 	sts	0x0104, r1
		 clearADCMUX();
 28a:	5e df       	rcall	.-324    	; 0x148 <_Z11clearADCMUXv>
	}
	
	//Start next conversion
	ADCSRA |= (1 << ADSC);
 28c:	ea e7       	ldi	r30, 0x7A	; 122
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	80 83       	st	Z, r24
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0b be       	out	0x3b, r0	; 59
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <_Z16resetTimerValuesv>:

/*
	Resets timer 2.
*/
void resetTimerValues() {
	TCNT2 = 0;
 2bc:	10 92 b2 00 	sts	0x00B2, r1
	timer = 0;
 2c0:	10 92 17 01 	sts	0x0117, r1
 2c4:	10 92 16 01 	sts	0x0116, r1
 2c8:	08 95       	ret

000002ca <_Z10StartPulsev>:
/*
	Startpulse for the ultrasonic sensor.
*/
void StartPulse() {
	//set trigger to high
	if (!triggerStarted) {
 2ca:	80 91 13 01 	lds	r24, 0x0113
 2ce:	81 11       	cpse	r24, r1
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <_Z10StartPulsev+0x1a>
		triggerStarted = true;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 13 01 	sts	0x0113, r24
		PORTB |= (1 << PULSE_TRIGGER_PIN1);
 2d8:	29 9a       	sbi	0x05, 1	; 5
		resetTimerValues();
 2da:	f0 df       	rcall	.-32     	; 0x2bc <_Z16resetTimerValuesv>
	}
	
	//set trigger to low
	if (triggerStarted && timer == 10) { // and at least 15 us has passed.
 2dc:	80 91 13 01 	lds	r24, 0x0113
 2e0:	88 23       	and	r24, r24
 2e2:	59 f0       	breq	.+22     	; 0x2fa <_Z10StartPulsev+0x30>
 2e4:	80 91 16 01 	lds	r24, 0x0116
 2e8:	90 91 17 01 	lds	r25, 0x0117
 2ec:	0a 97       	sbiw	r24, 0x0a	; 10
 2ee:	29 f4       	brne	.+10     	; 0x2fa <_Z10StartPulsev+0x30>
		triggerSend = true;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 12 01 	sts	0x0112, r24
		PORTB &= ~(1 << PULSE_TRIGGER_PIN1);
 2f6:	29 98       	cbi	0x05, 1	; 5
		resetTimerValues();
 2f8:	e1 cf       	rjmp	.-62     	; 0x2bc <_Z16resetTimerValuesv>
 2fa:	08 95       	ret

000002fc <_Z17calculateDistancev>:


/*
	Returns the distance from the ultrasonic sensor.
*/
float calculateDistance() {
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
	// 12 is time per tick.
	//divide 1000000 to make it to meters.
	int uTime = timer * MICRO_SEC_PER_TICK;
 304:	20 91 16 01 	lds	r18, 0x0116
 308:	30 91 17 01 	lds	r19, 0x0117
 30c:	4a e2       	ldi	r20, 0x2A	; 42
 30e:	42 9f       	mul	r20, r18
 310:	c0 01       	movw	r24, r0
 312:	43 9f       	mul	r20, r19
 314:	90 0d       	add	r25, r0
 316:	11 24       	eor	r1, r1
	//float seconds = uTime / 100;
	float centiMeters = uTime/58;
 318:	6a e3       	ldi	r22, 0x3A	; 58
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	7e d3       	rcall	.+1788   	; 0xa1a <__divmodhi4>
 31e:	07 2e       	mov	r0, r23
 320:	00 0c       	add	r0, r0
 322:	88 0b       	sbc	r24, r24
 324:	99 0b       	sbc	r25, r25
 326:	ed d2       	rcall	.+1498   	; 0x902 <__floatsisf>
 328:	06 2f       	mov	r16, r22
 32a:	17 2f       	mov	r17, r23
 32c:	d8 2f       	mov	r29, r24
 32e:	c9 2f       	mov	r28, r25
	if (centiMeters > 240) return 240;
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 e7       	ldi	r20, 0x70	; 112
 336:	53 e4       	ldi	r21, 0x43	; 67
 338:	48 d3       	rcall	.+1680   	; 0x9ca <__gesf2>
 33a:	18 16       	cp	r1, r24
 33c:	24 f4       	brge	.+8      	; 0x346 <_Z17calculateDistancev+0x4a>
 33e:	00 e0       	ldi	r16, 0x00	; 0
 340:	10 e0       	ldi	r17, 0x00	; 0
 342:	d0 e7       	ldi	r29, 0x70	; 112
 344:	c3 e4       	ldi	r28, 0x43	; 67
	return centiMeters;
}
 346:	60 2f       	mov	r22, r16
 348:	71 2f       	mov	r23, r17
 34a:	8d 2f       	mov	r24, r29
 34c:	9c 2f       	mov	r25, r28
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	08 95       	ret

00000358 <_Z13CalculateTimev>:
/*
	Calculates the time that the pulse to took return.
*/
void CalculateTime() {
	//when echo output is high, start timer.
	if (!timeTaken && triggerSend && !timerStarted && (PINB & (1<<ECHO_PIN1))) {
 358:	80 91 10 01 	lds	r24, 0x0110
 35c:	81 11       	cpse	r24, r1
 35e:	67 c0       	rjmp	.+206    	; 0x42e <_Z13CalculateTimev+0xd6>
 360:	80 91 12 01 	lds	r24, 0x0112
 364:	88 23       	and	r24, r24
 366:	31 f0       	breq	.+12     	; 0x374 <_Z13CalculateTimev+0x1c>
 368:	80 91 11 01 	lds	r24, 0x0111
 36c:	81 11       	cpse	r24, r1
 36e:	02 c0       	rjmp	.+4      	; 0x374 <_Z13CalculateTimev+0x1c>
 370:	18 99       	sbic	0x03, 0	; 3
 372:	32 c0       	rjmp	.+100    	; 0x3d8 <_Z13CalculateTimev+0x80>
		resetTimerValues();
		
	}
	
	//when echo output is low, stop timer. (save time)
	if (!timeTaken && triggerSend && timerStarted && !(PINB & (1<<ECHO_PIN1))) {
 374:	80 91 12 01 	lds	r24, 0x0112
 378:	88 23       	and	r24, r24
 37a:	09 f4       	brne	.+2      	; 0x37e <_Z13CalculateTimev+0x26>
 37c:	58 c0       	rjmp	.+176    	; 0x42e <_Z13CalculateTimev+0xd6>
 37e:	80 91 11 01 	lds	r24, 0x0111
 382:	88 23       	and	r24, r24
 384:	09 f4       	brne	.+2      	; 0x388 <_Z13CalculateTimev+0x30>
 386:	53 c0       	rjmp	.+166    	; 0x42e <_Z13CalculateTimev+0xd6>
 388:	18 9b       	sbis	0x03, 0	; 3
 38a:	2f c0       	rjmp	.+94     	; 0x3ea <_Z13CalculateTimev+0x92>
 38c:	08 95       	ret
		// CalculateDistance returns a value in cm we need it in dm
		distancecm1 = calculateDistance();
		//check singular number to do correct round up or down
		int singular = (distancecm1 % 100) % 10;
		if(singular >= 5){ 
			distance1 = distancecm1/10 + 1;
 38e:	8d ec       	ldi	r24, 0xCD	; 205
 390:	68 9f       	mul	r22, r24
 392:	61 2d       	mov	r22, r1
 394:	11 24       	eor	r1, r1
 396:	66 95       	lsr	r22
 398:	66 95       	lsr	r22
 39a:	66 95       	lsr	r22
 39c:	6f 5f       	subi	r22, 0xFF	; 255
 39e:	60 93 14 01 	sts	0x0114, r22
 3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <_Z13CalculateTimev+0x5e>
		}
		else{
			distance1 = distancecm1/10;
 3a4:	8d ec       	ldi	r24, 0xCD	; 205
 3a6:	68 9f       	mul	r22, r24
 3a8:	61 2d       	mov	r22, r1
 3aa:	11 24       	eor	r1, r1
 3ac:	66 95       	lsr	r22
 3ae:	66 95       	lsr	r22
 3b0:	66 95       	lsr	r22
 3b2:	60 93 14 01 	sts	0x0114, r22
		}
		message2 &= ~(0b11111<<3); //Reset distance bits
		message2 |= (distance1<<3); //Set UART message with new distance
 3b6:	80 91 14 01 	lds	r24, 0x0114
 3ba:	98 2f       	mov	r25, r24
 3bc:	99 0f       	add	r25, r25
 3be:	99 0f       	add	r25, r25
 3c0:	99 0f       	add	r25, r25
			distance1 = distancecm1/10 + 1;
		}
		else{
			distance1 = distancecm1/10;
		}
		message2 &= ~(0b11111<<3); //Reset distance bits
 3c2:	80 91 08 01 	lds	r24, 0x0108
 3c6:	87 70       	andi	r24, 0x07	; 7
		message2 |= (distance1<<3); //Set UART message with new distance
 3c8:	89 2b       	or	r24, r25
 3ca:	80 93 08 01 	sts	0x0108, r24
		
		resetTimerValues();
 3ce:	76 df       	rcall	.-276    	; 0x2bc <_Z16resetTimerValuesv>
		timeTaken = true;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 10 01 	sts	0x0110, r24
 3d6:	08 95       	ret
	Calculates the time that the pulse to took return.
*/
void CalculateTime() {
	//when echo output is high, start timer.
	if (!timeTaken && triggerSend && !timerStarted && (PINB & (1<<ECHO_PIN1))) {
		timerStarted = true;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	80 93 11 01 	sts	0x0111, r24
		resetTimerValues();
 3de:	6e df       	rcall	.-292    	; 0x2bc <_Z16resetTimerValuesv>
		
	}
	
	//when echo output is low, stop timer. (save time)
	if (!timeTaken && triggerSend && timerStarted && !(PINB & (1<<ECHO_PIN1))) {
 3e0:	80 91 10 01 	lds	r24, 0x0110
 3e4:	88 23       	and	r24, r24
 3e6:	31 f2       	breq	.-116    	; 0x374 <_Z13CalculateTimev+0x1c>
 3e8:	08 95       	ret
		//set timer variables to zero.
		// CalculateDistance returns a value in cm we need it in dm
		distancecm1 = calculateDistance();
 3ea:	88 df       	rcall	.-240    	; 0x2fc <_Z17calculateDistancev>
 3ec:	5c d2       	rcall	.+1208   	; 0x8a6 <__fixunssfsi>
 3ee:	60 93 15 01 	sts	0x0115, r22
		//check singular number to do correct round up or down
		int singular = (distancecm1 % 100) % 10;
 3f2:	89 e2       	ldi	r24, 0x29	; 41
 3f4:	68 9f       	mul	r22, r24
 3f6:	81 2d       	mov	r24, r1
 3f8:	11 24       	eor	r1, r1
 3fa:	82 95       	swap	r24
 3fc:	8f 70       	andi	r24, 0x0F	; 15
 3fe:	96 2f       	mov	r25, r22
 400:	24 e6       	ldi	r18, 0x64	; 100
 402:	82 9f       	mul	r24, r18
 404:	90 19       	sub	r25, r0
 406:	11 24       	eor	r1, r1
 408:	8d ec       	ldi	r24, 0xCD	; 205
 40a:	98 9f       	mul	r25, r24
 40c:	81 2d       	mov	r24, r1
 40e:	11 24       	eor	r1, r1
 410:	86 95       	lsr	r24
 412:	86 95       	lsr	r24
 414:	86 95       	lsr	r24
 416:	88 0f       	add	r24, r24
 418:	28 2f       	mov	r18, r24
 41a:	22 0f       	add	r18, r18
 41c:	22 0f       	add	r18, r18
 41e:	82 0f       	add	r24, r18
 420:	98 1b       	sub	r25, r24
 422:	89 2f       	mov	r24, r25
 424:	90 e0       	ldi	r25, 0x00	; 0
		if(singular >= 5){ 
 426:	05 97       	sbiw	r24, 0x05	; 5
 428:	0c f0       	brlt	.+2      	; 0x42c <_Z13CalculateTimev+0xd4>
 42a:	b1 cf       	rjmp	.-158    	; 0x38e <_Z13CalculateTimev+0x36>
 42c:	bb cf       	rjmp	.-138    	; 0x3a4 <_Z13CalculateTimev+0x4c>
 42e:	08 95       	ret

00000430 <_Z16compareSignaturePhS_>:
}

/*
	Returns true if the signatures are the same.
*/
bool compareSignature(uint8_t* oursignature, uint8_t* signature){
 430:	dc 01       	movw	r26, r24
 432:	fb 01       	movw	r30, r22
	for (int i = 0; i<3;i++){
		if (oursignature[i] != signature[i]){
 434:	9c 91       	ld	r25, X
 436:	80 81       	ld	r24, Z
 438:	98 13       	cpse	r25, r24
 43a:	0e c0       	rjmp	.+28     	; 0x458 <_Z16compareSignaturePhS_+0x28>
 43c:	11 96       	adiw	r26, 0x01	; 1
 43e:	9c 91       	ld	r25, X
 440:	11 97       	sbiw	r26, 0x01	; 1
 442:	81 81       	ldd	r24, Z+1	; 0x01
 444:	98 13       	cpse	r25, r24
 446:	0a c0       	rjmp	.+20     	; 0x45c <_Z16compareSignaturePhS_+0x2c>
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	12 96       	adiw	r26, 0x02	; 2
 44c:	2c 91       	ld	r18, X
 44e:	92 81       	ldd	r25, Z+2	; 0x02
 450:	29 17       	cp	r18, r25
 452:	29 f0       	breq	.+10     	; 0x45e <_Z16compareSignaturePhS_+0x2e>
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	08 95       	ret
			return false;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	08 95       	ret
 45c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
 45e:	08 95       	ret

00000460 <_Z19laserSensorFunctionv>:

/*
	Checks for hit and reactivates the laser sensor 5 seconds after hit.
*/
void laserSensorFunction(){
	if(TCNT3 >= 18000){
 460:	80 91 94 00 	lds	r24, 0x0094
 464:	90 91 95 00 	lds	r25, 0x0095
 468:	80 35       	cpi	r24, 0x50	; 80
 46a:	96 44       	sbci	r25, 0x46	; 70
 46c:	48 f0       	brcs	.+18     	; 0x480 <_Z19laserSensorFunctionv+0x20>
		secsSinceLaserHit++;
 46e:	80 91 0f 01 	lds	r24, 0x010F
 472:	8f 5f       	subi	r24, 0xFF	; 255
 474:	80 93 0f 01 	sts	0x010F, r24
		TCNT3 = 0;
 478:	10 92 95 00 	sts	0x0095, r1
 47c:	10 92 94 00 	sts	0x0094, r1
	}
	if(secsSinceLaserHit >= 5){
 480:	80 91 0f 01 	lds	r24, 0x010F
 484:	85 30       	cpi	r24, 0x05	; 5
 486:	08 f1       	brcs	.+66     	; 0x4ca <_Z19laserSensorFunctionv+0x6a>
		//inactivate
		PORTB |= (1 << LASER_AKTIVERA_PORT);
 488:	2c 9a       	sbi	0x05, 4	; 5
		//reset count
		if(!waitLaserActivation){
 48a:	80 91 0e 01 	lds	r24, 0x010E
 48e:	81 11       	cpse	r24, r1
 490:	07 c0       	rjmp	.+14     	; 0x4a0 <_Z19laserSensorFunctionv+0x40>
			TCNT3 = 0;
 492:	10 92 95 00 	sts	0x0095, r1
 496:	10 92 94 00 	sts	0x0094, r1
			waitLaserActivation = true;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	80 93 0e 01 	sts	0x010E, r24
		}
		//activate, might have to wait if this is too fast here we wait 10 more clock ticks
		if(TCNT3 >= TICKS_TO_WAIT_FOR_ACTIVATE_LASER){
 4a0:	80 91 94 00 	lds	r24, 0x0094
 4a4:	90 91 95 00 	lds	r25, 0x0095
 4a8:	88 3e       	cpi	r24, 0xE8	; 232
 4aa:	93 40       	sbci	r25, 0x03	; 3
 4ac:	70 f0       	brcs	.+28     	; 0x4ca <_Z19laserSensorFunctionv+0x6a>
			PORTB &= ~(1 << LASER_AKTIVERA_PORT);
 4ae:	2c 98       	cbi	0x05, 4	; 5
			TCCR3B &= 0b11111000; //Reset pre-scaler to stop counting
 4b0:	e1 e9       	ldi	r30, 0x91	; 145
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	88 7f       	andi	r24, 0xF8	; 248
 4b8:	80 83       	st	Z, r24
			TCNT3 = 0; //Reset counter
 4ba:	10 92 95 00 	sts	0x0095, r1
 4be:	10 92 94 00 	sts	0x0094, r1
			secsSinceLaserHit = 0;
 4c2:	10 92 0f 01 	sts	0x010F, r1
			waitLaserActivation = false;
 4c6:	10 92 0e 01 	sts	0x010E, r1
		}
	}
	
	//mask LASER bit
	laser = (PINB>>5);
 4ca:	83 b1       	in	r24, 0x03	; 3
 4cc:	85 fb       	bst	r24, 5
 4ce:	88 27       	eor	r24, r24
 4d0:	80 f9       	bld	r24, 0
	laser &= 0b00000001;
 4d2:	80 93 24 01 	sts	0x0124, r24
	if(laser == 0b00000001){
 4d6:	81 30       	cpi	r24, 0x01	; 1
 4d8:	59 f4       	brne	.+22     	; 0x4f0 <_Z19laserSensorFunctionv+0x90>
		message1 &= 0b10111111; //Reset laser bit
 4da:	80 91 09 01 	lds	r24, 0x0109
		message1 |= (laser<<LASER_INDEX); //Mask in new laser bit
 4de:	80 64       	ori	r24, 0x40	; 64
 4e0:	80 93 09 01 	sts	0x0109, r24
		//Start timer with pre-scaler 1024
		TCCR3B |= (1<<CS32) | (1<<CS30);
 4e4:	e1 e9       	ldi	r30, 0x91	; 145
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	85 60       	ori	r24, 0x05	; 5
 4ec:	80 83       	st	Z, r24
 4ee:	08 95       	ret
	}
	else{
		//no hit
		message1 &= 0b10111111;
 4f0:	80 91 09 01 	lds	r24, 0x0109
 4f4:	8f 7b       	andi	r24, 0xBF	; 191
 4f6:	80 93 09 01 	sts	0x0109, r24
 4fa:	08 95       	ret

000004fc <_Z18ultrasonicFunctionv>:
	}
}

void ultrasonicFunction(){
	//in here every 100 us
	if (TCNT2 > 184) {
 4fc:	80 91 b2 00 	lds	r24, 0x00B2
 500:	89 3b       	cpi	r24, 0xB9	; 185
 502:	78 f0       	brcs	.+30     	; 0x522 <_Z18ultrasonicFunctionv+0x26>
		PORTC ^= (1<<PINC1);
 504:	98 b1       	in	r25, 0x08	; 8
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	89 27       	eor	r24, r25
 50a:	88 b9       	out	0x08, r24	; 8
		timer++;
 50c:	80 91 16 01 	lds	r24, 0x0116
 510:	90 91 17 01 	lds	r25, 0x0117
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	90 93 17 01 	sts	0x0117, r25
 51a:	80 93 16 01 	sts	0x0116, r24
		TCNT2 = 0;
 51e:	10 92 b2 00 	sts	0x00B2, r1
	}
	
	if (!triggerSend) {
 522:	80 91 12 01 	lds	r24, 0x0112
 526:	81 11       	cpse	r24, r1
 528:	01 c0       	rjmp	.+2      	; 0x52c <_Z18ultrasonicFunctionv+0x30>
		StartPulse();
 52a:	cf de       	rcall	.-610    	; 0x2ca <_Z10StartPulsev>
	}
	CalculateTime();
 52c:	15 df       	rcall	.-470    	; 0x358 <_Z13CalculateTimev>
	
	//wait at least 10msec
	if (timeTaken && timer == 1000) {
 52e:	80 91 10 01 	lds	r24, 0x0110
 532:	88 23       	and	r24, r24
 534:	79 f0       	breq	.+30     	; 0x554 <_Z18ultrasonicFunctionv+0x58>
 536:	80 91 16 01 	lds	r24, 0x0116
 53a:	90 91 17 01 	lds	r25, 0x0117
 53e:	88 3e       	cpi	r24, 0xE8	; 232
 540:	93 40       	sbci	r25, 0x03	; 3
 542:	41 f4       	brne	.+16     	; 0x554 <_Z18ultrasonicFunctionv+0x58>
		triggerSend = false;
 544:	10 92 12 01 	sts	0x0112, r1
		triggerStarted = false;
 548:	10 92 13 01 	sts	0x0113, r1
		timerStarted = false;
 54c:	10 92 11 01 	sts	0x0111, r1
		timeTaken = false;
 550:	10 92 10 01 	sts	0x0110, r1
 554:	08 95       	ret

00000556 <_Z23waitForActivationSensorv>:

/*
	Wait for press on activation button.
*/
void waitForActivationSensor(){
	while((PIND>>PIND7) == 0){
 556:	1c c0       	rjmp	.+56     	; 0x590 <_Z23waitForActivationSensorv+0x3a>
		//Calibrate tape sensor if the calibration button is pressed.
		if((PINB>>PINB7) == 0){
 558:	83 b1       	in	r24, 0x03	; 3
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	88 0f       	add	r24, r24
 55e:	89 2f       	mov	r24, r25
 560:	88 1f       	adc	r24, r24
 562:	99 0b       	sbc	r25, r25
 564:	89 2b       	or	r24, r25
 566:	a1 f4       	brne	.+40     	; 0x590 <_Z23waitForActivationSensorv+0x3a>
			cli();
 568:	f8 94       	cli
			tape1Threshold = tape1CurrentValue - TAPE1_ERROR_MARGIN; 
 56a:	80 91 27 01 	lds	r24, 0x0127
 56e:	90 91 28 01 	lds	r25, 0x0128
 572:	49 97       	sbiw	r24, 0x19	; 25
 574:	90 93 0d 01 	sts	0x010D, r25
 578:	80 93 0c 01 	sts	0x010C, r24
			tape2Threshold = tape2CurrentValue - TAPE2_ERROR_MARGIN; 
 57c:	80 91 25 01 	lds	r24, 0x0125
 580:	90 91 26 01 	lds	r25, 0x0126
 584:	49 97       	sbiw	r24, 0x19	; 25
 586:	90 93 0b 01 	sts	0x010B, r25
 58a:	80 93 0a 01 	sts	0x010A, r24
			sei();
 58e:	78 94       	sei

/*
	Wait for press on activation button.
*/
void waitForActivationSensor(){
	while((PIND>>PIND7) == 0){
 590:	89 b1       	in	r24, 0x09	; 9
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	88 0f       	add	r24, r24
 596:	89 2f       	mov	r24, r25
 598:	88 1f       	adc	r24, r24
 59a:	99 0b       	sbc	r25, r25
 59c:	89 2b       	or	r24, r25
 59e:	e1 f2       	breq	.-72     	; 0x558 <_Z23waitForActivationSensorv+0x2>
			tape2Threshold = tape2CurrentValue - TAPE2_ERROR_MARGIN; 
			sei();
		}
	}
	return;
}
 5a0:	08 95       	ret

000005a2 <_Z16IRSensorFunctionv>:
/*
	Reads IR-signatures from the IR-sensor
*/
void IRSensorFunction(){
	// If 100 us have passed
	if (TCNT1 > 1842){ //Timer counter
 5a2:	80 91 84 00 	lds	r24, 0x0084
 5a6:	90 91 85 00 	lds	r25, 0x0085
 5aa:	83 33       	cpi	r24, 0x33	; 51
 5ac:	97 40       	sbci	r25, 0x07	; 7
 5ae:	68 f0       	brcs	.+26     	; 0x5ca <_Z16IRSensorFunctionv+0x28>
		IRcount++;
 5b0:	80 91 1b 01 	lds	r24, 0x011B
 5b4:	90 91 1c 01 	lds	r25, 0x011C
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	90 93 1c 01 	sts	0x011C, r25
 5be:	80 93 1b 01 	sts	0x011B, r24
		TCNT1 = 0;
 5c2:	10 92 85 00 	sts	0x0085, r1
 5c6:	10 92 84 00 	sts	0x0084, r1
	}
	
	//start with looking for header
	if(!headerPhase && !signaturePhase){
 5ca:	80 91 1a 01 	lds	r24, 0x011A
 5ce:	81 11       	cpse	r24, r1
 5d0:	0e c0       	rjmp	.+28     	; 0x5ee <_Z16IRSensorFunctionv+0x4c>
 5d2:	80 91 19 01 	lds	r24, 0x0119
 5d6:	81 11       	cpse	r24, r1
 5d8:	25 c0       	rjmp	.+74     	; 0x624 <_Z16IRSensorFunctionv+0x82>
		if(bit_is_clear(PINB, 6)){ // check if header can start
 5da:	1e 99       	sbic	0x03, 6	; 3
 5dc:	61 c0       	rjmp	.+194    	; 0x6a0 <_Z16IRSensorFunctionv+0xfe>
			headerPhase = true;
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	80 93 1a 01 	sts	0x011A, r24
			IRcount = 0;
 5e4:	10 92 1c 01 	sts	0x011C, r1
 5e8:	10 92 1b 01 	sts	0x011B, r1
 5ec:	17 c0       	rjmp	.+46     	; 0x61c <_Z16IRSensorFunctionv+0x7a>
		}
	}
	else if(headerPhase && !signaturePhase){
 5ee:	80 91 19 01 	lds	r24, 0x0119
 5f2:	81 11       	cpse	r24, r1
 5f4:	17 c0       	rjmp	.+46     	; 0x624 <_Z16IRSensorFunctionv+0x82>
		//if header is too short or long redo
		if(bit_is_set(PINB, 6) && ((IRcount < IRheader) || (IRcount > IRheader + 6))){
 5f6:	1e 9b       	sbis	0x03, 6	; 3
 5f8:	cb c0       	rjmp	.+406    	; 0x790 <_Z16IRSensorFunctionv+0x1ee>
 5fa:	80 91 1b 01 	lds	r24, 0x011B
 5fe:	90 91 1c 01 	lds	r25, 0x011C
 602:	44 97       	sbiw	r24, 0x14	; 20
 604:	07 97       	sbiw	r24, 0x07	; 7
 606:	08 f0       	brcs	.+2      	; 0x60a <_Z16IRSensorFunctionv+0x68>
 608:	c0 c0       	rjmp	.+384    	; 0x78a <_Z16IRSensorFunctionv+0x1e8>
 60a:	c2 c0       	rjmp	.+388    	; 0x790 <_Z16IRSensorFunctionv+0x1ee>
			headerPhase = false;
		}
		else if(bit_is_set(PINB, 6) && IRcount >= IRheader){
 60c:	80 91 1b 01 	lds	r24, 0x011B
 610:	90 91 1c 01 	lds	r25, 0x011C
 614:	44 97       	sbiw	r24, 0x14	; 20
 616:	0c f0       	brlt	.+2      	; 0x61a <_Z16IRSensorFunctionv+0x78>
 618:	be c0       	rjmp	.+380    	; 0x796 <_Z16IRSensorFunctionv+0x1f4>
 61a:	42 c0       	rjmp	.+132    	; 0x6a0 <_Z16IRSensorFunctionv+0xfe>
			IRcount = 0;
			pause=true;
		}
	}
	
	if(signaturePhase){
 61c:	80 91 19 01 	lds	r24, 0x0119
 620:	88 23       	and	r24, r24
 622:	f1 f1       	breq	.+124    	; 0x6a0 <_Z16IRSensorFunctionv+0xfe>
		//pauses should be detected as +~400us signals
		if(pause){
 624:	80 91 18 01 	lds	r24, 0x0118
 628:	88 23       	and	r24, r24
 62a:	91 f0       	breq	.+36     	; 0x650 <_Z16IRSensorFunctionv+0xae>
			//if the pause is too short or long we have a mess
			if(bit_is_clear(PINB, 6) && ((IRcount < 5) || (IRcount > 7))){
 62c:	1e 99       	sbic	0x03, 6	; 3
 62e:	c6 c0       	rjmp	.+396    	; 0x7bc <_Z16IRSensorFunctionv+0x21a>
 630:	80 91 1b 01 	lds	r24, 0x011B
 634:	90 91 1c 01 	lds	r25, 0x011C
 638:	05 97       	sbiw	r24, 0x05	; 5
 63a:	03 97       	sbiw	r24, 0x03	; 3
 63c:	08 f0       	brcs	.+2      	; 0x640 <_Z16IRSensorFunctionv+0x9e>
 63e:	b9 c0       	rjmp	.+370    	; 0x7b2 <_Z16IRSensorFunctionv+0x210>
 640:	bd c0       	rjmp	.+378    	; 0x7bc <_Z16IRSensorFunctionv+0x21a>
				signaturePhase = false;
				headerPhase = false;
			}
			//if pause is between 300 to 700 we accept it
			else if(bit_is_clear(PINB, 6)){
				pause=false;
 642:	10 92 18 01 	sts	0x0118, r1
				IRcount = 0;
 646:	10 92 1c 01 	sts	0x011C, r1
 64a:	10 92 1b 01 	sts	0x011B, r1
 64e:	d9 c0       	rjmp	.+434    	; 0x802 <_Z16IRSensorFunctionv+0x260>
			}
		}
		else{
			//if signal was too short or too long we have mixed signal or header
			if(bit_is_set(PINB, 6) && ((IRcount < IRZeroValueMin) || (IRcount > IROneValueMax))){
 650:	1e 9b       	sbis	0x03, 6	; 3
 652:	bc c0       	rjmp	.+376    	; 0x7cc <_Z16IRSensorFunctionv+0x22a>
 654:	80 91 1b 01 	lds	r24, 0x011B
 658:	90 91 1c 01 	lds	r25, 0x011C
 65c:	04 97       	sbiw	r24, 0x04	; 4
 65e:	0a 97       	sbiw	r24, 0x0a	; 10
 660:	08 f0       	brcs	.+2      	; 0x664 <_Z16IRSensorFunctionv+0xc2>
 662:	af c0       	rjmp	.+350    	; 0x7c2 <_Z16IRSensorFunctionv+0x220>
 664:	b3 c0       	rjmp	.+358    	; 0x7cc <_Z16IRSensorFunctionv+0x22a>
				signaturePhase = false;
				headerPhase = false;
			}
			//accept ~1100 to 2000us as a 1
			else if(bit_is_set(PINB, 6) && IRcount > IROneValueMin){
 666:	80 91 1b 01 	lds	r24, 0x011B
 66a:	90 91 1c 01 	lds	r25, 0x011C
 66e:	0a 97       	sbiw	r24, 0x0a	; 10
 670:	0c f0       	brlt	.+2      	; 0x674 <_Z16IRSensorFunctionv+0xd2>
 672:	af c0       	rjmp	.+350    	; 0x7d2 <_Z16IRSensorFunctionv+0x230>
 674:	c3 c0       	rjmp	.+390    	; 0x7fc <_Z16IRSensorFunctionv+0x25a>
				pause = true;
				IRcount = 0;
			}
			//accept 3-10 as a 0 ~300 us to 1000 us
			else if(bit_is_set(PINB, 6)){
				signature[index] = 0;
 676:	80 91 1d 01 	lds	r24, 0x011D
 67a:	90 91 1e 01 	lds	r25, 0x011E
 67e:	fc 01       	movw	r30, r24
 680:	e0 5e       	subi	r30, 0xE0	; 224
 682:	fe 4f       	sbci	r31, 0xFE	; 254
 684:	10 82       	st	Z, r1
				index++;
 686:	01 96       	adiw	r24, 0x01	; 1
 688:	90 93 1e 01 	sts	0x011E, r25
 68c:	80 93 1d 01 	sts	0x011D, r24
				pause = true;
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	80 93 18 01 	sts	0x0118, r24
				IRcount = 0;
 696:	10 92 1c 01 	sts	0x011C, r1
 69a:	10 92 1b 01 	sts	0x011B, r1
 69e:	b1 c0       	rjmp	.+354    	; 0x802 <_Z16IRSensorFunctionv+0x260>
			}
		}
	}
	
	//if full signature has been picked up
	if(index == 3){
 6a0:	80 91 1d 01 	lds	r24, 0x011D
 6a4:	90 91 1e 01 	lds	r25, 0x011E
 6a8:	03 97       	sbiw	r24, 0x03	; 3
 6aa:	09 f0       	breq	.+2      	; 0x6ae <_Z16IRSensorFunctionv+0x10c>
 6ac:	42 c0       	rjmp	.+132    	; 0x732 <_Z16IRSensorFunctionv+0x190>
		if (compareSignature(oursignature, signature)){
 6ae:	60 e2       	ldi	r22, 0x20	; 32
 6b0:	71 e0       	ldi	r23, 0x01	; 1
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	bc de       	rcall	.-648    	; 0x430 <_Z16compareSignaturePhS_>
 6b8:	88 23       	and	r24, r24
 6ba:	19 f0       	breq	.+6      	; 0x6c2 <_Z16IRSensorFunctionv+0x120>
			enemy = false;
 6bc:	10 92 23 01 	sts	0x0123, r1
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <_Z16IRSensorFunctionv+0x126>
		}
		else {
			enemy = true;
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	80 93 23 01 	sts	0x0123, r24
		}
		headerPhase = false;
 6c8:	10 92 1a 01 	sts	0x011A, r1
		signaturePhase = false;
 6cc:	10 92 19 01 	sts	0x0119, r1
		index = 0;
 6d0:	10 92 1e 01 	sts	0x011E, r1
 6d4:	10 92 1d 01 	sts	0x011D, r1
		IRcount = 0;
 6d8:	10 92 1c 01 	sts	0x011C, r1
 6dc:	10 92 1b 01 	sts	0x011B, r1
		
		//Set UART message
		signatureS = (signature[0]<<2) | (signature[1]<<1) | signature[2];
 6e0:	e0 e2       	ldi	r30, 0x20	; 32
 6e2:	f1 e0       	ldi	r31, 0x01	; 1
 6e4:	80 81       	ld	r24, Z
 6e6:	98 2f       	mov	r25, r24
 6e8:	99 0f       	add	r25, r25
 6ea:	99 0f       	add	r25, r25
 6ec:	81 81       	ldd	r24, Z+1	; 0x01
 6ee:	88 0f       	add	r24, r24
 6f0:	89 2b       	or	r24, r25
 6f2:	92 81       	ldd	r25, Z+2	; 0x02
 6f4:	89 2b       	or	r24, r25
 6f6:	80 93 1f 01 	sts	0x011F, r24
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
		index = 0;
		IRcount = 0;
		
		//Set UART message
		signatureS = (signature[0]<<2) | (signature[1]<<1) | signature[2];
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
 708:	20 91 09 01 	lds	r18, 0x0109
 70c:	27 7c       	andi	r18, 0xC7	; 199
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 70e:	28 2b       	or	r18, r24
		(enemy ? message1 |= (1<<IRSENSOR_INDEX) : message1 &= ~(1<<IRSENSOR_INDEX));
 710:	30 91 23 01 	lds	r19, 0x0123
 714:	33 23       	and	r19, r19
 716:	21 f0       	breq	.+8      	; 0x720 <_Z16IRSensorFunctionv+0x17e>
 718:	20 68       	ori	r18, 0x80	; 128
 71a:	20 93 09 01 	sts	0x0109, r18
 71e:	03 c0       	rjmp	.+6      	; 0x726 <_Z16IRSensorFunctionv+0x184>
 720:	2f 77       	andi	r18, 0x7F	; 127
 722:	20 93 09 01 	sts	0x0109, r18
		//send signature in message3 for debug(old ultrasonic sensor 2)
		message3 &= 0b00000111;
 726:	90 91 07 01 	lds	r25, 0x0107
 72a:	97 70       	andi	r25, 0x07	; 7
		message3 |= (signatureS << 3);
 72c:	89 2b       	or	r24, r25
 72e:	80 93 07 01 	sts	0x0107, r24
	}
	
	//update with our signature (default) if no signature spotted
	if (IRcount == IRheader * 10){
 732:	80 91 1b 01 	lds	r24, 0x011B
 736:	90 91 1c 01 	lds	r25, 0x011C
 73a:	88 3c       	cpi	r24, 0xC8	; 200
 73c:	91 05       	cpc	r25, r1
 73e:	09 f0       	breq	.+2      	; 0x742 <_Z16IRSensorFunctionv+0x1a0>
 740:	67 c0       	rjmp	.+206    	; 0x810 <_Z16IRSensorFunctionv+0x26e>
		enemy = false;
 742:	10 92 23 01 	sts	0x0123, r1
		//Set UART message
		signatureS = (oursignature[0]<<2) | (oursignature[1]<<1) | oursignature[2];
 746:	e0 e0       	ldi	r30, 0x00	; 0
 748:	f1 e0       	ldi	r31, 0x01	; 1
 74a:	80 81       	ld	r24, Z
 74c:	98 2f       	mov	r25, r24
 74e:	99 0f       	add	r25, r25
 750:	99 0f       	add	r25, r25
 752:	81 81       	ldd	r24, Z+1	; 0x01
 754:	88 0f       	add	r24, r24
 756:	89 2b       	or	r24, r25
 758:	92 81       	ldd	r25, Z+2	; 0x02
 75a:	89 2b       	or	r24, r25
 75c:	80 93 1f 01 	sts	0x011F, r24
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
	//update with our signature (default) if no signature spotted
	if (IRcount == IRheader * 10){
		enemy = false;
		//Set UART message
		signatureS = (oursignature[0]<<2) | (oursignature[1]<<1) | oursignature[2];
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
 76e:	90 91 09 01 	lds	r25, 0x0109
 772:	97 7c       	andi	r25, 0xC7	; 199
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 774:	98 2b       	or	r25, r24
		(enemy ? message1 |= (1<<IRSENSOR_INDEX) : message1 &= ~(1<<IRSENSOR_INDEX));
 776:	9f 77       	andi	r25, 0x7F	; 127
 778:	90 93 09 01 	sts	0x0109, r25
		//send signature in message3 for debug(old ultrasonic sensor 2)
		message3 &= 0b00000111;
 77c:	90 91 07 01 	lds	r25, 0x0107
 780:	97 70       	andi	r25, 0x07	; 7
		message3 |= (signatureS << 3);
 782:	89 2b       	or	r24, r25
 784:	80 93 07 01 	sts	0x0107, r24
 788:	08 95       	ret
		}
	}
	else if(headerPhase && !signaturePhase){
		//if header is too short or long redo
		if(bit_is_set(PINB, 6) && ((IRcount < IRheader) || (IRcount > IRheader + 6))){
			headerPhase = false;
 78a:	10 92 1a 01 	sts	0x011A, r1
 78e:	46 cf       	rjmp	.-372    	; 0x61c <_Z16IRSensorFunctionv+0x7a>
		}
		else if(bit_is_set(PINB, 6) && IRcount >= IRheader){
 790:	1e 99       	sbic	0x03, 6	; 3
 792:	3c cf       	rjmp	.-392    	; 0x60c <_Z16IRSensorFunctionv+0x6a>
 794:	85 cf       	rjmp	.-246    	; 0x6a0 <_Z16IRSensorFunctionv+0xfe>
			signaturePhase = true;
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	80 93 19 01 	sts	0x0119, r24
			index = 0;
 79c:	10 92 1e 01 	sts	0x011E, r1
 7a0:	10 92 1d 01 	sts	0x011D, r1
			IRcount = 0;
 7a4:	10 92 1c 01 	sts	0x011C, r1
 7a8:	10 92 1b 01 	sts	0x011B, r1
			pause=true;
 7ac:	80 93 18 01 	sts	0x0118, r24
 7b0:	3d cf       	rjmp	.-390    	; 0x62c <_Z16IRSensorFunctionv+0x8a>
	if(signaturePhase){
		//pauses should be detected as +~400us signals
		if(pause){
			//if the pause is too short or long we have a mess
			if(bit_is_clear(PINB, 6) && ((IRcount < 5) || (IRcount > 7))){
				signaturePhase = false;
 7b2:	10 92 19 01 	sts	0x0119, r1
				headerPhase = false;
 7b6:	10 92 1a 01 	sts	0x011A, r1
 7ba:	72 cf       	rjmp	.-284    	; 0x6a0 <_Z16IRSensorFunctionv+0xfe>
			}
			//if pause is between 300 to 700 we accept it
			else if(bit_is_clear(PINB, 6)){
 7bc:	1e 9b       	sbis	0x03, 6	; 3
 7be:	41 cf       	rjmp	.-382    	; 0x642 <_Z16IRSensorFunctionv+0xa0>
 7c0:	6f cf       	rjmp	.-290    	; 0x6a0 <_Z16IRSensorFunctionv+0xfe>
			}
		}
		else{
			//if signal was too short or too long we have mixed signal or header
			if(bit_is_set(PINB, 6) && ((IRcount < IRZeroValueMin) || (IRcount > IROneValueMax))){
				signaturePhase = false;
 7c2:	10 92 19 01 	sts	0x0119, r1
				headerPhase = false;
 7c6:	10 92 1a 01 	sts	0x011A, r1
 7ca:	6a cf       	rjmp	.-300    	; 0x6a0 <_Z16IRSensorFunctionv+0xfe>
			}
			//accept ~1100 to 2000us as a 1
			else if(bit_is_set(PINB, 6) && IRcount > IROneValueMin){
 7cc:	1e 99       	sbic	0x03, 6	; 3
 7ce:	4b cf       	rjmp	.-362    	; 0x666 <_Z16IRSensorFunctionv+0xc4>
 7d0:	15 c0       	rjmp	.+42     	; 0x7fc <_Z16IRSensorFunctionv+0x25a>
				signature[index] = 1;
 7d2:	80 91 1d 01 	lds	r24, 0x011D
 7d6:	90 91 1e 01 	lds	r25, 0x011E
 7da:	fc 01       	movw	r30, r24
 7dc:	e0 5e       	subi	r30, 0xE0	; 224
 7de:	fe 4f       	sbci	r31, 0xFE	; 254
 7e0:	21 e0       	ldi	r18, 0x01	; 1
 7e2:	20 83       	st	Z, r18
				index++;
 7e4:	01 96       	adiw	r24, 0x01	; 1
 7e6:	90 93 1e 01 	sts	0x011E, r25
 7ea:	80 93 1d 01 	sts	0x011D, r24
				pause = true;
 7ee:	20 93 18 01 	sts	0x0118, r18
				IRcount = 0;
 7f2:	10 92 1c 01 	sts	0x011C, r1
 7f6:	10 92 1b 01 	sts	0x011B, r1
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <_Z16IRSensorFunctionv+0x260>
			}
			//accept 3-10 as a 0 ~300 us to 1000 us
			else if(bit_is_set(PINB, 6)){
 7fc:	1e 99       	sbic	0x03, 6	; 3
 7fe:	3b cf       	rjmp	.-394    	; 0x676 <_Z16IRSensorFunctionv+0xd4>
 800:	4f cf       	rjmp	.-354    	; 0x6a0 <_Z16IRSensorFunctionv+0xfe>
			}
		}
	}
	
	//if full signature has been picked up
	if(index == 3){
 802:	80 91 1d 01 	lds	r24, 0x011D
 806:	90 91 1e 01 	lds	r25, 0x011E
 80a:	03 97       	sbiw	r24, 0x03	; 3
 80c:	09 f4       	brne	.+2      	; 0x810 <_Z16IRSensorFunctionv+0x26e>
 80e:	4f cf       	rjmp	.-354    	; 0x6ae <_Z16IRSensorFunctionv+0x10c>
 810:	08 95       	ret

00000812 <main>:
	PIN3: Ultrasonic 2		(out)
	PIN4: Laser Aktivera	(out)
	PIN5: Laser				(in)
	*/
	
	DDRD &= ~(1<<PIND7); //Aktiveringsknapp (in)
 812:	57 98       	cbi	0x0a, 7	; 10
	DDRB = 0b00011110;
 814:	8e e1       	ldi	r24, 0x1E	; 30
 816:	84 b9       	out	0x04, r24	; 4
	//DDRB = 0b11011110;
		
	//enable global interrupt
	sei();
 818:	78 94       	sei
	
	//Ultrasonic
	TCCR2B |= 1 << CS20; // Start timer
 81a:	e1 eb       	ldi	r30, 0xB1	; 177
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	80 81       	ld	r24, Z
 820:	81 60       	ori	r24, 0x01	; 1
 822:	80 83       	st	Z, r24
	TCNT2 = 0;
 824:	10 92 b2 00 	sts	0x00B2, r1
	//###############
	//## ADC INITS ##
	//###############
		
	//turn on ADC
	ADCSRA |= (1 << ADEN);
 828:	ea e7       	ldi	r30, 0x7A	; 122
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	80 68       	ori	r24, 0x80	; 128
 830:	80 83       	st	Z, r24
	//Set ADC clock to 1000 000 / 128 Hz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) ;
 832:	80 81       	ld	r24, Z
 834:	87 60       	ori	r24, 0x07	; 7
 836:	80 83       	st	Z, r24
	//ADC interrupt enabled
	ADCSRA |= (1 << ADIE);
 838:	80 81       	ld	r24, Z
 83a:	88 60       	ori	r24, 0x08	; 8
 83c:	80 83       	st	Z, r24
	//mux PINA0, start with TAPE
	ADMUX |= (1<<PINA0);
 83e:	ac e7       	ldi	r26, 0x7C	; 124
 840:	b0 e0       	ldi	r27, 0x00	; 0
 842:	8c 91       	ld	r24, X
 844:	81 60       	ori	r24, 0x01	; 1
 846:	8c 93       	st	X, r24
	//################
	
	//initiate UART målsökning
	//set baud rate
	uint16_t UBRR_val = UBRR_SENSOR_MALSOKNING;
	UBRR0H = (unsigned char) (UBRR_val >> 8);
 848:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) UBRR_val;
 84c:	87 e7       	ldi	r24, 0x77	; 119
 84e:	80 93 c4 00 	sts	0x00C4, r24
	//enable transmit + set frame 8 bits
	UCSR0B = (1<<TXEN0);
 852:	a1 ec       	ldi	r26, 0xC1	; 193
 854:	b0 e0       	ldi	r27, 0x00	; 0
 856:	88 e0       	ldi	r24, 0x08	; 8
 858:	8c 93       	st	X, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
 85a:	86 e0       	ldi	r24, 0x06	; 6
 85c:	80 93 c2 00 	sts	0x00C2, r24
	//enable transmit interrupt
	UCSR0B |= (1<<TXCIE0);
 860:	8c 91       	ld	r24, X
 862:	80 64       	ori	r24, 0x40	; 64
 864:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 866:	2f ef       	ldi	r18, 0xFF	; 255
 868:	8f e9       	ldi	r24, 0x9F	; 159
 86a:	95 e0       	ldi	r25, 0x05	; 5
 86c:	21 50       	subi	r18, 0x01	; 1
 86e:	80 40       	sbci	r24, 0x00	; 0
 870:	90 40       	sbci	r25, 0x00	; 0
 872:	e1 f7       	brne	.-8      	; 0x86c <main+0x5a>
 874:	00 c0       	rjmp	.+0      	; 0x876 <main+0x64>
 876:	00 00       	nop
	
	//inactivate, must wait for power up
	_delay_ms(100);
	PORTB |= (1 << LASER_AKTIVERA_PORT);
 878:	2c 9a       	sbi	0x05, 4	; 5
 87a:	8f ef       	ldi	r24, 0xFF	; 255
 87c:	93 eb       	ldi	r25, 0xB3	; 179
 87e:	01 97       	sbiw	r24, 0x01	; 1
 880:	f1 f7       	brne	.-4      	; 0x87e <main+0x6c>
 882:	00 c0       	rjmp	.+0      	; 0x884 <main+0x72>
 884:	00 00       	nop
	_delay_ms(10);
	PORTB &= ~(1 << LASER_AKTIVERA_PORT);
 886:	2c 98       	cbi	0x05, 4	; 5
	
	//## IR Sensor ##
	TCCR1B |= 1 << CS10;
 888:	a1 e8       	ldi	r26, 0x81	; 129
 88a:	b0 e0       	ldi	r27, 0x00	; 0
 88c:	8c 91       	ld	r24, X
 88e:	81 60       	ori	r24, 0x01	; 1
 890:	8c 93       	st	X, r24
	
	//Start 1st ADC conversion
	ADCSRA |= (1 << ADSC);
 892:	80 81       	ld	r24, Z
 894:	80 64       	ori	r24, 0x40	; 64
 896:	80 83       	st	Z, r24
	waitForActivationSensor();
 898:	5e de       	rcall	.-836    	; 0x556 <_Z23waitForActivationSensorv>
	
	//start first UART transmission
	UDR0 = 0x00;
 89a:	10 92 c6 00 	sts	0x00C6, r1
    {
		//###############
		//## IR SENSOR ##
		//###############

		IRSensorFunction();
 89e:	81 de       	rcall	.-766    	; 0x5a2 <_Z16IRSensorFunctionv>
		
		//##################
		//## Laser sensor ##
		//##################
		
		laserSensorFunction();
 8a0:	df dd       	rcall	.-1090   	; 0x460 <_Z19laserSensorFunctionv>
		
		//########################
		//## Ultrasonic Sensors ##
		//########################
		
		ultrasonicFunction();
 8a2:	2c de       	rcall	.-936    	; 0x4fc <_Z18ultrasonicFunctionv>
	}
 8a4:	fc cf       	rjmp	.-8      	; 0x89e <main+0x8c>

000008a6 <__fixunssfsi>:
 8a6:	70 d0       	rcall	.+224    	; 0x988 <__fp_splitA>
 8a8:	88 f0       	brcs	.+34     	; 0x8cc <__fixunssfsi+0x26>
 8aa:	9f 57       	subi	r25, 0x7F	; 127
 8ac:	90 f0       	brcs	.+36     	; 0x8d2 <__fixunssfsi+0x2c>
 8ae:	b9 2f       	mov	r27, r25
 8b0:	99 27       	eor	r25, r25
 8b2:	b7 51       	subi	r27, 0x17	; 23
 8b4:	a0 f0       	brcs	.+40     	; 0x8de <__fixunssfsi+0x38>
 8b6:	d1 f0       	breq	.+52     	; 0x8ec <__fixunssfsi+0x46>
 8b8:	66 0f       	add	r22, r22
 8ba:	77 1f       	adc	r23, r23
 8bc:	88 1f       	adc	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	1a f0       	brmi	.+6      	; 0x8c8 <__fixunssfsi+0x22>
 8c2:	ba 95       	dec	r27
 8c4:	c9 f7       	brne	.-14     	; 0x8b8 <__fixunssfsi+0x12>
 8c6:	12 c0       	rjmp	.+36     	; 0x8ec <__fixunssfsi+0x46>
 8c8:	b1 30       	cpi	r27, 0x01	; 1
 8ca:	81 f0       	breq	.+32     	; 0x8ec <__fixunssfsi+0x46>
 8cc:	77 d0       	rcall	.+238    	; 0x9bc <__fp_zero>
 8ce:	b1 e0       	ldi	r27, 0x01	; 1
 8d0:	08 95       	ret
 8d2:	74 c0       	rjmp	.+232    	; 0x9bc <__fp_zero>
 8d4:	67 2f       	mov	r22, r23
 8d6:	78 2f       	mov	r23, r24
 8d8:	88 27       	eor	r24, r24
 8da:	b8 5f       	subi	r27, 0xF8	; 248
 8dc:	39 f0       	breq	.+14     	; 0x8ec <__fixunssfsi+0x46>
 8de:	b9 3f       	cpi	r27, 0xF9	; 249
 8e0:	cc f3       	brlt	.-14     	; 0x8d4 <__fixunssfsi+0x2e>
 8e2:	86 95       	lsr	r24
 8e4:	77 95       	ror	r23
 8e6:	67 95       	ror	r22
 8e8:	b3 95       	inc	r27
 8ea:	d9 f7       	brne	.-10     	; 0x8e2 <__fixunssfsi+0x3c>
 8ec:	3e f4       	brtc	.+14     	; 0x8fc <__fixunssfsi+0x56>
 8ee:	90 95       	com	r25
 8f0:	80 95       	com	r24
 8f2:	70 95       	com	r23
 8f4:	61 95       	neg	r22
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	8f 4f       	sbci	r24, 0xFF	; 255
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	08 95       	ret

000008fe <__floatunsisf>:
 8fe:	e8 94       	clt
 900:	09 c0       	rjmp	.+18     	; 0x914 <__floatsisf+0x12>

00000902 <__floatsisf>:
 902:	97 fb       	bst	r25, 7
 904:	3e f4       	brtc	.+14     	; 0x914 <__floatsisf+0x12>
 906:	90 95       	com	r25
 908:	80 95       	com	r24
 90a:	70 95       	com	r23
 90c:	61 95       	neg	r22
 90e:	7f 4f       	sbci	r23, 0xFF	; 255
 910:	8f 4f       	sbci	r24, 0xFF	; 255
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	99 23       	and	r25, r25
 916:	a9 f0       	breq	.+42     	; 0x942 <__floatsisf+0x40>
 918:	f9 2f       	mov	r31, r25
 91a:	96 e9       	ldi	r25, 0x96	; 150
 91c:	bb 27       	eor	r27, r27
 91e:	93 95       	inc	r25
 920:	f6 95       	lsr	r31
 922:	87 95       	ror	r24
 924:	77 95       	ror	r23
 926:	67 95       	ror	r22
 928:	b7 95       	ror	r27
 92a:	f1 11       	cpse	r31, r1
 92c:	f8 cf       	rjmp	.-16     	; 0x91e <__floatsisf+0x1c>
 92e:	fa f4       	brpl	.+62     	; 0x96e <__floatsisf+0x6c>
 930:	bb 0f       	add	r27, r27
 932:	11 f4       	brne	.+4      	; 0x938 <__floatsisf+0x36>
 934:	60 ff       	sbrs	r22, 0
 936:	1b c0       	rjmp	.+54     	; 0x96e <__floatsisf+0x6c>
 938:	6f 5f       	subi	r22, 0xFF	; 255
 93a:	7f 4f       	sbci	r23, 0xFF	; 255
 93c:	8f 4f       	sbci	r24, 0xFF	; 255
 93e:	9f 4f       	sbci	r25, 0xFF	; 255
 940:	16 c0       	rjmp	.+44     	; 0x96e <__floatsisf+0x6c>
 942:	88 23       	and	r24, r24
 944:	11 f0       	breq	.+4      	; 0x94a <__floatsisf+0x48>
 946:	96 e9       	ldi	r25, 0x96	; 150
 948:	11 c0       	rjmp	.+34     	; 0x96c <__floatsisf+0x6a>
 94a:	77 23       	and	r23, r23
 94c:	21 f0       	breq	.+8      	; 0x956 <__floatsisf+0x54>
 94e:	9e e8       	ldi	r25, 0x8E	; 142
 950:	87 2f       	mov	r24, r23
 952:	76 2f       	mov	r23, r22
 954:	05 c0       	rjmp	.+10     	; 0x960 <__floatsisf+0x5e>
 956:	66 23       	and	r22, r22
 958:	71 f0       	breq	.+28     	; 0x976 <__floatsisf+0x74>
 95a:	96 e8       	ldi	r25, 0x86	; 134
 95c:	86 2f       	mov	r24, r22
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	2a f0       	brmi	.+10     	; 0x96e <__floatsisf+0x6c>
 964:	9a 95       	dec	r25
 966:	66 0f       	add	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	da f7       	brpl	.-10     	; 0x964 <__floatsisf+0x62>
 96e:	88 0f       	add	r24, r24
 970:	96 95       	lsr	r25
 972:	87 95       	ror	r24
 974:	97 f9       	bld	r25, 7
 976:	08 95       	ret

00000978 <__fp_split3>:
 978:	57 fd       	sbrc	r21, 7
 97a:	90 58       	subi	r25, 0x80	; 128
 97c:	44 0f       	add	r20, r20
 97e:	55 1f       	adc	r21, r21
 980:	59 f0       	breq	.+22     	; 0x998 <__fp_splitA+0x10>
 982:	5f 3f       	cpi	r21, 0xFF	; 255
 984:	71 f0       	breq	.+28     	; 0x9a2 <__fp_splitA+0x1a>
 986:	47 95       	ror	r20

00000988 <__fp_splitA>:
 988:	88 0f       	add	r24, r24
 98a:	97 fb       	bst	r25, 7
 98c:	99 1f       	adc	r25, r25
 98e:	61 f0       	breq	.+24     	; 0x9a8 <__fp_splitA+0x20>
 990:	9f 3f       	cpi	r25, 0xFF	; 255
 992:	79 f0       	breq	.+30     	; 0x9b2 <__fp_splitA+0x2a>
 994:	87 95       	ror	r24
 996:	08 95       	ret
 998:	12 16       	cp	r1, r18
 99a:	13 06       	cpc	r1, r19
 99c:	14 06       	cpc	r1, r20
 99e:	55 1f       	adc	r21, r21
 9a0:	f2 cf       	rjmp	.-28     	; 0x986 <__fp_split3+0xe>
 9a2:	46 95       	lsr	r20
 9a4:	f1 df       	rcall	.-30     	; 0x988 <__fp_splitA>
 9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <__fp_splitA+0x30>
 9a8:	16 16       	cp	r1, r22
 9aa:	17 06       	cpc	r1, r23
 9ac:	18 06       	cpc	r1, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	f1 cf       	rjmp	.-30     	; 0x994 <__fp_splitA+0xc>
 9b2:	86 95       	lsr	r24
 9b4:	71 05       	cpc	r23, r1
 9b6:	61 05       	cpc	r22, r1
 9b8:	08 94       	sec
 9ba:	08 95       	ret

000009bc <__fp_zero>:
 9bc:	e8 94       	clt

000009be <__fp_szero>:
 9be:	bb 27       	eor	r27, r27
 9c0:	66 27       	eor	r22, r22
 9c2:	77 27       	eor	r23, r23
 9c4:	cb 01       	movw	r24, r22
 9c6:	97 f9       	bld	r25, 7
 9c8:	08 95       	ret

000009ca <__gesf2>:
 9ca:	03 d0       	rcall	.+6      	; 0x9d2 <__fp_cmp>
 9cc:	08 f4       	brcc	.+2      	; 0x9d0 <__gesf2+0x6>
 9ce:	8f ef       	ldi	r24, 0xFF	; 255
 9d0:	08 95       	ret

000009d2 <__fp_cmp>:
 9d2:	99 0f       	add	r25, r25
 9d4:	00 08       	sbc	r0, r0
 9d6:	55 0f       	add	r21, r21
 9d8:	aa 0b       	sbc	r26, r26
 9da:	e0 e8       	ldi	r30, 0x80	; 128
 9dc:	fe ef       	ldi	r31, 0xFE	; 254
 9de:	16 16       	cp	r1, r22
 9e0:	17 06       	cpc	r1, r23
 9e2:	e8 07       	cpc	r30, r24
 9e4:	f9 07       	cpc	r31, r25
 9e6:	c0 f0       	brcs	.+48     	; 0xa18 <__fp_cmp+0x46>
 9e8:	12 16       	cp	r1, r18
 9ea:	13 06       	cpc	r1, r19
 9ec:	e4 07       	cpc	r30, r20
 9ee:	f5 07       	cpc	r31, r21
 9f0:	98 f0       	brcs	.+38     	; 0xa18 <__fp_cmp+0x46>
 9f2:	62 1b       	sub	r22, r18
 9f4:	73 0b       	sbc	r23, r19
 9f6:	84 0b       	sbc	r24, r20
 9f8:	95 0b       	sbc	r25, r21
 9fa:	39 f4       	brne	.+14     	; 0xa0a <__fp_cmp+0x38>
 9fc:	0a 26       	eor	r0, r26
 9fe:	61 f0       	breq	.+24     	; 0xa18 <__fp_cmp+0x46>
 a00:	23 2b       	or	r18, r19
 a02:	24 2b       	or	r18, r20
 a04:	25 2b       	or	r18, r21
 a06:	21 f4       	brne	.+8      	; 0xa10 <__fp_cmp+0x3e>
 a08:	08 95       	ret
 a0a:	0a 26       	eor	r0, r26
 a0c:	09 f4       	brne	.+2      	; 0xa10 <__fp_cmp+0x3e>
 a0e:	a1 40       	sbci	r26, 0x01	; 1
 a10:	a6 95       	lsr	r26
 a12:	8f ef       	ldi	r24, 0xFF	; 255
 a14:	81 1d       	adc	r24, r1
 a16:	81 1d       	adc	r24, r1
 a18:	08 95       	ret

00000a1a <__divmodhi4>:
 a1a:	97 fb       	bst	r25, 7
 a1c:	07 2e       	mov	r0, r23
 a1e:	16 f4       	brtc	.+4      	; 0xa24 <__divmodhi4+0xa>
 a20:	00 94       	com	r0
 a22:	06 d0       	rcall	.+12     	; 0xa30 <__divmodhi4_neg1>
 a24:	77 fd       	sbrc	r23, 7
 a26:	08 d0       	rcall	.+16     	; 0xa38 <__divmodhi4_neg2>
 a28:	0b d0       	rcall	.+22     	; 0xa40 <__udivmodhi4>
 a2a:	07 fc       	sbrc	r0, 7
 a2c:	05 d0       	rcall	.+10     	; 0xa38 <__divmodhi4_neg2>
 a2e:	3e f4       	brtc	.+14     	; 0xa3e <__divmodhi4_exit>

00000a30 <__divmodhi4_neg1>:
 a30:	90 95       	com	r25
 a32:	81 95       	neg	r24
 a34:	9f 4f       	sbci	r25, 0xFF	; 255
 a36:	08 95       	ret

00000a38 <__divmodhi4_neg2>:
 a38:	70 95       	com	r23
 a3a:	61 95       	neg	r22
 a3c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a3e <__divmodhi4_exit>:
 a3e:	08 95       	ret

00000a40 <__udivmodhi4>:
 a40:	aa 1b       	sub	r26, r26
 a42:	bb 1b       	sub	r27, r27
 a44:	51 e1       	ldi	r21, 0x11	; 17
 a46:	07 c0       	rjmp	.+14     	; 0xa56 <__udivmodhi4_ep>

00000a48 <__udivmodhi4_loop>:
 a48:	aa 1f       	adc	r26, r26
 a4a:	bb 1f       	adc	r27, r27
 a4c:	a6 17       	cp	r26, r22
 a4e:	b7 07       	cpc	r27, r23
 a50:	10 f0       	brcs	.+4      	; 0xa56 <__udivmodhi4_ep>
 a52:	a6 1b       	sub	r26, r22
 a54:	b7 0b       	sbc	r27, r23

00000a56 <__udivmodhi4_ep>:
 a56:	88 1f       	adc	r24, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	5a 95       	dec	r21
 a5c:	a9 f7       	brne	.-22     	; 0xa48 <__udivmodhi4_loop>
 a5e:	80 95       	com	r24
 a60:	90 95       	com	r25
 a62:	bc 01       	movw	r22, r24
 a64:	cd 01       	movw	r24, r26
 a66:	08 95       	ret

00000a68 <_exit>:
 a68:	f8 94       	cli

00000a6a <__stop_program>:
 a6a:	ff cf       	rjmp	.-2      	; 0xa6a <__stop_program>
