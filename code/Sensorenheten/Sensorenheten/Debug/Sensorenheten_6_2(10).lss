
Sensorenheten_6_2(10).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000abe  00000b52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000abe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800110  00800110  00000b62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083b  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002de  00000000  00000000  000014af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c8  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002058  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000638  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000402  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002c22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	37 c0       	rjmp	.+110    	; 0xc8 <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	79 c0       	rjmp	.+242    	; 0x154 <__vector_24>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 32       	cpi	r26, 0x2B	; 43
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d6 d3       	rcall	.+1964   	; 0x870 <main>
  c4:	fa c4       	rjmp	.+2548   	; 0xaba <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_22>:
		return 1;
	}
	else{
		return 0;
	}
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	f8 94       	cli
  d6:	80 91 04 01 	lds	r24, 0x0104
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	a9 f0       	breq	.+42     	; 0x108 <__vector_22+0x40>
  de:	28 f4       	brcc	.+10     	; 0xea <__vector_22+0x22>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	41 f0       	breq	.+16     	; 0xf4 <__vector_22+0x2c>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	59 f0       	breq	.+22     	; 0xfe <__vector_22+0x36>
  e8:	1d c0       	rjmp	.+58     	; 0x124 <__vector_22+0x5c>
  ea:	84 30       	cpi	r24, 0x04	; 4
  ec:	91 f0       	breq	.+36     	; 0x112 <__vector_22+0x4a>
  ee:	85 30       	cpi	r24, 0x05	; 5
  f0:	a9 f0       	breq	.+42     	; 0x11c <__vector_22+0x54>
  f2:	18 c0       	rjmp	.+48     	; 0x124 <__vector_22+0x5c>
  f4:	80 91 0a 01 	lds	r24, 0x010A
  f8:	80 93 c6 00 	sts	0x00C6, r24
  fc:	13 c0       	rjmp	.+38     	; 0x124 <__vector_22+0x5c>
  fe:	80 91 09 01 	lds	r24, 0x0109
 102:	80 93 c6 00 	sts	0x00C6, r24
 106:	0e c0       	rjmp	.+28     	; 0x124 <__vector_22+0x5c>
 108:	80 91 08 01 	lds	r24, 0x0108
 10c:	80 93 c6 00 	sts	0x00C6, r24
 110:	09 c0       	rjmp	.+18     	; 0x124 <__vector_22+0x5c>
 112:	80 91 07 01 	lds	r24, 0x0107
 116:	80 93 c6 00 	sts	0x00C6, r24
 11a:	04 c0       	rjmp	.+8      	; 0x124 <__vector_22+0x5c>
 11c:	80 91 06 01 	lds	r24, 0x0106
 120:	80 93 c6 00 	sts	0x00C6, r24
 124:	80 91 04 01 	lds	r24, 0x0104
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	86 30       	cpi	r24, 0x06	; 6
 12c:	18 f4       	brcc	.+6      	; 0x134 <__vector_22+0x6c>
 12e:	80 93 04 01 	sts	0x0104, r24
 132:	03 c0       	rjmp	.+6      	; 0x13a <__vector_22+0x72>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 04 01 	sts	0x0104, r24
 13a:	78 94       	sei
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <_Z11clearADCMUXv>:

void clearADCMUX(){
	ADMUX &= 0b11100000;
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 7e       	andi	r24, 0xE0	; 224
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <__vector_24>:
	//enable interrupts
	sei();
}


ISR(ADC_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	0b b6       	in	r0, 0x3b	; 59
 160:	0f 92       	push	r0
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	//disable interrupts (might not be necessary?) interrupts get queued?
	cli();
 17a:	f8 94       	cli
	uint8_t lowbits = ADCL;
 17c:	80 91 78 00 	lds	r24, 0x0078
	uint16_t message = ADCH <<8 | lowbits;
 180:	20 91 79 00 	lds	r18, 0x0079
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	92 2b       	or	r25, r18
	//enable interrupts
	sei();
 188:	78 94       	sei
	switch(ADCcount){
 18a:	20 91 05 01 	lds	r18, 0x0105
 18e:	21 30       	cpi	r18, 0x01	; 1
 190:	29 f1       	breq	.+74     	; 0x1dc <__vector_24+0x88>
 192:	20 f0       	brcs	.+8      	; 0x19c <__vector_24+0x48>
 194:	22 30       	cpi	r18, 0x02	; 2
 196:	09 f4       	brne	.+2      	; 0x19a <__vector_24+0x46>
 198:	46 c0       	rjmp	.+140    	; 0x226 <__vector_24+0xd2>
 19a:	60 c0       	rjmp	.+192    	; 0x25c <__vector_24+0x108>
		case GYRO:
			message >>= 2; //Divide by 4
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
			message4 &= 0b00000111; //Reset bits
			message4 |= (message<<LOWERBITSGYRO_INDEX);
 1a4:	38 2f       	mov	r19, r24
 1a6:	33 0f       	add	r19, r19
 1a8:	33 0f       	add	r19, r19
 1aa:	33 0f       	add	r19, r19
	//enable interrupts
	sei();
	switch(ADCcount){
		case GYRO:
			message >>= 2; //Divide by 4
			message4 &= 0b00000111; //Reset bits
 1ac:	20 91 07 01 	lds	r18, 0x0107
 1b0:	27 70       	andi	r18, 0x07	; 7
			message4 |= (message<<LOWERBITSGYRO_INDEX);
 1b2:	23 2b       	or	r18, r19
 1b4:	20 93 07 01 	sts	0x0107, r18
			message5 &= 0b11000111; //Reset bits
			message5 |= ((message>>2) & 0b00111000);
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	88 73       	andi	r24, 0x38	; 56
	switch(ADCcount){
		case GYRO:
			message >>= 2; //Divide by 4
			message4 &= 0b00000111; //Reset bits
			message4 |= (message<<LOWERBITSGYRO_INDEX);
			message5 &= 0b11000111; //Reset bits
 1c2:	90 91 06 01 	lds	r25, 0x0106
 1c6:	97 7c       	andi	r25, 0xC7	; 199
			message5 |= ((message>>2) & 0b00111000);
 1c8:	89 2b       	or	r24, r25
 1ca:	80 93 06 01 	sts	0x0106, r24
			clearADCMUX();
 1ce:	bc df       	rcall	.-136    	; 0x148 <_Z11clearADCMUXv>
			ADMUX |= 1;
 1d0:	ec e7       	ldi	r30, 0x7C	; 124
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	80 83       	st	Z, r24
			break;
 1da:	40 c0       	rjmp	.+128    	; 0x25c <__vector_24+0x108>
		case TAPESENSOR1:
			//clear TAPESENSOR1_INDEX bit
			message5 &= 0b10111111;
 1dc:	40 91 06 01 	lds	r20, 0x0106
 1e0:	4f 7b       	andi	r20, 0xBF	; 191
			tape1CurrentValue = message; //Save current value, used for calibration
 1e2:	90 93 2a 01 	sts	0x012A, r25
 1e6:	80 93 29 01 	sts	0x0129, r24
	ADCSRA |= (1 << ADSC);
}

//Check if the converted value from the tape sensors indicate tape or not
uint8_t tapeCheck(uint16_t message, uint8_t tapeSensorNumber){
	if((tapeSensorNumber == 1 && message >= tape1Threshold) || (tapeSensorNumber == 2 && message >= tape2Threshold)){
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	60 91 0d 01 	lds	r22, 0x010D
 1f2:	70 91 0e 01 	lds	r23, 0x010E
 1f6:	86 17       	cp	r24, r22
 1f8:	97 07       	cpc	r25, r23
 1fa:	10 f4       	brcc	.+4      	; 0x200 <__vector_24+0xac>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
		case TAPESENSOR1:
			//clear TAPESENSOR1_INDEX bit
			message5 &= 0b10111111;
			tape1CurrentValue = message; //Save current value, used for calibration
			//mask in actual value
			message5 |= (tapeCheck(message, 1)<<TAPESENSOR1_INDEX);
 200:	00 24       	eor	r0, r0
 202:	36 95       	lsr	r19
 204:	27 95       	ror	r18
 206:	07 94       	ror	r0
 208:	36 95       	lsr	r19
 20a:	27 95       	ror	r18
 20c:	07 94       	ror	r0
 20e:	32 2f       	mov	r19, r18
 210:	20 2d       	mov	r18, r0
 212:	24 2b       	or	r18, r20
 214:	20 93 06 01 	sts	0x0106, r18
			//next muxed ADC
			clearADCMUX();
 218:	97 df       	rcall	.-210    	; 0x148 <_Z11clearADCMUXv>
			ADMUX |= 2;
 21a:	ec e7       	ldi	r30, 0x7C	; 124
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	82 60       	ori	r24, 0x02	; 2
 222:	80 83       	st	Z, r24
			break;
 224:	1b c0       	rjmp	.+54     	; 0x25c <__vector_24+0x108>
		case TAPESENSOR2:
			//clear TAPESENSOR2_INDEX bit
			message5 &= 0b01111111;
 226:	40 91 06 01 	lds	r20, 0x0106
 22a:	4f 77       	andi	r20, 0x7F	; 127
			tape2CurrentValue = message; //Save current value, used for calibration
 22c:	90 93 28 01 	sts	0x0128, r25
 230:	80 93 27 01 	sts	0x0127, r24
	ADCSRA |= (1 << ADSC);
}

//Check if the converted value from the tape sensors indicate tape or not
uint8_t tapeCheck(uint16_t message, uint8_t tapeSensorNumber){
	if((tapeSensorNumber == 1 && message >= tape1Threshold) || (tapeSensorNumber == 2 && message >= tape2Threshold)){
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	60 91 0b 01 	lds	r22, 0x010B
 23c:	70 91 0c 01 	lds	r23, 0x010C
 240:	86 17       	cp	r24, r22
 242:	97 07       	cpc	r25, r23
 244:	10 f4       	brcc	.+4      	; 0x24a <__vector_24+0xf6>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
		case TAPESENSOR2:
			//clear TAPESENSOR2_INDEX bit
			message5 &= 0b01111111;
			tape2CurrentValue = message; //Save current value, used for calibration
			//mask in actual value
			message5 |= (tapeCheck(message, 2)<<TAPESENSOR2_INDEX);
 24a:	36 95       	lsr	r19
 24c:	32 2f       	mov	r19, r18
 24e:	22 27       	eor	r18, r18
 250:	37 95       	ror	r19
 252:	27 95       	ror	r18
 254:	24 2b       	or	r18, r20
 256:	20 93 06 01 	sts	0x0106, r18
			//next muxed ADC
			clearADCMUX();
 25a:	76 df       	rcall	.-276    	; 0x148 <_Z11clearADCMUXv>
			//MUX to IRSENSOR-ADC?
			break;
	}
	
	ADCcount++;
 25c:	80 91 05 01 	lds	r24, 0x0105
 260:	8f 5f       	subi	r24, 0xFF	; 255
	//go around
	if(ADCcount >= NUMBER_OF_ADC_SENSORS){
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	18 f4       	brcc	.+6      	; 0x26c <__vector_24+0x118>
			clearADCMUX();
			//MUX to IRSENSOR-ADC?
			break;
	}
	
	ADCcount++;
 266:	80 93 05 01 	sts	0x0105, r24
 26a:	03 c0       	rjmp	.+6      	; 0x272 <__vector_24+0x11e>
	//go around
	if(ADCcount >= NUMBER_OF_ADC_SENSORS){
		 ADCcount = 0;
 26c:	10 92 05 01 	sts	0x0105, r1
		 clearADCMUX();
 270:	6b df       	rcall	.-298    	; 0x148 <_Z11clearADCMUXv>
	}
	
	//Start next conversion
	ADCSRA |= (1 << ADSC);
 272:	ea e7       	ldi	r30, 0x7A	; 122
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	80 83       	st	Z, r24
}
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	7f 91       	pop	r23
 28a:	6f 91       	pop	r22
 28c:	5f 91       	pop	r21
 28e:	4f 91       	pop	r20
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0b be       	out	0x3b, r0	; 59
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <_Z16resetTimerValuesv>:
//just test function
//PIN B4 and B5 as outputs


void resetTimerValues() {
	TCNT2 = 0;
 2a2:	10 92 b2 00 	sts	0x00B2, r1
	timer = 0;
 2a6:	10 92 1a 01 	sts	0x011A, r1
 2aa:	10 92 19 01 	sts	0x0119, r1
 2ae:	08 95       	ret

000002b0 <_Z11StartPulse1v>:
}


void StartPulse1() {
	//set trigger to high
	if (!triggerStarted) {
 2b0:	80 91 15 01 	lds	r24, 0x0115
 2b4:	81 11       	cpse	r24, r1
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <_Z11StartPulse1v+0x1a>
		triggerStarted = true;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 15 01 	sts	0x0115, r24
		PORTB |= (1 << PULSE_TRIGGER_PIN1);
 2be:	29 9a       	sbi	0x05, 1	; 5
		resetTimerValues();
 2c0:	f0 df       	rcall	.-32     	; 0x2a2 <_Z16resetTimerValuesv>
	}
	
	//set trigger to low
	if (triggerStarted && timer == 10) { // and atleast 15 us has passed.
 2c2:	80 91 15 01 	lds	r24, 0x0115
 2c6:	88 23       	and	r24, r24
 2c8:	59 f0       	breq	.+22     	; 0x2e0 <_Z11StartPulse1v+0x30>
 2ca:	80 91 19 01 	lds	r24, 0x0119
 2ce:	90 91 1a 01 	lds	r25, 0x011A
 2d2:	0a 97       	sbiw	r24, 0x0a	; 10
 2d4:	29 f4       	brne	.+10     	; 0x2e0 <_Z11StartPulse1v+0x30>
		triggerSend = true;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 14 01 	sts	0x0114, r24
		PORTB &= ~(1 << PULSE_TRIGGER_PIN1);
 2dc:	29 98       	cbi	0x05, 1	; 5
		resetTimerValues();
 2de:	e1 cf       	rjmp	.-62     	; 0x2a2 <_Z16resetTimerValuesv>
 2e0:	08 95       	ret

000002e2 <_Z11StartPulse2v>:
	}
}

void StartPulse2() {
	//set trigger to high
	if (!triggerStarted) {
 2e2:	80 91 15 01 	lds	r24, 0x0115
 2e6:	81 11       	cpse	r24, r1
 2e8:	09 c0       	rjmp	.+18     	; 0x2fc <_Z11StartPulse2v+0x1a>
		triggerStarted = true;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 15 01 	sts	0x0115, r24
		PORTB |= (1 << PULSE_TRIGGER_PIN2);
 2f0:	2b 9a       	sbi	0x05, 3	; 5
		resetTimerValues();
 2f2:	d7 df       	rcall	.-82     	; 0x2a2 <_Z16resetTimerValuesv>
	}
	
	//set trigger to low
	if (triggerStarted && timer == 10) { // and atleast 15 us has passed.
 2f4:	80 91 15 01 	lds	r24, 0x0115
 2f8:	88 23       	and	r24, r24
 2fa:	59 f0       	breq	.+22     	; 0x312 <_Z11StartPulse2v+0x30>
 2fc:	80 91 19 01 	lds	r24, 0x0119
 300:	90 91 1a 01 	lds	r25, 0x011A
 304:	0a 97       	sbiw	r24, 0x0a	; 10
 306:	29 f4       	brne	.+10     	; 0x312 <_Z11StartPulse2v+0x30>
		triggerSend = true;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	80 93 14 01 	sts	0x0114, r24
		PORTB &= ~(1 << PULSE_TRIGGER_PIN2);
 30e:	2b 98       	cbi	0x05, 3	; 5
		resetTimerValues();
 310:	c8 cf       	rjmp	.-112    	; 0x2a2 <_Z16resetTimerValuesv>
 312:	08 95       	ret

00000314 <_Z17calculateDistancev>:
		//reset trigger variables.
	}
}

//returns value in cm.
float calculateDistance() {
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
	// 12 is time per tick.
	//divide 1000000 to make it to meters.
	
	
	
	int uTime = timer * MICRO_SEC_PER_TICK;
 31c:	20 91 19 01 	lds	r18, 0x0119
 320:	30 91 1a 01 	lds	r19, 0x011A
 324:	4a e2       	ldi	r20, 0x2A	; 42
 326:	42 9f       	mul	r20, r18
 328:	c0 01       	movw	r24, r0
 32a:	43 9f       	mul	r20, r19
 32c:	90 0d       	add	r25, r0
 32e:	11 24       	eor	r1, r1
	//float seconds = uTime / 100;
	float centiMeters = uTime/58;
 330:	6a e3       	ldi	r22, 0x3A	; 58
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	9b d3       	rcall	.+1846   	; 0xa6c <__divmodhi4>
 336:	07 2e       	mov	r0, r23
 338:	00 0c       	add	r0, r0
 33a:	88 0b       	sbc	r24, r24
 33c:	99 0b       	sbc	r25, r25
 33e:	0a d3       	rcall	.+1556   	; 0x954 <__floatsisf>
 340:	06 2f       	mov	r16, r22
 342:	17 2f       	mov	r17, r23
 344:	d8 2f       	mov	r29, r24
 346:	c9 2f       	mov	r28, r25
	if (centiMeters > 240) return 240;
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	40 e7       	ldi	r20, 0x70	; 112
 34e:	53 e4       	ldi	r21, 0x43	; 67
 350:	65 d3       	rcall	.+1738   	; 0xa1c <__gesf2>
 352:	18 16       	cp	r1, r24
 354:	24 f4       	brge	.+8      	; 0x35e <_Z17calculateDistancev+0x4a>
 356:	00 e0       	ldi	r16, 0x00	; 0
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	d0 e7       	ldi	r29, 0x70	; 112
 35c:	c3 e4       	ldi	r28, 0x43	; 67
	return centiMeters;
}
 35e:	60 2f       	mov	r22, r16
 360:	71 2f       	mov	r23, r17
 362:	8d 2f       	mov	r24, r29
 364:	9c 2f       	mov	r25, r28
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	08 95       	ret

00000370 <_Z14CalculateTime1v>:
}


void CalculateTime1() {
	//when echo output is high, start timer.
	if (!timeTaken && triggerSend && !timerStarted && (PINB & (1<<ECHO_PIN1))) {
 370:	80 91 12 01 	lds	r24, 0x0112
 374:	81 11       	cpse	r24, r1
 376:	67 c0       	rjmp	.+206    	; 0x446 <_Z14CalculateTime1v+0xd6>
 378:	80 91 14 01 	lds	r24, 0x0114
 37c:	88 23       	and	r24, r24
 37e:	31 f0       	breq	.+12     	; 0x38c <_Z14CalculateTime1v+0x1c>
 380:	80 91 13 01 	lds	r24, 0x0113
 384:	81 11       	cpse	r24, r1
 386:	02 c0       	rjmp	.+4      	; 0x38c <_Z14CalculateTime1v+0x1c>
 388:	18 99       	sbic	0x03, 0	; 3
 38a:	32 c0       	rjmp	.+100    	; 0x3f0 <_Z14CalculateTime1v+0x80>
		resetTimerValues();
		
	}
	
	//when echo output is low, stop timer. (save time)
	if (!timeTaken && triggerSend && timerStarted && !(PINB & (1<<ECHO_PIN1))) {
 38c:	80 91 14 01 	lds	r24, 0x0114
 390:	88 23       	and	r24, r24
 392:	09 f4       	brne	.+2      	; 0x396 <_Z14CalculateTime1v+0x26>
 394:	58 c0       	rjmp	.+176    	; 0x446 <_Z14CalculateTime1v+0xd6>
 396:	80 91 13 01 	lds	r24, 0x0113
 39a:	88 23       	and	r24, r24
 39c:	09 f4       	brne	.+2      	; 0x3a0 <_Z14CalculateTime1v+0x30>
 39e:	53 c0       	rjmp	.+166    	; 0x446 <_Z14CalculateTime1v+0xd6>
 3a0:	18 9b       	sbis	0x03, 0	; 3
 3a2:	2f c0       	rjmp	.+94     	; 0x402 <_Z14CalculateTime1v+0x92>
 3a4:	08 95       	ret
		// CalculateDistance returns a value in cm we need it in dm
		distancecm1 = calculateDistance();
		//check singular number to do correct round up or down
		int singular = (distancecm1 % 100) % 10;
		if(singular >= 5){ 
			distance1 = distancecm1/10 + 1;
 3a6:	8d ec       	ldi	r24, 0xCD	; 205
 3a8:	68 9f       	mul	r22, r24
 3aa:	61 2d       	mov	r22, r1
 3ac:	11 24       	eor	r1, r1
 3ae:	66 95       	lsr	r22
 3b0:	66 95       	lsr	r22
 3b2:	66 95       	lsr	r22
 3b4:	6f 5f       	subi	r22, 0xFF	; 255
 3b6:	60 93 17 01 	sts	0x0117, r22
 3ba:	09 c0       	rjmp	.+18     	; 0x3ce <_Z14CalculateTime1v+0x5e>
		}
		else{
			distance1 = distancecm1/10;
 3bc:	8d ec       	ldi	r24, 0xCD	; 205
 3be:	68 9f       	mul	r22, r24
 3c0:	61 2d       	mov	r22, r1
 3c2:	11 24       	eor	r1, r1
 3c4:	66 95       	lsr	r22
 3c6:	66 95       	lsr	r22
 3c8:	66 95       	lsr	r22
 3ca:	60 93 17 01 	sts	0x0117, r22
// 		//quick fix to filter out wrong 4 values
// 		if(distance2 == 4){
// 			return;
// 		}
		message2 &= ~(0b11111<<3); //Reset distance bits
		message2 |= (distance1<<3); //Set UART message with new distance
 3ce:	80 91 17 01 	lds	r24, 0x0117
 3d2:	98 2f       	mov	r25, r24
 3d4:	99 0f       	add	r25, r25
 3d6:	99 0f       	add	r25, r25
 3d8:	99 0f       	add	r25, r25
		}
// 		//quick fix to filter out wrong 4 values
// 		if(distance2 == 4){
// 			return;
// 		}
		message2 &= ~(0b11111<<3); //Reset distance bits
 3da:	80 91 09 01 	lds	r24, 0x0109
 3de:	87 70       	andi	r24, 0x07	; 7
		message2 |= (distance1<<3); //Set UART message with new distance
 3e0:	89 2b       	or	r24, r25
 3e2:	80 93 09 01 	sts	0x0109, r24
		
		resetTimerValues();
 3e6:	5d df       	rcall	.-326    	; 0x2a2 <_Z16resetTimerValuesv>
		timeTaken = true;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 12 01 	sts	0x0112, r24
 3ee:	08 95       	ret


void CalculateTime1() {
	//when echo output is high, start timer.
	if (!timeTaken && triggerSend && !timerStarted && (PINB & (1<<ECHO_PIN1))) {
		timerStarted = true;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 13 01 	sts	0x0113, r24
		resetTimerValues();
 3f6:	55 df       	rcall	.-342    	; 0x2a2 <_Z16resetTimerValuesv>
		
	}
	
	//when echo output is low, stop timer. (save time)
	if (!timeTaken && triggerSend && timerStarted && !(PINB & (1<<ECHO_PIN1))) {
 3f8:	80 91 12 01 	lds	r24, 0x0112
 3fc:	88 23       	and	r24, r24
 3fe:	31 f2       	breq	.-116    	; 0x38c <_Z14CalculateTime1v+0x1c>
 400:	08 95       	ret
		//set timer variables ot zero.
		// CalculateDistance returns a value in cm we need it in dm
		distancecm1 = calculateDistance();
 402:	88 df       	rcall	.-240    	; 0x314 <_Z17calculateDistancev>
 404:	79 d2       	rcall	.+1266   	; 0x8f8 <__fixunssfsi>
 406:	60 93 18 01 	sts	0x0118, r22
		//check singular number to do correct round up or down
		int singular = (distancecm1 % 100) % 10;
 40a:	89 e2       	ldi	r24, 0x29	; 41
 40c:	68 9f       	mul	r22, r24
 40e:	81 2d       	mov	r24, r1
 410:	11 24       	eor	r1, r1
 412:	82 95       	swap	r24
 414:	8f 70       	andi	r24, 0x0F	; 15
 416:	96 2f       	mov	r25, r22
 418:	24 e6       	ldi	r18, 0x64	; 100
 41a:	82 9f       	mul	r24, r18
 41c:	90 19       	sub	r25, r0
 41e:	11 24       	eor	r1, r1
 420:	8d ec       	ldi	r24, 0xCD	; 205
 422:	98 9f       	mul	r25, r24
 424:	81 2d       	mov	r24, r1
 426:	11 24       	eor	r1, r1
 428:	86 95       	lsr	r24
 42a:	86 95       	lsr	r24
 42c:	86 95       	lsr	r24
 42e:	88 0f       	add	r24, r24
 430:	28 2f       	mov	r18, r24
 432:	22 0f       	add	r18, r18
 434:	22 0f       	add	r18, r18
 436:	82 0f       	add	r24, r18
 438:	98 1b       	sub	r25, r24
 43a:	89 2f       	mov	r24, r25
 43c:	90 e0       	ldi	r25, 0x00	; 0
		if(singular >= 5){ 
 43e:	05 97       	sbiw	r24, 0x05	; 5
 440:	0c f0       	brlt	.+2      	; 0x444 <_Z14CalculateTime1v+0xd4>
 442:	b1 cf       	rjmp	.-158    	; 0x3a6 <_Z14CalculateTime1v+0x36>
 444:	bb cf       	rjmp	.-138    	; 0x3bc <_Z14CalculateTime1v+0x4c>
 446:	08 95       	ret

00000448 <_Z14CalculateTime2v>:
	}
}

void CalculateTime2() {
	//when echo output is high, start timer.
	if (!timeTaken && triggerSend && !timerStarted && (PINB & (1<<ECHO_PIN2))) {
 448:	80 91 12 01 	lds	r24, 0x0112
 44c:	81 11       	cpse	r24, r1
 44e:	65 c0       	rjmp	.+202    	; 0x51a <_Z14CalculateTime2v+0xd2>
 450:	80 91 14 01 	lds	r24, 0x0114
 454:	88 23       	and	r24, r24
 456:	09 f4       	brne	.+2      	; 0x45a <_Z14CalculateTime2v+0x12>
 458:	5c c0       	rjmp	.+184    	; 0x512 <_Z14CalculateTime2v+0xca>
 45a:	80 91 13 01 	lds	r24, 0x0113
 45e:	81 11       	cpse	r24, r1
 460:	58 c0       	rjmp	.+176    	; 0x512 <_Z14CalculateTime2v+0xca>
 462:	1a 99       	sbic	0x03, 2	; 3
 464:	30 c0       	rjmp	.+96     	; 0x4c6 <_Z14CalculateTime2v+0x7e>
 466:	55 c0       	rjmp	.+170    	; 0x512 <_Z14CalculateTime2v+0xca>
		
	
	}
	
	//when echo output is low, stop timer. (save time)
	if (!timeTaken && triggerSend && timerStarted && !(PINB & (1<<ECHO_PIN2))) {
 468:	80 91 13 01 	lds	r24, 0x0113
 46c:	88 23       	and	r24, r24
 46e:	09 f4       	brne	.+2      	; 0x472 <_Z14CalculateTime2v+0x2a>
 470:	54 c0       	rjmp	.+168    	; 0x51a <_Z14CalculateTime2v+0xd2>
 472:	1a 9b       	sbis	0x03, 2	; 3
 474:	2c c0       	rjmp	.+88     	; 0x4ce <_Z14CalculateTime2v+0x86>
 476:	08 95       	ret

		distancecm1 = calculateDistance();
		//check singular number to do correct round up or down
		int singular = (distancecm1 % 100) % 10;
		if(singular >= 5){
			distance2 = distancecm1/10 + 1;
 478:	8d ec       	ldi	r24, 0xCD	; 205
 47a:	68 9f       	mul	r22, r24
 47c:	61 2d       	mov	r22, r1
 47e:	11 24       	eor	r1, r1
 480:	66 95       	lsr	r22
 482:	66 95       	lsr	r22
 484:	66 95       	lsr	r22
 486:	6f 5f       	subi	r22, 0xFF	; 255
 488:	60 93 16 01 	sts	0x0116, r22
 48c:	09 c0       	rjmp	.+18     	; 0x4a0 <_Z14CalculateTime2v+0x58>
		}
		else{
			distance2 = distancecm1/10;
 48e:	8d ec       	ldi	r24, 0xCD	; 205
 490:	68 9f       	mul	r22, r24
 492:	61 2d       	mov	r22, r1
 494:	11 24       	eor	r1, r1
 496:	66 95       	lsr	r22
 498:	66 95       	lsr	r22
 49a:	66 95       	lsr	r22
 49c:	60 93 16 01 	sts	0x0116, r22
		}
		
		message3 &= ~(0b11111<<3); //Reset distance bits
		message3 |= (distance2<<3); //Set UART msg with new distance
 4a0:	80 91 16 01 	lds	r24, 0x0116
 4a4:	98 2f       	mov	r25, r24
 4a6:	99 0f       	add	r25, r25
 4a8:	99 0f       	add	r25, r25
 4aa:	99 0f       	add	r25, r25
		}
		else{
			distance2 = distancecm1/10;
		}
		
		message3 &= ~(0b11111<<3); //Reset distance bits
 4ac:	80 91 08 01 	lds	r24, 0x0108
 4b0:	87 70       	andi	r24, 0x07	; 7
		message3 |= (distance2<<3); //Set UART msg with new distance
 4b2:	89 2b       	or	r24, r25
 4b4:	80 93 08 01 	sts	0x0108, r24
		
		resetTimerValues();
 4b8:	f4 de       	rcall	.-536    	; 0x2a2 <_Z16resetTimerValuesv>
		timeTaken = true;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	80 93 12 01 	sts	0x0112, r24
		useSensor1 = true;
 4c0:	80 93 00 01 	sts	0x0100, r24
 4c4:	08 95       	ret
}

void CalculateTime2() {
	//when echo output is high, start timer.
	if (!timeTaken && triggerSend && !timerStarted && (PINB & (1<<ECHO_PIN2))) {
		timerStarted = true;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 13 01 	sts	0x0113, r24
 4cc:	22 c0       	rjmp	.+68     	; 0x512 <_Z14CalculateTime2v+0xca>
	//when echo output is low, stop timer. (save time)
	if (!timeTaken && triggerSend && timerStarted && !(PINB & (1<<ECHO_PIN2))) {
		//set timer variables ot zero.
		// CalculateDistance returns a value in cm we need it in dm

		distancecm1 = calculateDistance();
 4ce:	22 df       	rcall	.-444    	; 0x314 <_Z17calculateDistancev>
 4d0:	13 d2       	rcall	.+1062   	; 0x8f8 <__fixunssfsi>
 4d2:	60 93 18 01 	sts	0x0118, r22
		//check singular number to do correct round up or down
		int singular = (distancecm1 % 100) % 10;
 4d6:	89 e2       	ldi	r24, 0x29	; 41
 4d8:	68 9f       	mul	r22, r24
 4da:	81 2d       	mov	r24, r1
 4dc:	11 24       	eor	r1, r1
 4de:	82 95       	swap	r24
 4e0:	8f 70       	andi	r24, 0x0F	; 15
 4e2:	96 2f       	mov	r25, r22
 4e4:	24 e6       	ldi	r18, 0x64	; 100
 4e6:	82 9f       	mul	r24, r18
 4e8:	90 19       	sub	r25, r0
 4ea:	11 24       	eor	r1, r1
 4ec:	8d ec       	ldi	r24, 0xCD	; 205
 4ee:	98 9f       	mul	r25, r24
 4f0:	81 2d       	mov	r24, r1
 4f2:	11 24       	eor	r1, r1
 4f4:	86 95       	lsr	r24
 4f6:	86 95       	lsr	r24
 4f8:	86 95       	lsr	r24
 4fa:	88 0f       	add	r24, r24
 4fc:	28 2f       	mov	r18, r24
 4fe:	22 0f       	add	r18, r18
 500:	22 0f       	add	r18, r18
 502:	82 0f       	add	r24, r18
 504:	98 1b       	sub	r25, r24
 506:	89 2f       	mov	r24, r25
 508:	90 e0       	ldi	r25, 0x00	; 0
		if(singular >= 5){
 50a:	05 97       	sbiw	r24, 0x05	; 5
 50c:	0c f0       	brlt	.+2      	; 0x510 <_Z14CalculateTime2v+0xc8>
 50e:	b4 cf       	rjmp	.-152    	; 0x478 <_Z14CalculateTime2v+0x30>
 510:	be cf       	rjmp	.-132    	; 0x48e <_Z14CalculateTime2v+0x46>
		
	
	}
	
	//when echo output is low, stop timer. (save time)
	if (!timeTaken && triggerSend && timerStarted && !(PINB & (1<<ECHO_PIN2))) {
 512:	80 91 14 01 	lds	r24, 0x0114
 516:	81 11       	cpse	r24, r1
 518:	a7 cf       	rjmp	.-178    	; 0x468 <_Z14CalculateTime2v+0x20>
 51a:	08 95       	ret

0000051c <_Z16compareSignaturePhS_>:
	float centiMeters = uTime/58;
	if (centiMeters > 240) return 240;
	return centiMeters;
}

bool compareSignature(uint8_t* oursignature, uint8_t* signature){
 51c:	dc 01       	movw	r26, r24
 51e:	fb 01       	movw	r30, r22
	for (int i = 0; i<3;i++){
		if (oursignature[i] != signature[i]){
 520:	9c 91       	ld	r25, X
 522:	80 81       	ld	r24, Z
 524:	98 13       	cpse	r25, r24
 526:	0e c0       	rjmp	.+28     	; 0x544 <_Z16compareSignaturePhS_+0x28>
 528:	11 96       	adiw	r26, 0x01	; 1
 52a:	9c 91       	ld	r25, X
 52c:	11 97       	sbiw	r26, 0x01	; 1
 52e:	81 81       	ldd	r24, Z+1	; 0x01
 530:	98 13       	cpse	r25, r24
 532:	0a c0       	rjmp	.+20     	; 0x548 <_Z16compareSignaturePhS_+0x2c>
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	12 96       	adiw	r26, 0x02	; 2
 538:	2c 91       	ld	r18, X
 53a:	92 81       	ldd	r25, Z+2	; 0x02
 53c:	29 17       	cp	r18, r25
 53e:	29 f0       	breq	.+10     	; 0x54a <_Z16compareSignaturePhS_+0x2e>
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	08 95       	ret
			return false;
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	08 95       	ret
 548:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return true;
}
 54a:	08 95       	ret

0000054c <_Z16IRSensorFunctionv>:

void IRSensorFunction(){
	// If 100 us have passed
	if (TCNT1 > 1840){ //Timer counter
 54c:	80 91 84 00 	lds	r24, 0x0084
 550:	90 91 85 00 	lds	r25, 0x0085
 554:	81 33       	cpi	r24, 0x31	; 49
 556:	97 40       	sbci	r25, 0x07	; 7
 558:	88 f0       	brcs	.+34     	; 0x57c <_Z16IRSensorFunctionv+0x30>
		IRtimer++;
 55a:	80 91 1b 01 	lds	r24, 0x011B
 55e:	90 91 1c 01 	lds	r25, 0x011C
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	90 93 1c 01 	sts	0x011C, r25
 568:	80 93 1b 01 	sts	0x011B, r24
		TCNT1 = 0;
 56c:	10 92 85 00 	sts	0x0085, r1
 570:	10 92 84 00 	sts	0x0084, r1
		PORTC ^= (1<<PINC0);
 574:	98 b1       	in	r25, 0x08	; 8
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	89 27       	eor	r24, r25
 57a:	88 b9       	out	0x08, r24	; 8
		//PORTC ^= (1<<PINC1);
		 //(1<< PINC0) | (1<<PINC1);
	}
	
	// If 200*100 us(20 ms) has passed and PINB7 is high
	if (IRtimer == IRheader * 10 && bit_is_set(PINB, 6)){
 57c:	80 91 1b 01 	lds	r24, 0x011B
 580:	90 91 1c 01 	lds	r25, 0x011C
 584:	88 3c       	cpi	r24, 0xC8	; 200
 586:	91 05       	cpc	r25, r1
 588:	11 f4       	brne	.+4      	; 0x58e <_Z16IRSensorFunctionv+0x42>
 58a:	1e 99       	sbic	0x03, 6	; 3
 58c:	76 c0       	rjmp	.+236    	; 0x67a <_Z16IRSensorFunctionv+0x12e>
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
		(enemy ? message1 |= (1<<IRSENSOR_INDEX) : message1 &= ~(1<<IRSENSOR_INDEX));
	}
	
	if (!edge && bit_is_clear(PINB, 6)){ // Found edge
 58e:	80 91 25 01 	lds	r24, 0x0125
 592:	81 11       	cpse	r24, r1
 594:	b9 c0       	rjmp	.+370    	; 0x708 <_Z16IRSensorFunctionv+0x1bc>
 596:	1e 9b       	sbis	0x03, 6	; 3
 598:	8b c0       	rjmp	.+278    	; 0x6b0 <_Z16IRSensorFunctionv+0x164>
 59a:	b1 c0       	rjmp	.+354    	; 0x6fe <_Z16IRSensorFunctionv+0x1b2>
		IRtimer = 0;
		edge = true;
	}
	
	if (!header){ // Go into header mode if not in header already
		if(edge && bit_is_set(PINB, 6) && IRtimer >= IRheader){ // header if equal greater than ~2000uS
 59c:	1e 9b       	sbis	0x03, 6	; 3
 59e:	28 c0       	rjmp	.+80     	; 0x5f0 <_Z16IRSensorFunctionv+0xa4>
 5a0:	80 91 1b 01 	lds	r24, 0x011B
 5a4:	90 91 1c 01 	lds	r25, 0x011C
 5a8:	44 97       	sbiw	r24, 0x14	; 20
 5aa:	0c f0       	brlt	.+2      	; 0x5ae <_Z16IRSensorFunctionv+0x62>
 5ac:	91 c0       	rjmp	.+290    	; 0x6d0 <_Z16IRSensorFunctionv+0x184>
 5ae:	20 c0       	rjmp	.+64     	; 0x5f0 <_Z16IRSensorFunctionv+0xa4>
			index = 0;
		}
	}
	
	else{
		if (edge && bit_is_set(PINB, 6)) { //PIND & (1<<PIND7)) {
 5b0:	80 91 25 01 	lds	r24, 0x0125
 5b4:	88 23       	and	r24, r24
 5b6:	11 f1       	breq	.+68     	; 0x5fc <_Z16IRSensorFunctionv+0xb0>
 5b8:	1e 99       	sbic	0x03, 6	; 3
 5ba:	96 c0       	rjmp	.+300    	; 0x6e8 <_Z16IRSensorFunctionv+0x19c>
 5bc:	1d c0       	rjmp	.+58     	; 0x5f8 <_Z16IRSensorFunctionv+0xac>
			if (IRtimer > IROneValue){ // 1 if longer than 1100us, else 0
				signature[index] = 1;
 5be:	e0 91 1d 01 	lds	r30, 0x011D
 5c2:	f0 91 1e 01 	lds	r31, 0x011E
 5c6:	e0 5e       	subi	r30, 0xE0	; 224
 5c8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	80 83       	st	Z, r24
 5ce:	07 c0       	rjmp	.+14     	; 0x5de <_Z16IRSensorFunctionv+0x92>
			}
			else{
				signature[index] = 0;
 5d0:	e0 91 1d 01 	lds	r30, 0x011D
 5d4:	f0 91 1e 01 	lds	r31, 0x011E
 5d8:	e0 5e       	subi	r30, 0xE0	; 224
 5da:	fe 4f       	sbci	r31, 0xFE	; 254
 5dc:	10 82       	st	Z, r1
			}
			index++;
 5de:	80 91 1d 01 	lds	r24, 0x011D
 5e2:	90 91 1e 01 	lds	r25, 0x011E
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	90 93 1e 01 	sts	0x011E, r25
 5ec:	80 93 1d 01 	sts	0x011D, r24
		}
	}
	if (edge && bit_is_set(PINB, 6)){ // End of signal
 5f0:	80 91 25 01 	lds	r24, 0x0125
 5f4:	88 23       	and	r24, r24
 5f6:	11 f0       	breq	.+4      	; 0x5fc <_Z16IRSensorFunctionv+0xb0>
 5f8:	1e 99       	sbic	0x03, 6	; 3
 5fa:	7e c0       	rjmp	.+252    	; 0x6f8 <_Z16IRSensorFunctionv+0x1ac>
		edge = false;
	}
	if (index == 3){
 5fc:	80 91 1d 01 	lds	r24, 0x011D
 600:	90 91 1e 01 	lds	r25, 0x011E
 604:	03 97       	sbiw	r24, 0x03	; 3
 606:	09 f0       	breq	.+2      	; 0x60a <_Z16IRSensorFunctionv+0xbe>
 608:	84 c0       	rjmp	.+264    	; 0x712 <_Z16IRSensorFunctionv+0x1c6>
		if (compareSignature(oursignature, signature)){
 60a:	60 e2       	ldi	r22, 0x20	; 32
 60c:	71 e0       	ldi	r23, 0x01	; 1
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	84 df       	rcall	.-248    	; 0x51c <_Z16compareSignaturePhS_>
 614:	88 23       	and	r24, r24
 616:	19 f0       	breq	.+6      	; 0x61e <_Z16IRSensorFunctionv+0xd2>
			enemy = false;
 618:	10 92 23 01 	sts	0x0123, r1
 61c:	03 c0       	rjmp	.+6      	; 0x624 <_Z16IRSensorFunctionv+0xd8>
		}
		else {
			enemy = true;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	80 93 23 01 	sts	0x0123, r24
		}
		header = false;
 624:	10 92 24 01 	sts	0x0124, r1
		index = 0;
 628:	10 92 1e 01 	sts	0x011E, r1
 62c:	10 92 1d 01 	sts	0x011D, r1
		IRtimer = 0;
 630:	10 92 1c 01 	sts	0x011C, r1
 634:	10 92 1b 01 	sts	0x011B, r1
		
		//Set UART message
		signatureS = (signature[0]<<2) | (signature[1]<<1) | signature[2];
 638:	e0 e2       	ldi	r30, 0x20	; 32
 63a:	f1 e0       	ldi	r31, 0x01	; 1
 63c:	80 81       	ld	r24, Z
 63e:	98 2f       	mov	r25, r24
 640:	99 0f       	add	r25, r25
 642:	99 0f       	add	r25, r25
 644:	81 81       	ldd	r24, Z+1	; 0x01
 646:	88 0f       	add	r24, r24
 648:	89 2b       	or	r24, r25
 64a:	92 81       	ldd	r25, Z+2	; 0x02
 64c:	89 2b       	or	r24, r25
 64e:	80 93 1f 01 	sts	0x011F, r24
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 652:	98 2f       	mov	r25, r24
 654:	99 0f       	add	r25, r25
 656:	99 0f       	add	r25, r25
 658:	99 0f       	add	r25, r25
		index = 0;
		IRtimer = 0;
		
		//Set UART message
		signatureS = (signature[0]<<2) | (signature[1]<<1) | signature[2];
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
 65a:	80 91 0a 01 	lds	r24, 0x010A
 65e:	87 7c       	andi	r24, 0xC7	; 199
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 660:	89 2b       	or	r24, r25
		(enemy ? message1 |= (1<<IRSENSOR_INDEX) : message1 &= ~(1<<IRSENSOR_INDEX));
 662:	90 91 23 01 	lds	r25, 0x0123
 666:	99 23       	and	r25, r25
 668:	21 f0       	breq	.+8      	; 0x672 <_Z16IRSensorFunctionv+0x126>
 66a:	80 68       	ori	r24, 0x80	; 128
 66c:	80 93 0a 01 	sts	0x010A, r24
 670:	08 95       	ret
 672:	8f 77       	andi	r24, 0x7F	; 127
 674:	80 93 0a 01 	sts	0x010A, r24
 678:	08 95       	ret
		 //(1<< PINC0) | (1<<PINC1);
	}
	
	// If 200*100 us(20 ms) has passed and PINB7 is high
	if (IRtimer == IRheader * 10 && bit_is_set(PINB, 6)){
		enemy = false;
 67a:	10 92 23 01 	sts	0x0123, r1
		//Set UART message
		signatureS = (oursignature[0]<<2) | (oursignature[1]<<1) | oursignature[2];
 67e:	e1 e0       	ldi	r30, 0x01	; 1
 680:	f1 e0       	ldi	r31, 0x01	; 1
 682:	80 81       	ld	r24, Z
 684:	98 2f       	mov	r25, r24
 686:	99 0f       	add	r25, r25
 688:	99 0f       	add	r25, r25
 68a:	81 81       	ldd	r24, Z+1	; 0x01
 68c:	88 0f       	add	r24, r24
 68e:	89 2b       	or	r24, r25
 690:	92 81       	ldd	r25, Z+2	; 0x02
 692:	89 2b       	or	r24, r25
 694:	80 93 1f 01 	sts	0x011F, r24
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 698:	98 2f       	mov	r25, r24
 69a:	99 0f       	add	r25, r25
 69c:	99 0f       	add	r25, r25
 69e:	99 0f       	add	r25, r25
	// If 200*100 us(20 ms) has passed and PINB7 is high
	if (IRtimer == IRheader * 10 && bit_is_set(PINB, 6)){
		enemy = false;
		//Set UART message
		signatureS = (oursignature[0]<<2) | (oursignature[1]<<1) | oursignature[2];
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
 6a0:	80 91 0a 01 	lds	r24, 0x010A
 6a4:	87 7c       	andi	r24, 0xC7	; 199
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 6a6:	89 2b       	or	r24, r25
		(enemy ? message1 |= (1<<IRSENSOR_INDEX) : message1 &= ~(1<<IRSENSOR_INDEX));
 6a8:	8f 77       	andi	r24, 0x7F	; 127
 6aa:	80 93 0a 01 	sts	0x010A, r24
 6ae:	6f cf       	rjmp	.-290    	; 0x58e <_Z16IRSensorFunctionv+0x42>
	}
	
	if (!edge && bit_is_clear(PINB, 6)){ // Found edge
		TCNT1 = 0;
 6b0:	10 92 85 00 	sts	0x0085, r1
 6b4:	10 92 84 00 	sts	0x0084, r1
		IRtimer = 0;
 6b8:	10 92 1c 01 	sts	0x011C, r1
 6bc:	10 92 1b 01 	sts	0x011B, r1
		edge = true;
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	80 93 25 01 	sts	0x0125, r24
	}
	
	if (!header){ // Go into header mode if not in header already
 6c6:	80 91 24 01 	lds	r24, 0x0124
 6ca:	81 11       	cpse	r24, r1
 6cc:	75 cf       	rjmp	.-278    	; 0x5b8 <_Z16IRSensorFunctionv+0x6c>
 6ce:	66 cf       	rjmp	.-308    	; 0x59c <_Z16IRSensorFunctionv+0x50>
		if(edge && bit_is_set(PINB, 6) && IRtimer >= IRheader){ // header if equal greater than ~2000uS
			header = true;
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	80 93 24 01 	sts	0x0124, r24
			index = 0;
 6d6:	10 92 1e 01 	sts	0x011E, r1
 6da:	10 92 1d 01 	sts	0x011D, r1
				signature[index] = 0;
			}
			index++;
		}
	}
	if (edge && bit_is_set(PINB, 6)){ // End of signal
 6de:	80 91 25 01 	lds	r24, 0x0125
 6e2:	81 11       	cpse	r24, r1
 6e4:	89 cf       	rjmp	.-238    	; 0x5f8 <_Z16IRSensorFunctionv+0xac>
 6e6:	08 95       	ret
		}
	}
	
	else{
		if (edge && bit_is_set(PINB, 6)) { //PIND & (1<<PIND7)) {
			if (IRtimer > IROneValue){ // 1 if longer than 1100us, else 0
 6e8:	80 91 1b 01 	lds	r24, 0x011B
 6ec:	90 91 1c 01 	lds	r25, 0x011C
 6f0:	08 97       	sbiw	r24, 0x08	; 8
 6f2:	0c f0       	brlt	.+2      	; 0x6f6 <_Z16IRSensorFunctionv+0x1aa>
 6f4:	64 cf       	rjmp	.-312    	; 0x5be <_Z16IRSensorFunctionv+0x72>
 6f6:	6c cf       	rjmp	.-296    	; 0x5d0 <_Z16IRSensorFunctionv+0x84>
			}
			index++;
		}
	}
	if (edge && bit_is_set(PINB, 6)){ // End of signal
		edge = false;
 6f8:	10 92 25 01 	sts	0x0125, r1
 6fc:	7f cf       	rjmp	.-258    	; 0x5fc <_Z16IRSensorFunctionv+0xb0>
		TCNT1 = 0;
		IRtimer = 0;
		edge = true;
	}
	
	if (!header){ // Go into header mode if not in header already
 6fe:	80 91 24 01 	lds	r24, 0x0124
 702:	81 11       	cpse	r24, r1
 704:	55 cf       	rjmp	.-342    	; 0x5b0 <_Z16IRSensorFunctionv+0x64>
 706:	74 cf       	rjmp	.-280    	; 0x5f0 <_Z16IRSensorFunctionv+0xa4>
 708:	80 91 24 01 	lds	r24, 0x0124
 70c:	81 11       	cpse	r24, r1
 70e:	50 cf       	rjmp	.-352    	; 0x5b0 <_Z16IRSensorFunctionv+0x64>
 710:	45 cf       	rjmp	.-374    	; 0x59c <_Z16IRSensorFunctionv+0x50>
 712:	08 95       	ret

00000714 <_Z19laserSensorFunctionv>:
bool waitLaserActivation = false;
bool laserIniated = false;

void laserSensorFunction(){
	//Reactivate laser 2 sec after hit
	if(TCNT3 >= 18000){
 714:	80 91 94 00 	lds	r24, 0x0094
 718:	90 91 95 00 	lds	r25, 0x0095
 71c:	80 35       	cpi	r24, 0x50	; 80
 71e:	96 44       	sbci	r25, 0x46	; 70
 720:	48 f0       	brcs	.+18     	; 0x734 <_Z19laserSensorFunctionv+0x20>
		secsSinceLaserHit++;
 722:	80 91 11 01 	lds	r24, 0x0111
 726:	8f 5f       	subi	r24, 0xFF	; 255
 728:	80 93 11 01 	sts	0x0111, r24
		TCNT3 = 0;
 72c:	10 92 95 00 	sts	0x0095, r1
 730:	10 92 94 00 	sts	0x0094, r1
	}
	if(secsSinceLaserHit >= 5){
 734:	80 91 11 01 	lds	r24, 0x0111
 738:	85 30       	cpi	r24, 0x05	; 5
 73a:	08 f1       	brcs	.+66     	; 0x77e <_Z19laserSensorFunctionv+0x6a>
		//inactivate
		PORTB |= (1 << LASER_AKTIVERA_PORT);
 73c:	2c 9a       	sbi	0x05, 4	; 5
		//reset count
		if(!waitLaserActivation){
 73e:	80 91 10 01 	lds	r24, 0x0110
 742:	81 11       	cpse	r24, r1
 744:	07 c0       	rjmp	.+14     	; 0x754 <_Z19laserSensorFunctionv+0x40>
			TCNT3 = 0;
 746:	10 92 95 00 	sts	0x0095, r1
 74a:	10 92 94 00 	sts	0x0094, r1
			waitLaserActivation = true;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	80 93 10 01 	sts	0x0110, r24
		}
		//activate, might have to wait if this is too fast here we wait 10 more clock ticks
		if(TCNT3 >= TICKS_TO_WAIT_FOR_ACTIVATE_LASER){
 754:	80 91 94 00 	lds	r24, 0x0094
 758:	90 91 95 00 	lds	r25, 0x0095
 75c:	88 3e       	cpi	r24, 0xE8	; 232
 75e:	93 40       	sbci	r25, 0x03	; 3
 760:	70 f0       	brcs	.+28     	; 0x77e <_Z19laserSensorFunctionv+0x6a>
			PORTB &= ~(1 << LASER_AKTIVERA_PORT);
 762:	2c 98       	cbi	0x05, 4	; 5
			TCCR3B &= 0b11111000; //Reset pre-scaler to stop counting
 764:	e1 e9       	ldi	r30, 0x91	; 145
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	88 7f       	andi	r24, 0xF8	; 248
 76c:	80 83       	st	Z, r24
			TCNT3 = 0; //Reset counter
 76e:	10 92 95 00 	sts	0x0095, r1
 772:	10 92 94 00 	sts	0x0094, r1
			secsSinceLaserHit = 0;
 776:	10 92 11 01 	sts	0x0111, r1
			waitLaserActivation = false;
 77a:	10 92 10 01 	sts	0x0110, r1
		}
	}
	
	//mask LASER bit
	laser = (PINB>>5);
 77e:	83 b1       	in	r24, 0x03	; 3
 780:	85 fb       	bst	r24, 5
 782:	88 27       	eor	r24, r24
 784:	80 f9       	bld	r24, 0
	laser &= 0b00000001;
 786:	80 93 26 01 	sts	0x0126, r24
	if(laser == 0b00000001){
 78a:	81 30       	cpi	r24, 0x01	; 1
 78c:	59 f4       	brne	.+22     	; 0x7a4 <_Z19laserSensorFunctionv+0x90>
		message1 &= 0b10111111; //Reset laser bit
 78e:	80 91 0a 01 	lds	r24, 0x010A
		message1 |= (laser<<LASER_INDEX); //Mask in new laser bit
 792:	80 64       	ori	r24, 0x40	; 64
 794:	80 93 0a 01 	sts	0x010A, r24
		//Start timer with pre-scaler 1024
		TCCR3B |= (1<<CS32) | (1<<CS30);
 798:	e1 e9       	ldi	r30, 0x91	; 145
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	80 81       	ld	r24, Z
 79e:	85 60       	ori	r24, 0x05	; 5
 7a0:	80 83       	st	Z, r24
 7a2:	08 95       	ret
	}
	else{
		//no hit
		message1 &= 0b10111111;
 7a4:	80 91 0a 01 	lds	r24, 0x010A
 7a8:	8f 7b       	andi	r24, 0xBF	; 191
 7aa:	80 93 0a 01 	sts	0x010A, r24
 7ae:	08 95       	ret

000007b0 <_Z18ultrasonicFunctionv>:
	}
}

void ultrasonicFunction(){
	//in here every 100 us
	if (TCNT2 > 184) {
 7b0:	80 91 b2 00 	lds	r24, 0x00B2
 7b4:	89 3b       	cpi	r24, 0xB9	; 185
 7b6:	78 f0       	brcs	.+30     	; 0x7d6 <_Z18ultrasonicFunctionv+0x26>
		PORTC ^= (1<<PINC1);
 7b8:	98 b1       	in	r25, 0x08	; 8
 7ba:	82 e0       	ldi	r24, 0x02	; 2
 7bc:	89 27       	eor	r24, r25
 7be:	88 b9       	out	0x08, r24	; 8
		timer++;
 7c0:	80 91 19 01 	lds	r24, 0x0119
 7c4:	90 91 1a 01 	lds	r25, 0x011A
 7c8:	01 96       	adiw	r24, 0x01	; 1
 7ca:	90 93 1a 01 	sts	0x011A, r25
 7ce:	80 93 19 01 	sts	0x0119, r24
		TCNT2 = 0;
 7d2:	10 92 b2 00 	sts	0x00B2, r1
	}
	
	if (useSensor1) {
 7d6:	80 91 00 01 	lds	r24, 0x0100
 7da:	88 23       	and	r24, r24
 7dc:	39 f0       	breq	.+14     	; 0x7ec <_Z18ultrasonicFunctionv+0x3c>
		
		if (!triggerSend) {
 7de:	80 91 14 01 	lds	r24, 0x0114
 7e2:	81 11       	cpse	r24, r1
 7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <_Z18ultrasonicFunctionv+0x38>
			StartPulse1();
 7e6:	64 dd       	rcall	.-1336   	; 0x2b0 <_Z11StartPulse1v>
		}
		CalculateTime1();
 7e8:	c3 dd       	rcall	.-1146   	; 0x370 <_Z14CalculateTime1v>
 7ea:	06 c0       	rjmp	.+12     	; 0x7f8 <_Z18ultrasonicFunctionv+0x48>
	}
	else {
		if (!triggerSend) {
 7ec:	80 91 14 01 	lds	r24, 0x0114
 7f0:	81 11       	cpse	r24, r1
 7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <_Z18ultrasonicFunctionv+0x46>
			StartPulse2();
 7f4:	76 dd       	rcall	.-1300   	; 0x2e2 <_Z11StartPulse2v>
		}
		CalculateTime2();
 7f6:	28 de       	rcall	.-944    	; 0x448 <_Z14CalculateTime2v>
	}
	
	//wait atleast 10msec
	if (timeTaken && timer == 1000) {
 7f8:	80 91 12 01 	lds	r24, 0x0112
 7fc:	88 23       	and	r24, r24
 7fe:	79 f0       	breq	.+30     	; 0x81e <_Z18ultrasonicFunctionv+0x6e>
 800:	80 91 19 01 	lds	r24, 0x0119
 804:	90 91 1a 01 	lds	r25, 0x011A
 808:	88 3e       	cpi	r24, 0xE8	; 232
 80a:	93 40       	sbci	r25, 0x03	; 3
 80c:	41 f4       	brne	.+16     	; 0x81e <_Z18ultrasonicFunctionv+0x6e>
		triggerSend = false;
 80e:	10 92 14 01 	sts	0x0114, r1
		triggerStarted = false;
 812:	10 92 15 01 	sts	0x0115, r1
		timerStarted = false;
 816:	10 92 13 01 	sts	0x0113, r1
		timeTaken = false;
 81a:	10 92 12 01 	sts	0x0112, r1
 81e:	08 95       	ret

00000820 <_Z23waitForActivationSensorv>:
	}
}

//Wait for press on activation button
void waitForActivationSensor(){
	while((PIND>>PIND7) == 0){
 820:	1e c0       	rjmp	.+60     	; 0x85e <_Z23waitForActivationSensorv+0x3e>
		//Do nothing, wait for activation
		
		if((PINB>>PINB7) == 0){
 822:	83 b1       	in	r24, 0x03	; 3
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	88 0f       	add	r24, r24
 828:	89 2f       	mov	r24, r25
 82a:	88 1f       	adc	r24, r24
 82c:	99 0b       	sbc	r25, r25
 82e:	89 2b       	or	r24, r25
 830:	b1 f4       	brne	.+44     	; 0x85e <_Z23waitForActivationSensorv+0x3e>
			cli();
 832:	f8 94       	cli
			tape1Threshold = tape1CurrentValue - TAPE_ERROR_MARGIN; 
 834:	80 91 29 01 	lds	r24, 0x0129
 838:	90 91 2a 01 	lds	r25, 0x012A
 83c:	88 5c       	subi	r24, 0xC8	; 200
 83e:	91 09       	sbc	r25, r1
 840:	90 93 0e 01 	sts	0x010E, r25
 844:	80 93 0d 01 	sts	0x010D, r24
			tape2Threshold = tape2CurrentValue - TAPE_ERROR_MARGIN; 
 848:	80 91 27 01 	lds	r24, 0x0127
 84c:	90 91 28 01 	lds	r25, 0x0128
 850:	88 5c       	subi	r24, 0xC8	; 200
 852:	91 09       	sbc	r25, r1
 854:	90 93 0c 01 	sts	0x010C, r25
 858:	80 93 0b 01 	sts	0x010B, r24
			sei();
 85c:	78 94       	sei
	}
}

//Wait for press on activation button
void waitForActivationSensor(){
	while((PIND>>PIND7) == 0){
 85e:	89 b1       	in	r24, 0x09	; 9
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	88 0f       	add	r24, r24
 864:	89 2f       	mov	r24, r25
 866:	88 1f       	adc	r24, r24
 868:	99 0b       	sbc	r25, r25
 86a:	89 2b       	or	r24, r25
 86c:	d1 f2       	breq	.-76     	; 0x822 <_Z23waitForActivationSensorv+0x2>
			sei();
		}
		
	}
	return;
}
 86e:	08 95       	ret

00000870 <main>:
	PIN3: Ultrasonic 2		(out)
	PIN4: Laser Aktivera	(out)
	PIN5: Laser				(in)
	*/
	
	DDRD &= ~(1<<PIND7); //Aktiveringsknapp (in)
 870:	57 98       	cbi	0x0a, 7	; 10
	DDRB = 0b00011010;
 872:	8a e1       	ldi	r24, 0x1A	; 26
 874:	84 b9       	out	0x04, r24	; 4
	//DDRB |= (1<<PIND6);
	
	//debugging
	DDRC |= (1<< PINC0) | (1<<PINC1);
 876:	87 b1       	in	r24, 0x07	; 7
 878:	83 60       	ori	r24, 0x03	; 3
 87a:	87 b9       	out	0x07, r24	; 7
		
	//enable global interrupt
	sei();
 87c:	78 94       	sei
	
	//Ultrasonic
	TCCR2B |= 1 << CS20; // Start timer
 87e:	e1 eb       	ldi	r30, 0xB1	; 177
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	80 81       	ld	r24, Z
 884:	81 60       	ori	r24, 0x01	; 1
 886:	80 83       	st	Z, r24
	TCNT2 = 0;
 888:	10 92 b2 00 	sts	0x00B2, r1
	//###############
	//## ADC INITS ##
	//###############
		
	//turn on ADC
	ADCSRA |= (1 << ADEN);
 88c:	ea e7       	ldi	r30, 0x7A	; 122
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	80 81       	ld	r24, Z
 892:	80 68       	ori	r24, 0x80	; 128
 894:	80 83       	st	Z, r24
	//Set ADC clock to 1000 000 / 128 Hz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) ;
 896:	80 81       	ld	r24, Z
 898:	87 60       	ori	r24, 0x07	; 7
 89a:	80 83       	st	Z, r24
	//ADC interrupt enabled
	ADCSRA |= (1 << ADIE);
 89c:	80 81       	ld	r24, Z
 89e:	88 60       	ori	r24, 0x08	; 8
 8a0:	80 83       	st	Z, r24
	//mux PINA0, start with TAPE
	ADMUX |= (1<<PINA0);
 8a2:	ac e7       	ldi	r26, 0x7C	; 124
 8a4:	b0 e0       	ldi	r27, 0x00	; 0
 8a6:	8c 91       	ld	r24, X
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	8c 93       	st	X, r24
	//################
	
	//initiate UART målsökning
	//set baud rate
	uint16_t UBRR_val = UBRR_SENSOR_MALSOKNING;
	UBRR0H = (unsigned char) (UBRR_val >> 8);
 8ac:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) UBRR_val;
 8b0:	87 e7       	ldi	r24, 0x77	; 119
 8b2:	80 93 c4 00 	sts	0x00C4, r24
	//enable transmit + set frame 8 bits
	UCSR0B = (1<<TXEN0);
 8b6:	a1 ec       	ldi	r26, 0xC1	; 193
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	88 e0       	ldi	r24, 0x08	; 8
 8bc:	8c 93       	st	X, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
 8be:	86 e0       	ldi	r24, 0x06	; 6
 8c0:	80 93 c2 00 	sts	0x00C2, r24
	//enable transmit interrupt
	UCSR0B |= (1<<TXCIE0);
 8c4:	8c 91       	ld	r24, X
 8c6:	80 64       	ori	r24, 0x40	; 64
 8c8:	8c 93       	st	X, r24
	
	//inactivate
	PORTB |= (1 << LASER_AKTIVERA_PORT);
 8ca:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8cc:	8f ef       	ldi	r24, 0xFF	; 255
 8ce:	93 eb       	ldi	r25, 0xB3	; 179
 8d0:	01 97       	sbiw	r24, 0x01	; 1
 8d2:	f1 f7       	brne	.-4      	; 0x8d0 <main+0x60>
 8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <main+0x66>
 8d6:	00 00       	nop
	_delay_ms(10);
	//activate, might have to wait if this is too fast
	//PORTB &= 0b11101111;
	PORTB &= ~(1 << LASER_AKTIVERA_PORT);
 8d8:	2c 98       	cbi	0x05, 4	; 5
	
	//## IR Sensor ##
	TCCR1B |= 1 << CS10;
 8da:	a1 e8       	ldi	r26, 0x81	; 129
 8dc:	b0 e0       	ldi	r27, 0x00	; 0
 8de:	8c 91       	ld	r24, X
 8e0:	81 60       	ori	r24, 0x01	; 1
 8e2:	8c 93       	st	X, r24
	
	//Start 1st ADC conversion
	ADCSRA |= (1 << ADSC);
 8e4:	80 81       	ld	r24, Z
 8e6:	80 64       	ori	r24, 0x40	; 64
 8e8:	80 83       	st	Z, r24
	waitForActivationSensor();
 8ea:	9a df       	rcall	.-204    	; 0x820 <_Z23waitForActivationSensorv>
	
	//start first UART transmission
	UDR0 = 0x00;
 8ec:	10 92 c6 00 	sts	0x00C6, r1
    {
		//###############
		//## IR SENSOR ##
		//###############
		
		IRSensorFunction();
 8f0:	2d de       	rcall	.-934    	; 0x54c <_Z16IRSensorFunctionv>
		
		//##################
		//## Laser sensor ##
		//##################
		
		laserSensorFunction();
 8f2:	10 df       	rcall	.-480    	; 0x714 <_Z19laserSensorFunctionv>
		
		//########################
		//## Ultrasonic Sensors ##
		//########################
		
		ultrasonicFunction();
 8f4:	5d df       	rcall	.-326    	; 0x7b0 <_Z18ultrasonicFunctionv>
	}
 8f6:	fc cf       	rjmp	.-8      	; 0x8f0 <main+0x80>

000008f8 <__fixunssfsi>:
 8f8:	70 d0       	rcall	.+224    	; 0x9da <__fp_splitA>
 8fa:	88 f0       	brcs	.+34     	; 0x91e <__fixunssfsi+0x26>
 8fc:	9f 57       	subi	r25, 0x7F	; 127
 8fe:	90 f0       	brcs	.+36     	; 0x924 <__fixunssfsi+0x2c>
 900:	b9 2f       	mov	r27, r25
 902:	99 27       	eor	r25, r25
 904:	b7 51       	subi	r27, 0x17	; 23
 906:	a0 f0       	brcs	.+40     	; 0x930 <__fixunssfsi+0x38>
 908:	d1 f0       	breq	.+52     	; 0x93e <__fixunssfsi+0x46>
 90a:	66 0f       	add	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	1a f0       	brmi	.+6      	; 0x91a <__fixunssfsi+0x22>
 914:	ba 95       	dec	r27
 916:	c9 f7       	brne	.-14     	; 0x90a <__fixunssfsi+0x12>
 918:	12 c0       	rjmp	.+36     	; 0x93e <__fixunssfsi+0x46>
 91a:	b1 30       	cpi	r27, 0x01	; 1
 91c:	81 f0       	breq	.+32     	; 0x93e <__fixunssfsi+0x46>
 91e:	77 d0       	rcall	.+238    	; 0xa0e <__fp_zero>
 920:	b1 e0       	ldi	r27, 0x01	; 1
 922:	08 95       	ret
 924:	74 c0       	rjmp	.+232    	; 0xa0e <__fp_zero>
 926:	67 2f       	mov	r22, r23
 928:	78 2f       	mov	r23, r24
 92a:	88 27       	eor	r24, r24
 92c:	b8 5f       	subi	r27, 0xF8	; 248
 92e:	39 f0       	breq	.+14     	; 0x93e <__fixunssfsi+0x46>
 930:	b9 3f       	cpi	r27, 0xF9	; 249
 932:	cc f3       	brlt	.-14     	; 0x926 <__fixunssfsi+0x2e>
 934:	86 95       	lsr	r24
 936:	77 95       	ror	r23
 938:	67 95       	ror	r22
 93a:	b3 95       	inc	r27
 93c:	d9 f7       	brne	.-10     	; 0x934 <__fixunssfsi+0x3c>
 93e:	3e f4       	brtc	.+14     	; 0x94e <__fixunssfsi+0x56>
 940:	90 95       	com	r25
 942:	80 95       	com	r24
 944:	70 95       	com	r23
 946:	61 95       	neg	r22
 948:	7f 4f       	sbci	r23, 0xFF	; 255
 94a:	8f 4f       	sbci	r24, 0xFF	; 255
 94c:	9f 4f       	sbci	r25, 0xFF	; 255
 94e:	08 95       	ret

00000950 <__floatunsisf>:
 950:	e8 94       	clt
 952:	09 c0       	rjmp	.+18     	; 0x966 <__floatsisf+0x12>

00000954 <__floatsisf>:
 954:	97 fb       	bst	r25, 7
 956:	3e f4       	brtc	.+14     	; 0x966 <__floatsisf+0x12>
 958:	90 95       	com	r25
 95a:	80 95       	com	r24
 95c:	70 95       	com	r23
 95e:	61 95       	neg	r22
 960:	7f 4f       	sbci	r23, 0xFF	; 255
 962:	8f 4f       	sbci	r24, 0xFF	; 255
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	99 23       	and	r25, r25
 968:	a9 f0       	breq	.+42     	; 0x994 <__floatsisf+0x40>
 96a:	f9 2f       	mov	r31, r25
 96c:	96 e9       	ldi	r25, 0x96	; 150
 96e:	bb 27       	eor	r27, r27
 970:	93 95       	inc	r25
 972:	f6 95       	lsr	r31
 974:	87 95       	ror	r24
 976:	77 95       	ror	r23
 978:	67 95       	ror	r22
 97a:	b7 95       	ror	r27
 97c:	f1 11       	cpse	r31, r1
 97e:	f8 cf       	rjmp	.-16     	; 0x970 <__floatsisf+0x1c>
 980:	fa f4       	brpl	.+62     	; 0x9c0 <__floatsisf+0x6c>
 982:	bb 0f       	add	r27, r27
 984:	11 f4       	brne	.+4      	; 0x98a <__floatsisf+0x36>
 986:	60 ff       	sbrs	r22, 0
 988:	1b c0       	rjmp	.+54     	; 0x9c0 <__floatsisf+0x6c>
 98a:	6f 5f       	subi	r22, 0xFF	; 255
 98c:	7f 4f       	sbci	r23, 0xFF	; 255
 98e:	8f 4f       	sbci	r24, 0xFF	; 255
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	16 c0       	rjmp	.+44     	; 0x9c0 <__floatsisf+0x6c>
 994:	88 23       	and	r24, r24
 996:	11 f0       	breq	.+4      	; 0x99c <__floatsisf+0x48>
 998:	96 e9       	ldi	r25, 0x96	; 150
 99a:	11 c0       	rjmp	.+34     	; 0x9be <__floatsisf+0x6a>
 99c:	77 23       	and	r23, r23
 99e:	21 f0       	breq	.+8      	; 0x9a8 <__floatsisf+0x54>
 9a0:	9e e8       	ldi	r25, 0x8E	; 142
 9a2:	87 2f       	mov	r24, r23
 9a4:	76 2f       	mov	r23, r22
 9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <__floatsisf+0x5e>
 9a8:	66 23       	and	r22, r22
 9aa:	71 f0       	breq	.+28     	; 0x9c8 <__floatsisf+0x74>
 9ac:	96 e8       	ldi	r25, 0x86	; 134
 9ae:	86 2f       	mov	r24, r22
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	60 e0       	ldi	r22, 0x00	; 0
 9b4:	2a f0       	brmi	.+10     	; 0x9c0 <__floatsisf+0x6c>
 9b6:	9a 95       	dec	r25
 9b8:	66 0f       	add	r22, r22
 9ba:	77 1f       	adc	r23, r23
 9bc:	88 1f       	adc	r24, r24
 9be:	da f7       	brpl	.-10     	; 0x9b6 <__floatsisf+0x62>
 9c0:	88 0f       	add	r24, r24
 9c2:	96 95       	lsr	r25
 9c4:	87 95       	ror	r24
 9c6:	97 f9       	bld	r25, 7
 9c8:	08 95       	ret

000009ca <__fp_split3>:
 9ca:	57 fd       	sbrc	r21, 7
 9cc:	90 58       	subi	r25, 0x80	; 128
 9ce:	44 0f       	add	r20, r20
 9d0:	55 1f       	adc	r21, r21
 9d2:	59 f0       	breq	.+22     	; 0x9ea <__fp_splitA+0x10>
 9d4:	5f 3f       	cpi	r21, 0xFF	; 255
 9d6:	71 f0       	breq	.+28     	; 0x9f4 <__fp_splitA+0x1a>
 9d8:	47 95       	ror	r20

000009da <__fp_splitA>:
 9da:	88 0f       	add	r24, r24
 9dc:	97 fb       	bst	r25, 7
 9de:	99 1f       	adc	r25, r25
 9e0:	61 f0       	breq	.+24     	; 0x9fa <__fp_splitA+0x20>
 9e2:	9f 3f       	cpi	r25, 0xFF	; 255
 9e4:	79 f0       	breq	.+30     	; 0xa04 <__fp_splitA+0x2a>
 9e6:	87 95       	ror	r24
 9e8:	08 95       	ret
 9ea:	12 16       	cp	r1, r18
 9ec:	13 06       	cpc	r1, r19
 9ee:	14 06       	cpc	r1, r20
 9f0:	55 1f       	adc	r21, r21
 9f2:	f2 cf       	rjmp	.-28     	; 0x9d8 <__fp_split3+0xe>
 9f4:	46 95       	lsr	r20
 9f6:	f1 df       	rcall	.-30     	; 0x9da <__fp_splitA>
 9f8:	08 c0       	rjmp	.+16     	; 0xa0a <__fp_splitA+0x30>
 9fa:	16 16       	cp	r1, r22
 9fc:	17 06       	cpc	r1, r23
 9fe:	18 06       	cpc	r1, r24
 a00:	99 1f       	adc	r25, r25
 a02:	f1 cf       	rjmp	.-30     	; 0x9e6 <__fp_splitA+0xc>
 a04:	86 95       	lsr	r24
 a06:	71 05       	cpc	r23, r1
 a08:	61 05       	cpc	r22, r1
 a0a:	08 94       	sec
 a0c:	08 95       	ret

00000a0e <__fp_zero>:
 a0e:	e8 94       	clt

00000a10 <__fp_szero>:
 a10:	bb 27       	eor	r27, r27
 a12:	66 27       	eor	r22, r22
 a14:	77 27       	eor	r23, r23
 a16:	cb 01       	movw	r24, r22
 a18:	97 f9       	bld	r25, 7
 a1a:	08 95       	ret

00000a1c <__gesf2>:
 a1c:	03 d0       	rcall	.+6      	; 0xa24 <__fp_cmp>
 a1e:	08 f4       	brcc	.+2      	; 0xa22 <__gesf2+0x6>
 a20:	8f ef       	ldi	r24, 0xFF	; 255
 a22:	08 95       	ret

00000a24 <__fp_cmp>:
 a24:	99 0f       	add	r25, r25
 a26:	00 08       	sbc	r0, r0
 a28:	55 0f       	add	r21, r21
 a2a:	aa 0b       	sbc	r26, r26
 a2c:	e0 e8       	ldi	r30, 0x80	; 128
 a2e:	fe ef       	ldi	r31, 0xFE	; 254
 a30:	16 16       	cp	r1, r22
 a32:	17 06       	cpc	r1, r23
 a34:	e8 07       	cpc	r30, r24
 a36:	f9 07       	cpc	r31, r25
 a38:	c0 f0       	brcs	.+48     	; 0xa6a <__fp_cmp+0x46>
 a3a:	12 16       	cp	r1, r18
 a3c:	13 06       	cpc	r1, r19
 a3e:	e4 07       	cpc	r30, r20
 a40:	f5 07       	cpc	r31, r21
 a42:	98 f0       	brcs	.+38     	; 0xa6a <__fp_cmp+0x46>
 a44:	62 1b       	sub	r22, r18
 a46:	73 0b       	sbc	r23, r19
 a48:	84 0b       	sbc	r24, r20
 a4a:	95 0b       	sbc	r25, r21
 a4c:	39 f4       	brne	.+14     	; 0xa5c <__fp_cmp+0x38>
 a4e:	0a 26       	eor	r0, r26
 a50:	61 f0       	breq	.+24     	; 0xa6a <__fp_cmp+0x46>
 a52:	23 2b       	or	r18, r19
 a54:	24 2b       	or	r18, r20
 a56:	25 2b       	or	r18, r21
 a58:	21 f4       	brne	.+8      	; 0xa62 <__fp_cmp+0x3e>
 a5a:	08 95       	ret
 a5c:	0a 26       	eor	r0, r26
 a5e:	09 f4       	brne	.+2      	; 0xa62 <__fp_cmp+0x3e>
 a60:	a1 40       	sbci	r26, 0x01	; 1
 a62:	a6 95       	lsr	r26
 a64:	8f ef       	ldi	r24, 0xFF	; 255
 a66:	81 1d       	adc	r24, r1
 a68:	81 1d       	adc	r24, r1
 a6a:	08 95       	ret

00000a6c <__divmodhi4>:
 a6c:	97 fb       	bst	r25, 7
 a6e:	07 2e       	mov	r0, r23
 a70:	16 f4       	brtc	.+4      	; 0xa76 <__divmodhi4+0xa>
 a72:	00 94       	com	r0
 a74:	06 d0       	rcall	.+12     	; 0xa82 <__divmodhi4_neg1>
 a76:	77 fd       	sbrc	r23, 7
 a78:	08 d0       	rcall	.+16     	; 0xa8a <__divmodhi4_neg2>
 a7a:	0b d0       	rcall	.+22     	; 0xa92 <__udivmodhi4>
 a7c:	07 fc       	sbrc	r0, 7
 a7e:	05 d0       	rcall	.+10     	; 0xa8a <__divmodhi4_neg2>
 a80:	3e f4       	brtc	.+14     	; 0xa90 <__divmodhi4_exit>

00000a82 <__divmodhi4_neg1>:
 a82:	90 95       	com	r25
 a84:	81 95       	neg	r24
 a86:	9f 4f       	sbci	r25, 0xFF	; 255
 a88:	08 95       	ret

00000a8a <__divmodhi4_neg2>:
 a8a:	70 95       	com	r23
 a8c:	61 95       	neg	r22
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255

00000a90 <__divmodhi4_exit>:
 a90:	08 95       	ret

00000a92 <__udivmodhi4>:
 a92:	aa 1b       	sub	r26, r26
 a94:	bb 1b       	sub	r27, r27
 a96:	51 e1       	ldi	r21, 0x11	; 17
 a98:	07 c0       	rjmp	.+14     	; 0xaa8 <__udivmodhi4_ep>

00000a9a <__udivmodhi4_loop>:
 a9a:	aa 1f       	adc	r26, r26
 a9c:	bb 1f       	adc	r27, r27
 a9e:	a6 17       	cp	r26, r22
 aa0:	b7 07       	cpc	r27, r23
 aa2:	10 f0       	brcs	.+4      	; 0xaa8 <__udivmodhi4_ep>
 aa4:	a6 1b       	sub	r26, r22
 aa6:	b7 0b       	sbc	r27, r23

00000aa8 <__udivmodhi4_ep>:
 aa8:	88 1f       	adc	r24, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	5a 95       	dec	r21
 aae:	a9 f7       	brne	.-22     	; 0xa9a <__udivmodhi4_loop>
 ab0:	80 95       	com	r24
 ab2:	90 95       	com	r25
 ab4:	bc 01       	movw	r22, r24
 ab6:	cd 01       	movw	r24, r26
 ab8:	08 95       	ret

00000aba <_exit>:
 aba:	f8 94       	cli

00000abc <__stop_program>:
 abc:	ff cf       	rjmp	.-2      	; 0xabc <__stop_program>
