
Sensorenheten_6_2(10).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000bb0  00000c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800110  00800110  00000c54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000949  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e0  00000000  00000000  000016b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aee  00000000  00000000  00001995  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b1  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000445  00000000  00000000  00002cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000311a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	37 c0       	rjmp	.+110    	; 0xc8 <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	79 c0       	rjmp	.+242    	; 0x154 <__vector_24>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	46 d4       	rcall	.+2188   	; 0x950 <main>
  c4:	73 c5       	rjmp	.+2790   	; 0xbac <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_22>:
		TCNT1 = 0;
		IRtimer = 0;
		edge = true;
	}
	
	if (!header){ // Go into header mode if not in header already
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	f8 94       	cli
  d6:	80 91 04 01 	lds	r24, 0x0104
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	a9 f0       	breq	.+42     	; 0x108 <__vector_22+0x40>
  de:	28 f4       	brcc	.+10     	; 0xea <__vector_22+0x22>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	41 f0       	breq	.+16     	; 0xf4 <__vector_22+0x2c>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	59 f0       	breq	.+22     	; 0xfe <__vector_22+0x36>
  e8:	1d c0       	rjmp	.+58     	; 0x124 <__vector_22+0x5c>
  ea:	84 30       	cpi	r24, 0x04	; 4
  ec:	91 f0       	breq	.+36     	; 0x112 <__vector_22+0x4a>
  ee:	85 30       	cpi	r24, 0x05	; 5
  f0:	a9 f0       	breq	.+42     	; 0x11c <__vector_22+0x54>
  f2:	18 c0       	rjmp	.+48     	; 0x124 <__vector_22+0x5c>
  f4:	80 91 0a 01 	lds	r24, 0x010A
  f8:	80 93 c6 00 	sts	0x00C6, r24
  fc:	13 c0       	rjmp	.+38     	; 0x124 <__vector_22+0x5c>
  fe:	80 91 09 01 	lds	r24, 0x0109
 102:	80 93 c6 00 	sts	0x00C6, r24
 106:	0e c0       	rjmp	.+28     	; 0x124 <__vector_22+0x5c>
 108:	80 91 08 01 	lds	r24, 0x0108
 10c:	80 93 c6 00 	sts	0x00C6, r24
 110:	09 c0       	rjmp	.+18     	; 0x124 <__vector_22+0x5c>
 112:	80 91 07 01 	lds	r24, 0x0107
 116:	80 93 c6 00 	sts	0x00C6, r24
 11a:	04 c0       	rjmp	.+8      	; 0x124 <__vector_22+0x5c>
 11c:	80 91 06 01 	lds	r24, 0x0106
 120:	80 93 c6 00 	sts	0x00C6, r24
 124:	80 91 04 01 	lds	r24, 0x0104
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	86 30       	cpi	r24, 0x06	; 6
 12c:	18 f4       	brcc	.+6      	; 0x134 <__vector_22+0x6c>
 12e:	80 93 04 01 	sts	0x0104, r24
 132:	03 c0       	rjmp	.+6      	; 0x13a <__vector_22+0x72>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 04 01 	sts	0x0104, r24
 13a:	78 94       	sei
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <_Z11clearADCMUXv>:
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 7e       	andi	r24, 0xE0	; 224
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <__vector_24>:
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	0b b6       	in	r0, 0x3b	; 59
 160:	0f 92       	push	r0
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
 17a:	f8 94       	cli
 17c:	80 91 78 00 	lds	r24, 0x0078
 180:	20 91 79 00 	lds	r18, 0x0079
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	92 2b       	or	r25, r18
 188:	78 94       	sei
 18a:	20 91 05 01 	lds	r18, 0x0105
 18e:	21 30       	cpi	r18, 0x01	; 1
 190:	29 f1       	breq	.+74     	; 0x1dc <__vector_24+0x88>
 192:	20 f0       	brcs	.+8      	; 0x19c <__vector_24+0x48>
 194:	22 30       	cpi	r18, 0x02	; 2
 196:	09 f4       	brne	.+2      	; 0x19a <__vector_24+0x46>
 198:	53 c0       	rjmp	.+166    	; 0x240 <__vector_24+0xec>
 19a:	6d c0       	rjmp	.+218    	; 0x276 <__vector_24+0x122>
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	38 2f       	mov	r19, r24
 1a6:	33 0f       	add	r19, r19
 1a8:	33 0f       	add	r19, r19
 1aa:	33 0f       	add	r19, r19
 1ac:	20 91 07 01 	lds	r18, 0x0107
 1b0:	27 70       	andi	r18, 0x07	; 7
 1b2:	23 2b       	or	r18, r19
 1b4:	20 93 07 01 	sts	0x0107, r18
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	88 73       	andi	r24, 0x38	; 56
 1c2:	90 91 06 01 	lds	r25, 0x0106
 1c6:	97 7c       	andi	r25, 0xC7	; 199
 1c8:	89 2b       	or	r24, r25
 1ca:	80 93 06 01 	sts	0x0106, r24
 1ce:	bc df       	rcall	.-136    	; 0x148 <_Z11clearADCMUXv>
 1d0:	ec e7       	ldi	r30, 0x7C	; 124
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	80 83       	st	Z, r24
 1da:	4d c0       	rjmp	.+154    	; 0x276 <__vector_24+0x122>
 1dc:	40 91 06 01 	lds	r20, 0x0106
 1e0:	4f 7b       	andi	r20, 0xBF	; 191
 1e2:	90 93 2d 01 	sts	0x012D, r25
 1e6:	80 93 2c 01 	sts	0x012C, r24
 1ea:	9c 01       	movw	r18, r24
 1ec:	36 95       	lsr	r19
 1ee:	27 95       	ror	r18
 1f0:	36 95       	lsr	r19
 1f2:	27 95       	ror	r18
 1f4:	28 7f       	andi	r18, 0xF8	; 248
 1f6:	37 70       	andi	r19, 0x07	; 7
 1f8:	30 91 08 01 	lds	r19, 0x0108
 1fc:	37 70       	andi	r19, 0x07	; 7
 1fe:	23 2b       	or	r18, r19
 200:	20 93 08 01 	sts	0x0108, r18
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	60 91 0d 01 	lds	r22, 0x010D
 20c:	70 91 0e 01 	lds	r23, 0x010E
 210:	86 17       	cp	r24, r22
 212:	97 07       	cpc	r25, r23
 214:	10 f4       	brcc	.+4      	; 0x21a <__vector_24+0xc6>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	00 24       	eor	r0, r0
 21c:	36 95       	lsr	r19
 21e:	27 95       	ror	r18
 220:	07 94       	ror	r0
 222:	36 95       	lsr	r19
 224:	27 95       	ror	r18
 226:	07 94       	ror	r0
 228:	32 2f       	mov	r19, r18
 22a:	20 2d       	mov	r18, r0
 22c:	24 2b       	or	r18, r20
 22e:	20 93 06 01 	sts	0x0106, r18
 232:	8a df       	rcall	.-236    	; 0x148 <_Z11clearADCMUXv>
 234:	ec e7       	ldi	r30, 0x7C	; 124
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	80 83       	st	Z, r24
 23e:	1b c0       	rjmp	.+54     	; 0x276 <__vector_24+0x122>
 240:	40 91 06 01 	lds	r20, 0x0106
 244:	4f 77       	andi	r20, 0x7F	; 127
 246:	90 93 2b 01 	sts	0x012B, r25
 24a:	80 93 2a 01 	sts	0x012A, r24
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	60 91 0b 01 	lds	r22, 0x010B
 256:	70 91 0c 01 	lds	r23, 0x010C
 25a:	86 17       	cp	r24, r22
 25c:	97 07       	cpc	r25, r23
 25e:	10 f4       	brcc	.+4      	; 0x264 <__vector_24+0x110>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	36 95       	lsr	r19
 266:	32 2f       	mov	r19, r18
 268:	22 27       	eor	r18, r18
 26a:	37 95       	ror	r19
 26c:	27 95       	ror	r18
 26e:	24 2b       	or	r18, r20
 270:	20 93 06 01 	sts	0x0106, r18
 274:	69 df       	rcall	.-302    	; 0x148 <_Z11clearADCMUXv>
 276:	80 91 05 01 	lds	r24, 0x0105
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	18 f4       	brcc	.+6      	; 0x286 <__vector_24+0x132>
 280:	80 93 05 01 	sts	0x0105, r24
 284:	03 c0       	rjmp	.+6      	; 0x28c <__vector_24+0x138>
 286:	10 92 05 01 	sts	0x0105, r1
 28a:	5e df       	rcall	.-324    	; 0x148 <_Z11clearADCMUXv>
 28c:	ea e7       	ldi	r30, 0x7A	; 122
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	80 83       	st	Z, r24
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0b be       	out	0x3b, r0	; 59
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <_Z16resetTimerValuesv>:
 2bc:	10 92 b2 00 	sts	0x00B2, r1
 2c0:	10 92 21 01 	sts	0x0121, r1
 2c4:	10 92 20 01 	sts	0x0120, r1
 2c8:	08 95       	ret

000002ca <_Z11StartPulse1v>:
 2ca:	80 91 1c 01 	lds	r24, 0x011C
 2ce:	81 11       	cpse	r24, r1
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <_Z11StartPulse1v+0x1a>
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 1c 01 	sts	0x011C, r24
 2d8:	29 9a       	sbi	0x05, 1	; 5
 2da:	f0 df       	rcall	.-32     	; 0x2bc <_Z16resetTimerValuesv>
 2dc:	80 91 1c 01 	lds	r24, 0x011C
 2e0:	88 23       	and	r24, r24
 2e2:	59 f0       	breq	.+22     	; 0x2fa <_Z11StartPulse1v+0x30>
 2e4:	80 91 20 01 	lds	r24, 0x0120
 2e8:	90 91 21 01 	lds	r25, 0x0121
 2ec:	0a 97       	sbiw	r24, 0x0a	; 10
 2ee:	29 f4       	brne	.+10     	; 0x2fa <_Z11StartPulse1v+0x30>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 1b 01 	sts	0x011B, r24
 2f6:	29 98       	cbi	0x05, 1	; 5
 2f8:	e1 cf       	rjmp	.-62     	; 0x2bc <_Z16resetTimerValuesv>
 2fa:	08 95       	ret

000002fc <_Z11StartPulse2v>:
 2fc:	80 91 1c 01 	lds	r24, 0x011C
 300:	81 11       	cpse	r24, r1
 302:	09 c0       	rjmp	.+18     	; 0x316 <_Z11StartPulse2v+0x1a>
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 1c 01 	sts	0x011C, r24
 30a:	2b 9a       	sbi	0x05, 3	; 5
 30c:	d7 df       	rcall	.-82     	; 0x2bc <_Z16resetTimerValuesv>
 30e:	80 91 1c 01 	lds	r24, 0x011C
 312:	88 23       	and	r24, r24
 314:	59 f0       	breq	.+22     	; 0x32c <_Z11StartPulse2v+0x30>
 316:	80 91 20 01 	lds	r24, 0x0120
 31a:	90 91 21 01 	lds	r25, 0x0121
 31e:	0a 97       	sbiw	r24, 0x0a	; 10
 320:	29 f4       	brne	.+10     	; 0x32c <_Z11StartPulse2v+0x30>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 1b 01 	sts	0x011B, r24
 328:	2b 98       	cbi	0x05, 3	; 5
 32a:	c8 cf       	rjmp	.-112    	; 0x2bc <_Z16resetTimerValuesv>
 32c:	08 95       	ret

0000032e <_Z17calculateDistancev>:
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	20 91 20 01 	lds	r18, 0x0120
 33a:	30 91 21 01 	lds	r19, 0x0121
 33e:	4a e2       	ldi	r20, 0x2A	; 42
 340:	42 9f       	mul	r20, r18
 342:	c0 01       	movw	r24, r0
 344:	43 9f       	mul	r20, r19
 346:	90 0d       	add	r25, r0
 348:	11 24       	eor	r1, r1
 34a:	6a e3       	ldi	r22, 0x3A	; 58
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	07 d4       	rcall	.+2062   	; 0xb5e <__divmodhi4>
 350:	07 2e       	mov	r0, r23
 352:	00 0c       	add	r0, r0
 354:	88 0b       	sbc	r24, r24
 356:	99 0b       	sbc	r25, r25
 358:	76 d3       	rcall	.+1772   	; 0xa46 <__floatsisf>
 35a:	06 2f       	mov	r16, r22
 35c:	17 2f       	mov	r17, r23
 35e:	d8 2f       	mov	r29, r24
 360:	c9 2f       	mov	r28, r25
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	40 e7       	ldi	r20, 0x70	; 112
 368:	53 e4       	ldi	r21, 0x43	; 67
 36a:	d1 d3       	rcall	.+1954   	; 0xb0e <__gesf2>
 36c:	18 16       	cp	r1, r24
 36e:	24 f4       	brge	.+8      	; 0x378 <_Z17calculateDistancev+0x4a>
 370:	00 e0       	ldi	r16, 0x00	; 0
 372:	10 e0       	ldi	r17, 0x00	; 0
 374:	d0 e7       	ldi	r29, 0x70	; 112
 376:	c3 e4       	ldi	r28, 0x43	; 67
 378:	60 2f       	mov	r22, r16
 37a:	71 2f       	mov	r23, r17
 37c:	8d 2f       	mov	r24, r29
 37e:	9c 2f       	mov	r25, r28
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	08 95       	ret

0000038a <_Z14CalculateTime1v>:
 38a:	80 91 19 01 	lds	r24, 0x0119
 38e:	81 11       	cpse	r24, r1
 390:	67 c0       	rjmp	.+206    	; 0x460 <_Z14CalculateTime1v+0xd6>
 392:	80 91 1b 01 	lds	r24, 0x011B
 396:	88 23       	and	r24, r24
 398:	31 f0       	breq	.+12     	; 0x3a6 <_Z14CalculateTime1v+0x1c>
 39a:	80 91 1a 01 	lds	r24, 0x011A
 39e:	81 11       	cpse	r24, r1
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <_Z14CalculateTime1v+0x1c>
 3a2:	18 99       	sbic	0x03, 0	; 3
 3a4:	32 c0       	rjmp	.+100    	; 0x40a <_Z14CalculateTime1v+0x80>
 3a6:	80 91 1b 01 	lds	r24, 0x011B
 3aa:	88 23       	and	r24, r24
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <_Z14CalculateTime1v+0x26>
 3ae:	58 c0       	rjmp	.+176    	; 0x460 <_Z14CalculateTime1v+0xd6>
 3b0:	80 91 1a 01 	lds	r24, 0x011A
 3b4:	88 23       	and	r24, r24
 3b6:	09 f4       	brne	.+2      	; 0x3ba <_Z14CalculateTime1v+0x30>
 3b8:	53 c0       	rjmp	.+166    	; 0x460 <_Z14CalculateTime1v+0xd6>
 3ba:	18 9b       	sbis	0x03, 0	; 3
 3bc:	2f c0       	rjmp	.+94     	; 0x41c <_Z14CalculateTime1v+0x92>
 3be:	08 95       	ret
 3c0:	8d ec       	ldi	r24, 0xCD	; 205
 3c2:	68 9f       	mul	r22, r24
 3c4:	61 2d       	mov	r22, r1
 3c6:	11 24       	eor	r1, r1
 3c8:	66 95       	lsr	r22
 3ca:	66 95       	lsr	r22
 3cc:	66 95       	lsr	r22
 3ce:	6f 5f       	subi	r22, 0xFF	; 255
 3d0:	60 93 1e 01 	sts	0x011E, r22
 3d4:	09 c0       	rjmp	.+18     	; 0x3e8 <_Z14CalculateTime1v+0x5e>
 3d6:	8d ec       	ldi	r24, 0xCD	; 205
 3d8:	68 9f       	mul	r22, r24
 3da:	61 2d       	mov	r22, r1
 3dc:	11 24       	eor	r1, r1
 3de:	66 95       	lsr	r22
 3e0:	66 95       	lsr	r22
 3e2:	66 95       	lsr	r22
 3e4:	60 93 1e 01 	sts	0x011E, r22
 3e8:	80 91 1e 01 	lds	r24, 0x011E
 3ec:	98 2f       	mov	r25, r24
 3ee:	99 0f       	add	r25, r25
 3f0:	99 0f       	add	r25, r25
 3f2:	99 0f       	add	r25, r25
 3f4:	80 91 09 01 	lds	r24, 0x0109
 3f8:	87 70       	andi	r24, 0x07	; 7
 3fa:	89 2b       	or	r24, r25
 3fc:	80 93 09 01 	sts	0x0109, r24
 400:	5d df       	rcall	.-326    	; 0x2bc <_Z16resetTimerValuesv>
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 19 01 	sts	0x0119, r24
 408:	08 95       	ret
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	80 93 1a 01 	sts	0x011A, r24
 410:	55 df       	rcall	.-342    	; 0x2bc <_Z16resetTimerValuesv>
 412:	80 91 19 01 	lds	r24, 0x0119
 416:	88 23       	and	r24, r24
 418:	31 f2       	breq	.-116    	; 0x3a6 <_Z14CalculateTime1v+0x1c>
 41a:	08 95       	ret
 41c:	88 df       	rcall	.-240    	; 0x32e <_Z17calculateDistancev>
 41e:	e5 d2       	rcall	.+1482   	; 0x9ea <__fixunssfsi>
 420:	60 93 1f 01 	sts	0x011F, r22
 424:	89 e2       	ldi	r24, 0x29	; 41
 426:	68 9f       	mul	r22, r24
 428:	81 2d       	mov	r24, r1
 42a:	11 24       	eor	r1, r1
 42c:	82 95       	swap	r24
 42e:	8f 70       	andi	r24, 0x0F	; 15
 430:	96 2f       	mov	r25, r22
 432:	24 e6       	ldi	r18, 0x64	; 100
 434:	82 9f       	mul	r24, r18
 436:	90 19       	sub	r25, r0
 438:	11 24       	eor	r1, r1
 43a:	8d ec       	ldi	r24, 0xCD	; 205
 43c:	98 9f       	mul	r25, r24
 43e:	81 2d       	mov	r24, r1
 440:	11 24       	eor	r1, r1
 442:	86 95       	lsr	r24
 444:	86 95       	lsr	r24
 446:	86 95       	lsr	r24
 448:	88 0f       	add	r24, r24
 44a:	28 2f       	mov	r18, r24
 44c:	22 0f       	add	r18, r18
 44e:	22 0f       	add	r18, r18
 450:	82 0f       	add	r24, r18
 452:	98 1b       	sub	r25, r24
 454:	89 2f       	mov	r24, r25
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	05 97       	sbiw	r24, 0x05	; 5
 45a:	0c f0       	brlt	.+2      	; 0x45e <_Z14CalculateTime1v+0xd4>
 45c:	b1 cf       	rjmp	.-158    	; 0x3c0 <_Z14CalculateTime1v+0x36>
 45e:	bb cf       	rjmp	.-138    	; 0x3d6 <_Z14CalculateTime1v+0x4c>
 460:	08 95       	ret

00000462 <_Z14CalculateTime2v>:
 462:	80 91 19 01 	lds	r24, 0x0119
 466:	81 11       	cpse	r24, r1
 468:	65 c0       	rjmp	.+202    	; 0x534 <_Z14CalculateTime2v+0xd2>
 46a:	80 91 1b 01 	lds	r24, 0x011B
 46e:	88 23       	and	r24, r24
 470:	09 f4       	brne	.+2      	; 0x474 <_Z14CalculateTime2v+0x12>
 472:	5c c0       	rjmp	.+184    	; 0x52c <_Z14CalculateTime2v+0xca>
 474:	80 91 1a 01 	lds	r24, 0x011A
 478:	81 11       	cpse	r24, r1
 47a:	58 c0       	rjmp	.+176    	; 0x52c <_Z14CalculateTime2v+0xca>
 47c:	1a 99       	sbic	0x03, 2	; 3
 47e:	30 c0       	rjmp	.+96     	; 0x4e0 <_Z14CalculateTime2v+0x7e>
 480:	55 c0       	rjmp	.+170    	; 0x52c <_Z14CalculateTime2v+0xca>
 482:	80 91 1a 01 	lds	r24, 0x011A
 486:	88 23       	and	r24, r24
 488:	09 f4       	brne	.+2      	; 0x48c <_Z14CalculateTime2v+0x2a>
 48a:	54 c0       	rjmp	.+168    	; 0x534 <_Z14CalculateTime2v+0xd2>
 48c:	1a 9b       	sbis	0x03, 2	; 3
 48e:	2c c0       	rjmp	.+88     	; 0x4e8 <_Z14CalculateTime2v+0x86>
 490:	08 95       	ret
 492:	8d ec       	ldi	r24, 0xCD	; 205
 494:	68 9f       	mul	r22, r24
 496:	61 2d       	mov	r22, r1
 498:	11 24       	eor	r1, r1
 49a:	66 95       	lsr	r22
 49c:	66 95       	lsr	r22
 49e:	66 95       	lsr	r22
 4a0:	6f 5f       	subi	r22, 0xFF	; 255
 4a2:	60 93 1d 01 	sts	0x011D, r22
 4a6:	09 c0       	rjmp	.+18     	; 0x4ba <_Z14CalculateTime2v+0x58>
 4a8:	8d ec       	ldi	r24, 0xCD	; 205
 4aa:	68 9f       	mul	r22, r24
 4ac:	61 2d       	mov	r22, r1
 4ae:	11 24       	eor	r1, r1
 4b0:	66 95       	lsr	r22
 4b2:	66 95       	lsr	r22
 4b4:	66 95       	lsr	r22
 4b6:	60 93 1d 01 	sts	0x011D, r22
 4ba:	80 91 1d 01 	lds	r24, 0x011D
 4be:	98 2f       	mov	r25, r24
 4c0:	99 0f       	add	r25, r25
 4c2:	99 0f       	add	r25, r25
 4c4:	99 0f       	add	r25, r25
 4c6:	80 91 08 01 	lds	r24, 0x0108
 4ca:	87 70       	andi	r24, 0x07	; 7
 4cc:	89 2b       	or	r24, r25
 4ce:	80 93 08 01 	sts	0x0108, r24
 4d2:	f4 de       	rcall	.-536    	; 0x2bc <_Z16resetTimerValuesv>
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	80 93 19 01 	sts	0x0119, r24
 4da:	80 93 00 01 	sts	0x0100, r24
 4de:	08 95       	ret
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	80 93 1a 01 	sts	0x011A, r24
 4e6:	22 c0       	rjmp	.+68     	; 0x52c <_Z14CalculateTime2v+0xca>
 4e8:	22 df       	rcall	.-444    	; 0x32e <_Z17calculateDistancev>
 4ea:	7f d2       	rcall	.+1278   	; 0x9ea <__fixunssfsi>
 4ec:	60 93 1f 01 	sts	0x011F, r22
 4f0:	89 e2       	ldi	r24, 0x29	; 41
 4f2:	68 9f       	mul	r22, r24
 4f4:	81 2d       	mov	r24, r1
 4f6:	11 24       	eor	r1, r1
 4f8:	82 95       	swap	r24
 4fa:	8f 70       	andi	r24, 0x0F	; 15
 4fc:	96 2f       	mov	r25, r22
 4fe:	24 e6       	ldi	r18, 0x64	; 100
 500:	82 9f       	mul	r24, r18
 502:	90 19       	sub	r25, r0
 504:	11 24       	eor	r1, r1
 506:	8d ec       	ldi	r24, 0xCD	; 205
 508:	98 9f       	mul	r25, r24
 50a:	81 2d       	mov	r24, r1
 50c:	11 24       	eor	r1, r1
 50e:	86 95       	lsr	r24
 510:	86 95       	lsr	r24
 512:	86 95       	lsr	r24
 514:	88 0f       	add	r24, r24
 516:	28 2f       	mov	r18, r24
 518:	22 0f       	add	r18, r18
 51a:	22 0f       	add	r18, r18
 51c:	82 0f       	add	r24, r18
 51e:	98 1b       	sub	r25, r24
 520:	89 2f       	mov	r24, r25
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	05 97       	sbiw	r24, 0x05	; 5
 526:	0c f0       	brlt	.+2      	; 0x52a <_Z14CalculateTime2v+0xc8>
 528:	b4 cf       	rjmp	.-152    	; 0x492 <_Z14CalculateTime2v+0x30>
 52a:	be cf       	rjmp	.-132    	; 0x4a8 <_Z14CalculateTime2v+0x46>
 52c:	80 91 1b 01 	lds	r24, 0x011B
 530:	81 11       	cpse	r24, r1
 532:	a7 cf       	rjmp	.-178    	; 0x482 <_Z14CalculateTime2v+0x20>
 534:	08 95       	ret

00000536 <_Z16compareSignaturePhS_>:
 536:	dc 01       	movw	r26, r24
 538:	fb 01       	movw	r30, r22
 53a:	9c 91       	ld	r25, X
 53c:	80 81       	ld	r24, Z
 53e:	98 13       	cpse	r25, r24
 540:	0e c0       	rjmp	.+28     	; 0x55e <_Z16compareSignaturePhS_+0x28>
 542:	11 96       	adiw	r26, 0x01	; 1
 544:	9c 91       	ld	r25, X
 546:	11 97       	sbiw	r26, 0x01	; 1
 548:	81 81       	ldd	r24, Z+1	; 0x01
 54a:	98 13       	cpse	r25, r24
 54c:	0a c0       	rjmp	.+20     	; 0x562 <_Z16compareSignaturePhS_+0x2c>
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	12 96       	adiw	r26, 0x02	; 2
 552:	2c 91       	ld	r18, X
 554:	92 81       	ldd	r25, Z+2	; 0x02
 556:	29 17       	cp	r18, r25
 558:	29 f0       	breq	.+10     	; 0x564 <_Z16compareSignaturePhS_+0x2e>
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	08 95       	ret
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	08 95       	ret
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret

00000566 <_Z19laserSensorFunctionv>:
bool waitLaserActivation = false;
bool laserIniated = false;

void laserSensorFunction(){
	//Reactivate laser 2 sec after hit
	if(TCNT3 >= 18000){
 566:	80 91 94 00 	lds	r24, 0x0094
 56a:	90 91 95 00 	lds	r25, 0x0095
 56e:	80 35       	cpi	r24, 0x50	; 80
 570:	96 44       	sbci	r25, 0x46	; 70
 572:	48 f0       	brcs	.+18     	; 0x586 <_Z19laserSensorFunctionv+0x20>
		secsSinceLaserHit++;
 574:	80 91 18 01 	lds	r24, 0x0118
 578:	8f 5f       	subi	r24, 0xFF	; 255
 57a:	80 93 18 01 	sts	0x0118, r24
		TCNT3 = 0;
 57e:	10 92 95 00 	sts	0x0095, r1
 582:	10 92 94 00 	sts	0x0094, r1
	}
	if(secsSinceLaserHit >= 5){
 586:	80 91 18 01 	lds	r24, 0x0118
 58a:	85 30       	cpi	r24, 0x05	; 5
 58c:	08 f1       	brcs	.+66     	; 0x5d0 <_Z19laserSensorFunctionv+0x6a>
		//inactivate
		PORTB |= (1 << LASER_AKTIVERA_PORT);
 58e:	2c 9a       	sbi	0x05, 4	; 5
		//reset count
		if(!waitLaserActivation){
 590:	80 91 17 01 	lds	r24, 0x0117
 594:	81 11       	cpse	r24, r1
 596:	07 c0       	rjmp	.+14     	; 0x5a6 <_Z19laserSensorFunctionv+0x40>
			TCNT3 = 0;
 598:	10 92 95 00 	sts	0x0095, r1
 59c:	10 92 94 00 	sts	0x0094, r1
			waitLaserActivation = true;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	80 93 17 01 	sts	0x0117, r24
		}
		//activate, might have to wait if this is too fast here we wait 10 more clock ticks
		if(TCNT3 >= TICKS_TO_WAIT_FOR_ACTIVATE_LASER){
 5a6:	80 91 94 00 	lds	r24, 0x0094
 5aa:	90 91 95 00 	lds	r25, 0x0095
 5ae:	88 3e       	cpi	r24, 0xE8	; 232
 5b0:	93 40       	sbci	r25, 0x03	; 3
 5b2:	70 f0       	brcs	.+28     	; 0x5d0 <_Z19laserSensorFunctionv+0x6a>
			PORTB &= ~(1 << LASER_AKTIVERA_PORT);
 5b4:	2c 98       	cbi	0x05, 4	; 5
			TCCR3B &= 0b11111000; //Reset pre-scaler to stop counting
 5b6:	e1 e9       	ldi	r30, 0x91	; 145
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	88 7f       	andi	r24, 0xF8	; 248
 5be:	80 83       	st	Z, r24
			TCNT3 = 0; //Reset counter
 5c0:	10 92 95 00 	sts	0x0095, r1
 5c4:	10 92 94 00 	sts	0x0094, r1
			secsSinceLaserHit = 0;
 5c8:	10 92 18 01 	sts	0x0118, r1
			waitLaserActivation = false;
 5cc:	10 92 17 01 	sts	0x0117, r1
		}
	}
	
	//mask LASER bit
	laser = (PINB>>5);
 5d0:	83 b1       	in	r24, 0x03	; 3
 5d2:	85 fb       	bst	r24, 5
 5d4:	88 27       	eor	r24, r24
 5d6:	80 f9       	bld	r24, 0
	laser &= 0b00000001;
 5d8:	80 93 29 01 	sts	0x0129, r24
	if(laser == 0b00000001){
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	59 f4       	brne	.+22     	; 0x5f6 <_Z19laserSensorFunctionv+0x90>
		message1 &= 0b10111111; //Reset laser bit
 5e0:	80 91 0a 01 	lds	r24, 0x010A
		message1 |= (laser<<LASER_INDEX); //Mask in new laser bit
 5e4:	80 64       	ori	r24, 0x40	; 64
 5e6:	80 93 0a 01 	sts	0x010A, r24
		//Start timer with pre-scaler 1024
		TCCR3B |= (1<<CS32) | (1<<CS30);
 5ea:	e1 e9       	ldi	r30, 0x91	; 145
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	85 60       	ori	r24, 0x05	; 5
 5f2:	80 83       	st	Z, r24
 5f4:	08 95       	ret
	}
	else{
		//no hit
		message1 &= 0b10111111;
 5f6:	80 91 0a 01 	lds	r24, 0x010A
 5fa:	8f 7b       	andi	r24, 0xBF	; 191
 5fc:	80 93 0a 01 	sts	0x010A, r24
 600:	08 95       	ret

00000602 <_Z18ultrasonicFunctionv>:
	}
}

void ultrasonicFunction(){
	//in here every 100 us
	if (TCNT2 > 184) {
 602:	80 91 b2 00 	lds	r24, 0x00B2
 606:	89 3b       	cpi	r24, 0xB9	; 185
 608:	78 f0       	brcs	.+30     	; 0x628 <_Z18ultrasonicFunctionv+0x26>
		PORTC ^= (1<<PINC1);
 60a:	98 b1       	in	r25, 0x08	; 8
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	89 27       	eor	r24, r25
 610:	88 b9       	out	0x08, r24	; 8
		timer++;
 612:	80 91 20 01 	lds	r24, 0x0120
 616:	90 91 21 01 	lds	r25, 0x0121
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	90 93 21 01 	sts	0x0121, r25
 620:	80 93 20 01 	sts	0x0120, r24
		TCNT2 = 0;
 624:	10 92 b2 00 	sts	0x00B2, r1
	}
	
	if (useSensor1) {
 628:	80 91 00 01 	lds	r24, 0x0100
 62c:	88 23       	and	r24, r24
 62e:	39 f0       	breq	.+14     	; 0x63e <_Z18ultrasonicFunctionv+0x3c>
		
		if (!triggerSend) {
 630:	80 91 1b 01 	lds	r24, 0x011B
 634:	81 11       	cpse	r24, r1
 636:	01 c0       	rjmp	.+2      	; 0x63a <_Z18ultrasonicFunctionv+0x38>
			StartPulse1();
 638:	48 de       	rcall	.-880    	; 0x2ca <_Z11StartPulse1v>
		}
		CalculateTime1();
 63a:	a7 de       	rcall	.-690    	; 0x38a <_Z14CalculateTime1v>
 63c:	06 c0       	rjmp	.+12     	; 0x64a <_Z18ultrasonicFunctionv+0x48>
	}
	else {
		if (!triggerSend) {
 63e:	80 91 1b 01 	lds	r24, 0x011B
 642:	81 11       	cpse	r24, r1
 644:	01 c0       	rjmp	.+2      	; 0x648 <_Z18ultrasonicFunctionv+0x46>
			StartPulse2();
 646:	5a de       	rcall	.-844    	; 0x2fc <_Z11StartPulse2v>
		}
		CalculateTime2();
 648:	0c df       	rcall	.-488    	; 0x462 <_Z14CalculateTime2v>
	}
	
	//wait atleast 10msec
	if (timeTaken && timer == 1000) {
 64a:	80 91 19 01 	lds	r24, 0x0119
 64e:	88 23       	and	r24, r24
 650:	79 f0       	breq	.+30     	; 0x670 <_Z18ultrasonicFunctionv+0x6e>
 652:	80 91 20 01 	lds	r24, 0x0120
 656:	90 91 21 01 	lds	r25, 0x0121
 65a:	88 3e       	cpi	r24, 0xE8	; 232
 65c:	93 40       	sbci	r25, 0x03	; 3
 65e:	41 f4       	brne	.+16     	; 0x670 <_Z18ultrasonicFunctionv+0x6e>
		triggerSend = false;
 660:	10 92 1b 01 	sts	0x011B, r1
		triggerStarted = false;
 664:	10 92 1c 01 	sts	0x011C, r1
		timerStarted = false;
 668:	10 92 1a 01 	sts	0x011A, r1
		timeTaken = false;
 66c:	10 92 19 01 	sts	0x0119, r1
 670:	08 95       	ret

00000672 <_Z23waitForActivationSensorv>:
	}
}

//Wait for press on activation button
void waitForActivationSensor(){
	while((PIND>>PIND7) == 0){
 672:	1c c0       	rjmp	.+56     	; 0x6ac <_Z23waitForActivationSensorv+0x3a>
		//Do nothing, wait for activation
		
		if((PINB>>PINB7) == 0){
 674:	83 b1       	in	r24, 0x03	; 3
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	88 0f       	add	r24, r24
 67a:	89 2f       	mov	r24, r25
 67c:	88 1f       	adc	r24, r24
 67e:	99 0b       	sbc	r25, r25
 680:	89 2b       	or	r24, r25
 682:	a1 f4       	brne	.+40     	; 0x6ac <_Z23waitForActivationSensorv+0x3a>
			cli();
 684:	f8 94       	cli
			tape1Threshold = tape1CurrentValue - TAPE1_ERROR_MARGIN; 
 686:	80 91 2c 01 	lds	r24, 0x012C
 68a:	90 91 2d 01 	lds	r25, 0x012D
 68e:	49 97       	sbiw	r24, 0x19	; 25
 690:	90 93 0e 01 	sts	0x010E, r25
 694:	80 93 0d 01 	sts	0x010D, r24
			tape2Threshold = tape2CurrentValue - TAPE2_ERROR_MARGIN; 
 698:	80 91 2a 01 	lds	r24, 0x012A
 69c:	90 91 2b 01 	lds	r25, 0x012B
 6a0:	49 97       	sbiw	r24, 0x19	; 25
 6a2:	90 93 0c 01 	sts	0x010C, r25
 6a6:	80 93 0b 01 	sts	0x010B, r24
			sei();
 6aa:	78 94       	sei
	}
}

//Wait for press on activation button
void waitForActivationSensor(){
	while((PIND>>PIND7) == 0){
 6ac:	89 b1       	in	r24, 0x09	; 9
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	88 0f       	add	r24, r24
 6b2:	89 2f       	mov	r24, r25
 6b4:	88 1f       	adc	r24, r24
 6b6:	99 0b       	sbc	r25, r25
 6b8:	89 2b       	or	r24, r25
 6ba:	e1 f2       	breq	.-72     	; 0x674 <_Z23waitForActivationSensorv+0x2>
			sei();
		}
		
	}
	return;
}
 6bc:	08 95       	ret

000006be <_Z12IRSensortestv>:
bool messySignal = false; //use for debug
bool enemy1 = false;

void IRSensortest(){
	// If 100 us have passed
	if (TCNT1 > 1842){ //Timer counter
 6be:	80 91 84 00 	lds	r24, 0x0084
 6c2:	90 91 85 00 	lds	r25, 0x0085
 6c6:	83 33       	cpi	r24, 0x33	; 51
 6c8:	97 40       	sbci	r25, 0x07	; 7
 6ca:	88 f0       	brcs	.+34     	; 0x6ee <_Z12IRSensortestv+0x30>
		IRcount++;
 6cc:	80 91 15 01 	lds	r24, 0x0115
 6d0:	90 91 16 01 	lds	r25, 0x0116
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	90 93 16 01 	sts	0x0116, r25
 6da:	80 93 15 01 	sts	0x0115, r24
		TCNT1 = 0;
 6de:	10 92 85 00 	sts	0x0085, r1
 6e2:	10 92 84 00 	sts	0x0084, r1
		
		//debug signal
		PORTC ^= (1<<PINC0);
 6e6:	98 b1       	in	r25, 0x08	; 8
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	89 27       	eor	r24, r25
 6ec:	88 b9       	out	0x08, r24	; 8
	}
	
	//start with looking for header
	if(!headerPhase && !signaturePhase){
 6ee:	80 91 14 01 	lds	r24, 0x0114
 6f2:	81 11       	cpse	r24, r1
 6f4:	10 c0       	rjmp	.+32     	; 0x716 <_Z12IRSensortestv+0x58>
 6f6:	80 91 13 01 	lds	r24, 0x0113
 6fa:	81 11       	cpse	r24, r1
 6fc:	27 c0       	rjmp	.+78     	; 0x74c <_Z12IRSensortestv+0x8e>
		if(bit_is_clear(PINB, 6)){ // check if header can start
 6fe:	1e 99       	sbic	0x03, 6	; 3
 700:	63 c0       	rjmp	.+198    	; 0x7c8 <_Z12IRSensortestv+0x10a>
			headerPhase = true;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	80 93 14 01 	sts	0x0114, r24
			IRcount = 0;
 708:	10 92 16 01 	sts	0x0116, r1
 70c:	10 92 15 01 	sts	0x0115, r1
			messySignal = false;
 710:	10 92 11 01 	sts	0x0111, r1
 714:	17 c0       	rjmp	.+46     	; 0x744 <_Z12IRSensortestv+0x86>
		}
	}
	else if(headerPhase && !signaturePhase){
 716:	80 91 13 01 	lds	r24, 0x0113
 71a:	81 11       	cpse	r24, r1
 71c:	17 c0       	rjmp	.+46     	; 0x74c <_Z12IRSensortestv+0x8e>
		//if header is too short or long redo
		if(bit_is_set(PINB, 6) && ((IRcount < IRheader) || (IRcount > IRheader + 6))){
 71e:	1e 9b       	sbis	0x03, 6	; 3
 720:	d0 c0       	rjmp	.+416    	; 0x8c2 <_Z12IRSensortestv+0x204>
 722:	80 91 15 01 	lds	r24, 0x0115
 726:	90 91 16 01 	lds	r25, 0x0116
 72a:	44 97       	sbiw	r24, 0x14	; 20
 72c:	07 97       	sbiw	r24, 0x07	; 7
 72e:	08 f0       	brcs	.+2      	; 0x732 <_Z12IRSensortestv+0x74>
 730:	c2 c0       	rjmp	.+388    	; 0x8b6 <_Z12IRSensortestv+0x1f8>
 732:	c7 c0       	rjmp	.+398    	; 0x8c2 <_Z12IRSensortestv+0x204>
			messySignal = true;
			headerPhase = false;
		}
		else if(bit_is_set(PINB, 6) && IRcount >= IRheader){
 734:	80 91 15 01 	lds	r24, 0x0115
 738:	90 91 16 01 	lds	r25, 0x0116
 73c:	44 97       	sbiw	r24, 0x14	; 20
 73e:	0c f0       	brlt	.+2      	; 0x742 <_Z12IRSensortestv+0x84>
 740:	c3 c0       	rjmp	.+390    	; 0x8c8 <_Z12IRSensortestv+0x20a>
 742:	42 c0       	rjmp	.+132    	; 0x7c8 <_Z12IRSensortestv+0x10a>
			IRcount = 0;
			pause=true;
		}
	}
	
	if(signaturePhase){
 744:	80 91 13 01 	lds	r24, 0x0113
 748:	88 23       	and	r24, r24
 74a:	f1 f1       	breq	.+124    	; 0x7c8 <_Z12IRSensortestv+0x10a>
		//pauses should be detected as +~400us signals
		if(pause){
 74c:	80 91 12 01 	lds	r24, 0x0112
 750:	88 23       	and	r24, r24
 752:	91 f0       	breq	.+36     	; 0x778 <_Z12IRSensortestv+0xba>
			//if the pause is too short or long we have a mess
			if(bit_is_clear(PINB, 6) && ((IRcount < 5) || (IRcount > 7))){
 754:	1e 99       	sbic	0x03, 6	; 3
 756:	ce c0       	rjmp	.+412    	; 0x8f4 <_Z12IRSensortestv+0x236>
 758:	80 91 15 01 	lds	r24, 0x0115
 75c:	90 91 16 01 	lds	r25, 0x0116
 760:	05 97       	sbiw	r24, 0x05	; 5
 762:	03 97       	sbiw	r24, 0x03	; 3
 764:	08 f0       	brcs	.+2      	; 0x768 <_Z12IRSensortestv+0xaa>
 766:	be c0       	rjmp	.+380    	; 0x8e4 <_Z12IRSensortestv+0x226>
 768:	c5 c0       	rjmp	.+394    	; 0x8f4 <_Z12IRSensortestv+0x236>
				signaturePhase = false;
				headerPhase = false;
			}
			//if pause is between 300 to 700 we accept it
			else if(bit_is_clear(PINB, 6)){
				pause=false;
 76a:	10 92 12 01 	sts	0x0112, r1
				IRcount = 0;
 76e:	10 92 16 01 	sts	0x0116, r1
 772:	10 92 15 01 	sts	0x0115, r1
 776:	e4 c0       	rjmp	.+456    	; 0x940 <_Z12IRSensortestv+0x282>
			}
		}
		else{
			//if signal was too short or too long we have mixed signal or header
			if(bit_is_set(PINB, 6) && ((IRcount < 4) || (IRcount > 13))){
 778:	1e 9b       	sbis	0x03, 6	; 3
 77a:	c7 c0       	rjmp	.+398    	; 0x90a <_Z12IRSensortestv+0x24c>
 77c:	80 91 15 01 	lds	r24, 0x0115
 780:	90 91 16 01 	lds	r25, 0x0116
 784:	04 97       	sbiw	r24, 0x04	; 4
 786:	0a 97       	sbiw	r24, 0x0a	; 10
 788:	08 f0       	brcs	.+2      	; 0x78c <_Z12IRSensortestv+0xce>
 78a:	b7 c0       	rjmp	.+366    	; 0x8fa <_Z12IRSensortestv+0x23c>
 78c:	be c0       	rjmp	.+380    	; 0x90a <_Z12IRSensortestv+0x24c>
				messySignal = true;
				signaturePhase = false;
				headerPhase = false;
			}
			//accept ~1100 to 2000us as a 1
			else if(bit_is_set(PINB, 6) && IRcount > 9){
 78e:	80 91 15 01 	lds	r24, 0x0115
 792:	90 91 16 01 	lds	r25, 0x0116
 796:	0a 97       	sbiw	r24, 0x0a	; 10
 798:	0c f0       	brlt	.+2      	; 0x79c <_Z12IRSensortestv+0xde>
 79a:	ba c0       	rjmp	.+372    	; 0x910 <_Z12IRSensortestv+0x252>
 79c:	ce c0       	rjmp	.+412    	; 0x93a <_Z12IRSensortestv+0x27c>
				pause = true;
				IRcount = 0;
			}
			//accept 3-10 as a 0 ~300 us to 1000 us
			else if(bit_is_set(PINB, 6)){
				signature[index] = 0;
 79e:	80 91 22 01 	lds	r24, 0x0122
 7a2:	90 91 23 01 	lds	r25, 0x0123
 7a6:	fc 01       	movw	r30, r24
 7a8:	eb 5d       	subi	r30, 0xDB	; 219
 7aa:	fe 4f       	sbci	r31, 0xFE	; 254
 7ac:	10 82       	st	Z, r1
				index++;
 7ae:	01 96       	adiw	r24, 0x01	; 1
 7b0:	90 93 23 01 	sts	0x0123, r25
 7b4:	80 93 22 01 	sts	0x0122, r24
				pause = true;
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	80 93 12 01 	sts	0x0112, r24
				IRcount = 0;
 7be:	10 92 16 01 	sts	0x0116, r1
 7c2:	10 92 15 01 	sts	0x0115, r1
 7c6:	bc c0       	rjmp	.+376    	; 0x940 <_Z12IRSensortestv+0x282>
			}
		}
	}
	
	//if full signature has been picked up
	if(index == 3){
 7c8:	80 91 22 01 	lds	r24, 0x0122
 7cc:	90 91 23 01 	lds	r25, 0x0123
 7d0:	03 97       	sbiw	r24, 0x03	; 3
 7d2:	09 f0       	breq	.+2      	; 0x7d6 <_Z12IRSensortestv+0x118>
 7d4:	44 c0       	rjmp	.+136    	; 0x85e <_Z12IRSensortestv+0x1a0>
		if (compareSignature(oursignature, signature)){
 7d6:	65 e2       	ldi	r22, 0x25	; 37
 7d8:	71 e0       	ldi	r23, 0x01	; 1
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	91 e0       	ldi	r25, 0x01	; 1
 7de:	ab de       	rcall	.-682    	; 0x536 <_Z16compareSignaturePhS_>
 7e0:	88 23       	and	r24, r24
 7e2:	19 f0       	breq	.+6      	; 0x7ea <_Z12IRSensortestv+0x12c>
			enemy1 = false;
 7e4:	10 92 10 01 	sts	0x0110, r1
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <_Z12IRSensortestv+0x132>
		}
		else {
			enemy1 = true;
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	80 93 10 01 	sts	0x0110, r24
		}
		headerPhase = false;
 7f0:	10 92 14 01 	sts	0x0114, r1
		signaturePhase = false;
 7f4:	10 92 13 01 	sts	0x0113, r1
		index = 0;
 7f8:	10 92 23 01 	sts	0x0123, r1
 7fc:	10 92 22 01 	sts	0x0122, r1
		IRcount = 0;
 800:	10 92 16 01 	sts	0x0116, r1
 804:	10 92 15 01 	sts	0x0115, r1
		messySignal = false;
 808:	10 92 11 01 	sts	0x0111, r1
		
		//Set UART message
		signatureS = (signature[0]<<2) | (signature[1]<<1) | signature[2];
 80c:	e5 e2       	ldi	r30, 0x25	; 37
 80e:	f1 e0       	ldi	r31, 0x01	; 1
 810:	80 81       	ld	r24, Z
 812:	98 2f       	mov	r25, r24
 814:	99 0f       	add	r25, r25
 816:	99 0f       	add	r25, r25
 818:	81 81       	ldd	r24, Z+1	; 0x01
 81a:	88 0f       	add	r24, r24
 81c:	89 2b       	or	r24, r25
 81e:	92 81       	ldd	r25, Z+2	; 0x02
 820:	89 2b       	or	r24, r25
 822:	80 93 24 01 	sts	0x0124, r24
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
		IRcount = 0;
		messySignal = false;
		
		//Set UART message
		signatureS = (signature[0]<<2) | (signature[1]<<1) | signature[2];
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
 834:	20 91 0a 01 	lds	r18, 0x010A
 838:	27 7c       	andi	r18, 0xC7	; 199
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 83a:	28 2b       	or	r18, r24
		(enemy1 ? message1 |= (1<<IRSENSOR_INDEX) : message1 &= ~(1<<IRSENSOR_INDEX));
 83c:	30 91 10 01 	lds	r19, 0x0110
 840:	33 23       	and	r19, r19
 842:	21 f0       	breq	.+8      	; 0x84c <_Z12IRSensortestv+0x18e>
 844:	20 68       	ori	r18, 0x80	; 128
 846:	20 93 0a 01 	sts	0x010A, r18
 84a:	03 c0       	rjmp	.+6      	; 0x852 <_Z12IRSensortestv+0x194>
 84c:	2f 77       	andi	r18, 0x7F	; 127
 84e:	20 93 0a 01 	sts	0x010A, r18
		//send signature in message3 for debug(old ultrasonic sensor 2)
		message3 &= 0b00000111;
 852:	90 91 08 01 	lds	r25, 0x0108
 856:	97 70       	andi	r25, 0x07	; 7
		message3 |= (signatureS << 3);
 858:	89 2b       	or	r24, r25
 85a:	80 93 08 01 	sts	0x0108, r24
	}
	
	//update with our signature (default) if no signature spotted
	if (IRcount == IRheader * 10){
 85e:	80 91 15 01 	lds	r24, 0x0115
 862:	90 91 16 01 	lds	r25, 0x0116
 866:	88 3c       	cpi	r24, 0xC8	; 200
 868:	91 05       	cpc	r25, r1
 86a:	09 f0       	breq	.+2      	; 0x86e <_Z12IRSensortestv+0x1b0>
 86c:	70 c0       	rjmp	.+224    	; 0x94e <_Z12IRSensortestv+0x290>
		enemy = false;
 86e:	10 92 28 01 	sts	0x0128, r1
		//Set UART message
		signatureS = (oursignature[0]<<2) | (oursignature[1]<<1) | oursignature[2];
 872:	e1 e0       	ldi	r30, 0x01	; 1
 874:	f1 e0       	ldi	r31, 0x01	; 1
 876:	80 81       	ld	r24, Z
 878:	98 2f       	mov	r25, r24
 87a:	99 0f       	add	r25, r25
 87c:	99 0f       	add	r25, r25
 87e:	81 81       	ldd	r24, Z+1	; 0x01
 880:	88 0f       	add	r24, r24
 882:	89 2b       	or	r24, r25
 884:	92 81       	ldd	r25, Z+2	; 0x02
 886:	89 2b       	or	r24, r25
 888:	80 93 24 01 	sts	0x0124, r24
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	88 0f       	add	r24, r24
 890:	99 1f       	adc	r25, r25
 892:	88 0f       	add	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	88 0f       	add	r24, r24
 898:	99 1f       	adc	r25, r25
	//update with our signature (default) if no signature spotted
	if (IRcount == IRheader * 10){
		enemy = false;
		//Set UART message
		signatureS = (oursignature[0]<<2) | (oursignature[1]<<1) | oursignature[2];
		message1 &= ~(0b111<<IRSIGNATURE_INDEX); //Reset signature in message
 89a:	90 91 0a 01 	lds	r25, 0x010A
 89e:	97 7c       	andi	r25, 0xC7	; 199
		message1 |= (signatureS<<IRSIGNATURE_INDEX); //Set new signature
 8a0:	98 2b       	or	r25, r24
		(enemy ? message1 |= (1<<IRSENSOR_INDEX) : message1 &= ~(1<<IRSENSOR_INDEX));
 8a2:	9f 77       	andi	r25, 0x7F	; 127
 8a4:	90 93 0a 01 	sts	0x010A, r25
		//send signature in message3 for debug(old ultrasonic sensor 2)
		message3 &= 0b00000111;
 8a8:	90 91 08 01 	lds	r25, 0x0108
 8ac:	97 70       	andi	r25, 0x07	; 7
		message3 |= (signatureS << 3);
 8ae:	89 2b       	or	r24, r25
 8b0:	80 93 08 01 	sts	0x0108, r24
 8b4:	08 95       	ret
		}
	}
	else if(headerPhase && !signaturePhase){
		//if header is too short or long redo
		if(bit_is_set(PINB, 6) && ((IRcount < IRheader) || (IRcount > IRheader + 6))){
			messySignal = true;
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	80 93 11 01 	sts	0x0111, r24
			headerPhase = false;
 8bc:	10 92 14 01 	sts	0x0114, r1
 8c0:	41 cf       	rjmp	.-382    	; 0x744 <_Z12IRSensortestv+0x86>
		}
		else if(bit_is_set(PINB, 6) && IRcount >= IRheader){
 8c2:	1e 99       	sbic	0x03, 6	; 3
 8c4:	37 cf       	rjmp	.-402    	; 0x734 <_Z12IRSensortestv+0x76>
 8c6:	80 cf       	rjmp	.-256    	; 0x7c8 <_Z12IRSensortestv+0x10a>
			signaturePhase = true;
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	80 93 13 01 	sts	0x0113, r24
			index = 0;
 8ce:	10 92 23 01 	sts	0x0123, r1
 8d2:	10 92 22 01 	sts	0x0122, r1
			IRcount = 0;
 8d6:	10 92 16 01 	sts	0x0116, r1
 8da:	10 92 15 01 	sts	0x0115, r1
			pause=true;
 8de:	80 93 12 01 	sts	0x0112, r24
 8e2:	38 cf       	rjmp	.-400    	; 0x754 <_Z12IRSensortestv+0x96>
	if(signaturePhase){
		//pauses should be detected as +~400us signals
		if(pause){
			//if the pause is too short or long we have a mess
			if(bit_is_clear(PINB, 6) && ((IRcount < 5) || (IRcount > 7))){
				messySignal = true;
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	80 93 11 01 	sts	0x0111, r24
				signaturePhase = false;
 8ea:	10 92 13 01 	sts	0x0113, r1
				headerPhase = false;
 8ee:	10 92 14 01 	sts	0x0114, r1
 8f2:	6a cf       	rjmp	.-300    	; 0x7c8 <_Z12IRSensortestv+0x10a>
			}
			//if pause is between 300 to 700 we accept it
			else if(bit_is_clear(PINB, 6)){
 8f4:	1e 9b       	sbis	0x03, 6	; 3
 8f6:	39 cf       	rjmp	.-398    	; 0x76a <_Z12IRSensortestv+0xac>
 8f8:	67 cf       	rjmp	.-306    	; 0x7c8 <_Z12IRSensortestv+0x10a>
			}
		}
		else{
			//if signal was too short or too long we have mixed signal or header
			if(bit_is_set(PINB, 6) && ((IRcount < 4) || (IRcount > 13))){
				messySignal = true;
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	80 93 11 01 	sts	0x0111, r24
				signaturePhase = false;
 900:	10 92 13 01 	sts	0x0113, r1
				headerPhase = false;
 904:	10 92 14 01 	sts	0x0114, r1
 908:	5f cf       	rjmp	.-322    	; 0x7c8 <_Z12IRSensortestv+0x10a>
			}
			//accept ~1100 to 2000us as a 1
			else if(bit_is_set(PINB, 6) && IRcount > 9){
 90a:	1e 99       	sbic	0x03, 6	; 3
 90c:	40 cf       	rjmp	.-384    	; 0x78e <_Z12IRSensortestv+0xd0>
 90e:	15 c0       	rjmp	.+42     	; 0x93a <_Z12IRSensortestv+0x27c>
				signature[index] = 1;
 910:	80 91 22 01 	lds	r24, 0x0122
 914:	90 91 23 01 	lds	r25, 0x0123
 918:	fc 01       	movw	r30, r24
 91a:	eb 5d       	subi	r30, 0xDB	; 219
 91c:	fe 4f       	sbci	r31, 0xFE	; 254
 91e:	21 e0       	ldi	r18, 0x01	; 1
 920:	20 83       	st	Z, r18
				index++;
 922:	01 96       	adiw	r24, 0x01	; 1
 924:	90 93 23 01 	sts	0x0123, r25
 928:	80 93 22 01 	sts	0x0122, r24
				pause = true;
 92c:	20 93 12 01 	sts	0x0112, r18
				IRcount = 0;
 930:	10 92 16 01 	sts	0x0116, r1
 934:	10 92 15 01 	sts	0x0115, r1
 938:	03 c0       	rjmp	.+6      	; 0x940 <_Z12IRSensortestv+0x282>
			}
			//accept 3-10 as a 0 ~300 us to 1000 us
			else if(bit_is_set(PINB, 6)){
 93a:	1e 99       	sbic	0x03, 6	; 3
 93c:	30 cf       	rjmp	.-416    	; 0x79e <_Z12IRSensortestv+0xe0>
 93e:	44 cf       	rjmp	.-376    	; 0x7c8 <_Z12IRSensortestv+0x10a>
			}
		}
	}
	
	//if full signature has been picked up
	if(index == 3){
 940:	80 91 22 01 	lds	r24, 0x0122
 944:	90 91 23 01 	lds	r25, 0x0123
 948:	03 97       	sbiw	r24, 0x03	; 3
 94a:	09 f4       	brne	.+2      	; 0x94e <_Z12IRSensortestv+0x290>
 94c:	44 cf       	rjmp	.-376    	; 0x7d6 <_Z12IRSensortestv+0x118>
 94e:	08 95       	ret

00000950 <main>:
	PIN3: Ultrasonic 2		(out)
	PIN4: Laser Aktivera	(out)
	PIN5: Laser				(in)
	*/
	
	DDRD &= ~(1<<PIND7); //Aktiveringsknapp (in)
 950:	57 98       	cbi	0x0a, 7	; 10
	DDRB = 0b00011110;
 952:	8e e1       	ldi	r24, 0x1E	; 30
 954:	84 b9       	out	0x04, r24	; 4
	
	//DDRA = 0b00000000;
	//DDRB |= (1<<PIND6);
	
	//debugging
	DDRC |= (1<< PINC0) | (1<<PINC1);
 956:	87 b1       	in	r24, 0x07	; 7
 958:	83 60       	ori	r24, 0x03	; 3
 95a:	87 b9       	out	0x07, r24	; 7
		
	//enable global interrupt
	sei();
 95c:	78 94       	sei
	
	//Ultrasonic
	TCCR2B |= 1 << CS20; // Start timer
 95e:	e1 eb       	ldi	r30, 0xB1	; 177
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 81       	ld	r24, Z
 964:	81 60       	ori	r24, 0x01	; 1
 966:	80 83       	st	Z, r24
	TCNT2 = 0;
 968:	10 92 b2 00 	sts	0x00B2, r1
	//###############
	//## ADC INITS ##
	//###############
		
	//turn on ADC
	ADCSRA |= (1 << ADEN);
 96c:	ea e7       	ldi	r30, 0x7A	; 122
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	80 81       	ld	r24, Z
 972:	80 68       	ori	r24, 0x80	; 128
 974:	80 83       	st	Z, r24
	//Set ADC clock to 1000 000 / 128 Hz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) ;
 976:	80 81       	ld	r24, Z
 978:	87 60       	ori	r24, 0x07	; 7
 97a:	80 83       	st	Z, r24
	//ADC interrupt enabled
	ADCSRA |= (1 << ADIE);
 97c:	80 81       	ld	r24, Z
 97e:	88 60       	ori	r24, 0x08	; 8
 980:	80 83       	st	Z, r24
	//mux PINA0, start with TAPE
	ADMUX |= (1<<PINA0);
 982:	ac e7       	ldi	r26, 0x7C	; 124
 984:	b0 e0       	ldi	r27, 0x00	; 0
 986:	8c 91       	ld	r24, X
 988:	81 60       	ori	r24, 0x01	; 1
 98a:	8c 93       	st	X, r24
	//################
	
	//initiate UART målsökning
	//set baud rate
	uint16_t UBRR_val = UBRR_SENSOR_MALSOKNING;
	UBRR0H = (unsigned char) (UBRR_val >> 8);
 98c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) UBRR_val;
 990:	87 e7       	ldi	r24, 0x77	; 119
 992:	80 93 c4 00 	sts	0x00C4, r24
	//enable transmit + set frame 8 bits
	UCSR0B = (1<<TXEN0);
 996:	a1 ec       	ldi	r26, 0xC1	; 193
 998:	b0 e0       	ldi	r27, 0x00	; 0
 99a:	88 e0       	ldi	r24, 0x08	; 8
 99c:	8c 93       	st	X, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
 99e:	86 e0       	ldi	r24, 0x06	; 6
 9a0:	80 93 c2 00 	sts	0x00C2, r24
	//enable transmit interrupt
	UCSR0B |= (1<<TXCIE0);
 9a4:	8c 91       	ld	r24, X
 9a6:	80 64       	ori	r24, 0x40	; 64
 9a8:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9aa:	2f ef       	ldi	r18, 0xFF	; 255
 9ac:	8f e9       	ldi	r24, 0x9F	; 159
 9ae:	95 e0       	ldi	r25, 0x05	; 5
 9b0:	21 50       	subi	r18, 0x01	; 1
 9b2:	80 40       	sbci	r24, 0x00	; 0
 9b4:	90 40       	sbci	r25, 0x00	; 0
 9b6:	e1 f7       	brne	.-8      	; 0x9b0 <main+0x60>
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <main+0x6a>
 9ba:	00 00       	nop
	
	//inactivate
	_delay_ms(100);
	PORTB |= (1 << LASER_AKTIVERA_PORT);
 9bc:	2c 9a       	sbi	0x05, 4	; 5
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	93 eb       	ldi	r25, 0xB3	; 179
 9c2:	01 97       	sbiw	r24, 0x01	; 1
 9c4:	f1 f7       	brne	.-4      	; 0x9c2 <main+0x72>
 9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <main+0x78>
 9c8:	00 00       	nop
	_delay_ms(10);
	//activate, might have to wait if this is too fast
	//PORTB &= 0b11101111;
	PORTB &= ~(1 << LASER_AKTIVERA_PORT);
 9ca:	2c 98       	cbi	0x05, 4	; 5
	
	//## IR Sensor ##
	TCCR1B |= 1 << CS10;
 9cc:	a1 e8       	ldi	r26, 0x81	; 129
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	8c 91       	ld	r24, X
 9d2:	81 60       	ori	r24, 0x01	; 1
 9d4:	8c 93       	st	X, r24
	
	//Start 1st ADC conversion
	ADCSRA |= (1 << ADSC);
 9d6:	80 81       	ld	r24, Z
 9d8:	80 64       	ori	r24, 0x40	; 64
 9da:	80 83       	st	Z, r24
	waitForActivationSensor();
 9dc:	4a de       	rcall	.-876    	; 0x672 <_Z23waitForActivationSensorv>
	
	//start first UART transmission
	UDR0 = 0x00;
 9de:	10 92 c6 00 	sts	0x00C6, r1
		//###############
		//## IR SENSOR ##
		//###############
		
		//IRSensorFunction();
		IRSensortest();
 9e2:	6d de       	rcall	.-806    	; 0x6be <_Z12IRSensortestv>
		
		//##################
		//## Laser sensor ##
		//##################
		
		laserSensorFunction();
 9e4:	c0 dd       	rcall	.-1152   	; 0x566 <_Z19laserSensorFunctionv>
		
		//########################
		//## Ultrasonic Sensors ##
		//########################
		
		ultrasonicFunction();
 9e6:	0d de       	rcall	.-998    	; 0x602 <_Z18ultrasonicFunctionv>
	}
 9e8:	fc cf       	rjmp	.-8      	; 0x9e2 <main+0x92>

000009ea <__fixunssfsi>:
 9ea:	70 d0       	rcall	.+224    	; 0xacc <__fp_splitA>
 9ec:	88 f0       	brcs	.+34     	; 0xa10 <__fixunssfsi+0x26>
 9ee:	9f 57       	subi	r25, 0x7F	; 127
 9f0:	90 f0       	brcs	.+36     	; 0xa16 <__fixunssfsi+0x2c>
 9f2:	b9 2f       	mov	r27, r25
 9f4:	99 27       	eor	r25, r25
 9f6:	b7 51       	subi	r27, 0x17	; 23
 9f8:	a0 f0       	brcs	.+40     	; 0xa22 <__fixunssfsi+0x38>
 9fa:	d1 f0       	breq	.+52     	; 0xa30 <__fixunssfsi+0x46>
 9fc:	66 0f       	add	r22, r22
 9fe:	77 1f       	adc	r23, r23
 a00:	88 1f       	adc	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	1a f0       	brmi	.+6      	; 0xa0c <__fixunssfsi+0x22>
 a06:	ba 95       	dec	r27
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__fixunssfsi+0x12>
 a0a:	12 c0       	rjmp	.+36     	; 0xa30 <__fixunssfsi+0x46>
 a0c:	b1 30       	cpi	r27, 0x01	; 1
 a0e:	81 f0       	breq	.+32     	; 0xa30 <__fixunssfsi+0x46>
 a10:	77 d0       	rcall	.+238    	; 0xb00 <__fp_zero>
 a12:	b1 e0       	ldi	r27, 0x01	; 1
 a14:	08 95       	ret
 a16:	74 c0       	rjmp	.+232    	; 0xb00 <__fp_zero>
 a18:	67 2f       	mov	r22, r23
 a1a:	78 2f       	mov	r23, r24
 a1c:	88 27       	eor	r24, r24
 a1e:	b8 5f       	subi	r27, 0xF8	; 248
 a20:	39 f0       	breq	.+14     	; 0xa30 <__fixunssfsi+0x46>
 a22:	b9 3f       	cpi	r27, 0xF9	; 249
 a24:	cc f3       	brlt	.-14     	; 0xa18 <__fixunssfsi+0x2e>
 a26:	86 95       	lsr	r24
 a28:	77 95       	ror	r23
 a2a:	67 95       	ror	r22
 a2c:	b3 95       	inc	r27
 a2e:	d9 f7       	brne	.-10     	; 0xa26 <__fixunssfsi+0x3c>
 a30:	3e f4       	brtc	.+14     	; 0xa40 <__fixunssfsi+0x56>
 a32:	90 95       	com	r25
 a34:	80 95       	com	r24
 a36:	70 95       	com	r23
 a38:	61 95       	neg	r22
 a3a:	7f 4f       	sbci	r23, 0xFF	; 255
 a3c:	8f 4f       	sbci	r24, 0xFF	; 255
 a3e:	9f 4f       	sbci	r25, 0xFF	; 255
 a40:	08 95       	ret

00000a42 <__floatunsisf>:
 a42:	e8 94       	clt
 a44:	09 c0       	rjmp	.+18     	; 0xa58 <__floatsisf+0x12>

00000a46 <__floatsisf>:
 a46:	97 fb       	bst	r25, 7
 a48:	3e f4       	brtc	.+14     	; 0xa58 <__floatsisf+0x12>
 a4a:	90 95       	com	r25
 a4c:	80 95       	com	r24
 a4e:	70 95       	com	r23
 a50:	61 95       	neg	r22
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	99 23       	and	r25, r25
 a5a:	a9 f0       	breq	.+42     	; 0xa86 <__floatsisf+0x40>
 a5c:	f9 2f       	mov	r31, r25
 a5e:	96 e9       	ldi	r25, 0x96	; 150
 a60:	bb 27       	eor	r27, r27
 a62:	93 95       	inc	r25
 a64:	f6 95       	lsr	r31
 a66:	87 95       	ror	r24
 a68:	77 95       	ror	r23
 a6a:	67 95       	ror	r22
 a6c:	b7 95       	ror	r27
 a6e:	f1 11       	cpse	r31, r1
 a70:	f8 cf       	rjmp	.-16     	; 0xa62 <__floatsisf+0x1c>
 a72:	fa f4       	brpl	.+62     	; 0xab2 <__floatsisf+0x6c>
 a74:	bb 0f       	add	r27, r27
 a76:	11 f4       	brne	.+4      	; 0xa7c <__floatsisf+0x36>
 a78:	60 ff       	sbrs	r22, 0
 a7a:	1b c0       	rjmp	.+54     	; 0xab2 <__floatsisf+0x6c>
 a7c:	6f 5f       	subi	r22, 0xFF	; 255
 a7e:	7f 4f       	sbci	r23, 0xFF	; 255
 a80:	8f 4f       	sbci	r24, 0xFF	; 255
 a82:	9f 4f       	sbci	r25, 0xFF	; 255
 a84:	16 c0       	rjmp	.+44     	; 0xab2 <__floatsisf+0x6c>
 a86:	88 23       	and	r24, r24
 a88:	11 f0       	breq	.+4      	; 0xa8e <__floatsisf+0x48>
 a8a:	96 e9       	ldi	r25, 0x96	; 150
 a8c:	11 c0       	rjmp	.+34     	; 0xab0 <__floatsisf+0x6a>
 a8e:	77 23       	and	r23, r23
 a90:	21 f0       	breq	.+8      	; 0xa9a <__floatsisf+0x54>
 a92:	9e e8       	ldi	r25, 0x8E	; 142
 a94:	87 2f       	mov	r24, r23
 a96:	76 2f       	mov	r23, r22
 a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__floatsisf+0x5e>
 a9a:	66 23       	and	r22, r22
 a9c:	71 f0       	breq	.+28     	; 0xaba <__floatsisf+0x74>
 a9e:	96 e8       	ldi	r25, 0x86	; 134
 aa0:	86 2f       	mov	r24, r22
 aa2:	70 e0       	ldi	r23, 0x00	; 0
 aa4:	60 e0       	ldi	r22, 0x00	; 0
 aa6:	2a f0       	brmi	.+10     	; 0xab2 <__floatsisf+0x6c>
 aa8:	9a 95       	dec	r25
 aaa:	66 0f       	add	r22, r22
 aac:	77 1f       	adc	r23, r23
 aae:	88 1f       	adc	r24, r24
 ab0:	da f7       	brpl	.-10     	; 0xaa8 <__floatsisf+0x62>
 ab2:	88 0f       	add	r24, r24
 ab4:	96 95       	lsr	r25
 ab6:	87 95       	ror	r24
 ab8:	97 f9       	bld	r25, 7
 aba:	08 95       	ret

00000abc <__fp_split3>:
 abc:	57 fd       	sbrc	r21, 7
 abe:	90 58       	subi	r25, 0x80	; 128
 ac0:	44 0f       	add	r20, r20
 ac2:	55 1f       	adc	r21, r21
 ac4:	59 f0       	breq	.+22     	; 0xadc <__fp_splitA+0x10>
 ac6:	5f 3f       	cpi	r21, 0xFF	; 255
 ac8:	71 f0       	breq	.+28     	; 0xae6 <__fp_splitA+0x1a>
 aca:	47 95       	ror	r20

00000acc <__fp_splitA>:
 acc:	88 0f       	add	r24, r24
 ace:	97 fb       	bst	r25, 7
 ad0:	99 1f       	adc	r25, r25
 ad2:	61 f0       	breq	.+24     	; 0xaec <__fp_splitA+0x20>
 ad4:	9f 3f       	cpi	r25, 0xFF	; 255
 ad6:	79 f0       	breq	.+30     	; 0xaf6 <__fp_splitA+0x2a>
 ad8:	87 95       	ror	r24
 ada:	08 95       	ret
 adc:	12 16       	cp	r1, r18
 ade:	13 06       	cpc	r1, r19
 ae0:	14 06       	cpc	r1, r20
 ae2:	55 1f       	adc	r21, r21
 ae4:	f2 cf       	rjmp	.-28     	; 0xaca <__fp_split3+0xe>
 ae6:	46 95       	lsr	r20
 ae8:	f1 df       	rcall	.-30     	; 0xacc <__fp_splitA>
 aea:	08 c0       	rjmp	.+16     	; 0xafc <__fp_splitA+0x30>
 aec:	16 16       	cp	r1, r22
 aee:	17 06       	cpc	r1, r23
 af0:	18 06       	cpc	r1, r24
 af2:	99 1f       	adc	r25, r25
 af4:	f1 cf       	rjmp	.-30     	; 0xad8 <__fp_splitA+0xc>
 af6:	86 95       	lsr	r24
 af8:	71 05       	cpc	r23, r1
 afa:	61 05       	cpc	r22, r1
 afc:	08 94       	sec
 afe:	08 95       	ret

00000b00 <__fp_zero>:
 b00:	e8 94       	clt

00000b02 <__fp_szero>:
 b02:	bb 27       	eor	r27, r27
 b04:	66 27       	eor	r22, r22
 b06:	77 27       	eor	r23, r23
 b08:	cb 01       	movw	r24, r22
 b0a:	97 f9       	bld	r25, 7
 b0c:	08 95       	ret

00000b0e <__gesf2>:
 b0e:	03 d0       	rcall	.+6      	; 0xb16 <__fp_cmp>
 b10:	08 f4       	brcc	.+2      	; 0xb14 <__gesf2+0x6>
 b12:	8f ef       	ldi	r24, 0xFF	; 255
 b14:	08 95       	ret

00000b16 <__fp_cmp>:
 b16:	99 0f       	add	r25, r25
 b18:	00 08       	sbc	r0, r0
 b1a:	55 0f       	add	r21, r21
 b1c:	aa 0b       	sbc	r26, r26
 b1e:	e0 e8       	ldi	r30, 0x80	; 128
 b20:	fe ef       	ldi	r31, 0xFE	; 254
 b22:	16 16       	cp	r1, r22
 b24:	17 06       	cpc	r1, r23
 b26:	e8 07       	cpc	r30, r24
 b28:	f9 07       	cpc	r31, r25
 b2a:	c0 f0       	brcs	.+48     	; 0xb5c <__fp_cmp+0x46>
 b2c:	12 16       	cp	r1, r18
 b2e:	13 06       	cpc	r1, r19
 b30:	e4 07       	cpc	r30, r20
 b32:	f5 07       	cpc	r31, r21
 b34:	98 f0       	brcs	.+38     	; 0xb5c <__fp_cmp+0x46>
 b36:	62 1b       	sub	r22, r18
 b38:	73 0b       	sbc	r23, r19
 b3a:	84 0b       	sbc	r24, r20
 b3c:	95 0b       	sbc	r25, r21
 b3e:	39 f4       	brne	.+14     	; 0xb4e <__fp_cmp+0x38>
 b40:	0a 26       	eor	r0, r26
 b42:	61 f0       	breq	.+24     	; 0xb5c <__fp_cmp+0x46>
 b44:	23 2b       	or	r18, r19
 b46:	24 2b       	or	r18, r20
 b48:	25 2b       	or	r18, r21
 b4a:	21 f4       	brne	.+8      	; 0xb54 <__fp_cmp+0x3e>
 b4c:	08 95       	ret
 b4e:	0a 26       	eor	r0, r26
 b50:	09 f4       	brne	.+2      	; 0xb54 <__fp_cmp+0x3e>
 b52:	a1 40       	sbci	r26, 0x01	; 1
 b54:	a6 95       	lsr	r26
 b56:	8f ef       	ldi	r24, 0xFF	; 255
 b58:	81 1d       	adc	r24, r1
 b5a:	81 1d       	adc	r24, r1
 b5c:	08 95       	ret

00000b5e <__divmodhi4>:
 b5e:	97 fb       	bst	r25, 7
 b60:	07 2e       	mov	r0, r23
 b62:	16 f4       	brtc	.+4      	; 0xb68 <__divmodhi4+0xa>
 b64:	00 94       	com	r0
 b66:	06 d0       	rcall	.+12     	; 0xb74 <__divmodhi4_neg1>
 b68:	77 fd       	sbrc	r23, 7
 b6a:	08 d0       	rcall	.+16     	; 0xb7c <__divmodhi4_neg2>
 b6c:	0b d0       	rcall	.+22     	; 0xb84 <__udivmodhi4>
 b6e:	07 fc       	sbrc	r0, 7
 b70:	05 d0       	rcall	.+10     	; 0xb7c <__divmodhi4_neg2>
 b72:	3e f4       	brtc	.+14     	; 0xb82 <__divmodhi4_exit>

00000b74 <__divmodhi4_neg1>:
 b74:	90 95       	com	r25
 b76:	81 95       	neg	r24
 b78:	9f 4f       	sbci	r25, 0xFF	; 255
 b7a:	08 95       	ret

00000b7c <__divmodhi4_neg2>:
 b7c:	70 95       	com	r23
 b7e:	61 95       	neg	r22
 b80:	7f 4f       	sbci	r23, 0xFF	; 255

00000b82 <__divmodhi4_exit>:
 b82:	08 95       	ret

00000b84 <__udivmodhi4>:
 b84:	aa 1b       	sub	r26, r26
 b86:	bb 1b       	sub	r27, r27
 b88:	51 e1       	ldi	r21, 0x11	; 17
 b8a:	07 c0       	rjmp	.+14     	; 0xb9a <__udivmodhi4_ep>

00000b8c <__udivmodhi4_loop>:
 b8c:	aa 1f       	adc	r26, r26
 b8e:	bb 1f       	adc	r27, r27
 b90:	a6 17       	cp	r26, r22
 b92:	b7 07       	cpc	r27, r23
 b94:	10 f0       	brcs	.+4      	; 0xb9a <__udivmodhi4_ep>
 b96:	a6 1b       	sub	r26, r22
 b98:	b7 0b       	sbc	r27, r23

00000b9a <__udivmodhi4_ep>:
 b9a:	88 1f       	adc	r24, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	5a 95       	dec	r21
 ba0:	a9 f7       	brne	.-22     	; 0xb8c <__udivmodhi4_loop>
 ba2:	80 95       	com	r24
 ba4:	90 95       	com	r25
 ba6:	bc 01       	movw	r22, r24
 ba8:	cd 01       	movw	r24, r26
 baa:	08 95       	ret

00000bac <_exit>:
 bac:	f8 94       	cli

00000bae <__stop_program>:
 bae:	ff cf       	rjmp	.-2      	; 0xbae <__stop_program>
